<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot2</title>
      <link href="/2022/01/04/Spring%20Boot2%20/"/>
      <url>/2022/01/04/Spring%20Boot2%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot2-简介"><a href="#Spring-Boot2-简介" class="headerlink" title="Spring Boot2 简介"></a>Spring Boot2 简介</h1><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111172151609.png" alt="image-20211117215141492" style="zoom:150%;"><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111180955027.png" alt="image-20211118095520822"></p><h3 id="spring-boot的快速搭建"><a href="#spring-boot的快速搭建" class="headerlink" title="spring boot的快速搭建"></a>spring boot的快速搭建</h3><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springboot2-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入了一个父项目,继承父maven项目中所有的配置信息        又引入了spring-boot-dependencies的父maven项目,帮我们管理了springboot所有依赖的版本        因此 导入已有的依赖就不需要写版本号,它帮我们解决了第三方库直接的版本冲突问题        名词:SpringBoot的版本仲裁中心    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--starter 场景启动器        不同的场景启动器维护了所对应的所有依赖,从而简化maven的书写        spring-boot-starter-aop , spring-boot-starter-data-elasticsearch , spring-boot-starter-data-jdbc ...    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--部署springboot的插件,只有加了这个插件,当我们运行java -jar --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties(约定大于配置,文件名必须是这个,位置放在resources根目录下)</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 约定大于配置</span><span class="token comment"># 文件名:application.properties</span><span class="token comment"># 位置:resources的根目录下</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/happy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Application 类(springboot启动类,唯一)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token comment">/** * @SpringBootApplication: springboot的启动类(入口) * * 包含@Configuration:也是一个配置类 * * 包含@ComponentScan:扫描包 设置basePackages * * spring底层在解析配置类时,会去解析@ComponentScan , 读取basePackages * 如果没有读取到,会将当前配置类所在的包当做是basePackages的扫描包 * * 位置最好放在需要扫描的包的根路径下!!!或者放在所有bean的顶层目录中 */</span><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment">//标记成springboot的启动类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HelloController类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span> <span class="token comment">// 等于@Controller + @ResponseBody</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/world"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件和配置原理"><a href="#配置文件和配置原理" class="headerlink" title="配置文件和配置原理"></a>配置文件和配置原理</h3><ul><li>使用Spring Initializer新建一个父Maven项目</li><li>使用Spring Initializer新建一个子Maven项目</li><li>修改子项目中的继承方式</li></ul><p>之前:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111181102568.png" alt="image-20211118110250451"></p><p>之后:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111181103289.png" alt="image-20211118110312206"></p><blockquote><p>==spring_init== 继承自 ==spring_parent== 继承自 ==spring-boot-starter-parent==</p></blockquote><h3 id="自定义SpringApplication"><a href="#自定义SpringApplication" class="headerlink" title="自定义SpringApplication"></a>自定义SpringApplication</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// SpringApplication.run(SpringInitializerApplication.class, args);</span>    <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">SpringInitializerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span>OFF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭springboot的启动横幅</span>    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以通过SpringApplication.run方法直接启动</li><li>可以通过实例化SpringApplication来进行自定义配置在启动run方法</li></ul><h3 id="配置文件的使用"><a href="#配置文件的使用" class="headerlink" title="配置文件的使用"></a>配置文件的使用</h3><p>全局配置文件的名字一定要叫:==application.properties==(也可以更改,但不推荐)</p><ul><li>application.properties</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191102592.png" alt="image-20211119110212521"></p><ul><li>application.yml(==推荐使用== 可读性强!)</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191102899.png" alt="image-20211119110219846"></p><ul><li>application.yaml(书写方式等同于yml)</li></ul><blockquote><p>如果同时出现properties文件和yml文件,则springboot会优先选择yml文件作为配置文件</p><p>(spring-boot-starter-parent中的设置,==yml文件优先!==(<strong>前提是同一个目录里下</strong>))</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191109636.png" alt="image-20211119110911542"></p><p>允许多个配置文件共存:</p><ul><li>以yml文件中的配置为主</li><li>其他文件作为配置的互补!!</li></ul></blockquote><p><strong>外部约定配置文件加载顺序(==从低到高==):</strong></p><ul><li>classpath根目录下</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191119761.png" alt="image-20211119111938672"></p><ul><li>classpath根config/</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191119661.png" alt="image-20211119111953595"></p><ul><li>项目根目录</li></ul><p>​        如果当前项目是继承\耦合 关系maven项目的话,项目根目录=父maven项目的根目录</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191122938.png" alt="image-20211119112201867"></p><ul><li>项目根目录/config</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191122803.png" alt="image-20211119112234748"></p><ul><li>直接子目录(可能就是直接在命令行直接指定配置文件位置)/config</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111191123015.png" alt="image-20211119112327955"></p><h3 id="profile文件的加载"><a href="#profile文件的加载" class="headerlink" title="profile文件的加载"></a>profile文件的加载</h3><p>对于应用程序来说,不同环境需要不同的配置.</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111192123314.png" alt="image-20211119212340201"></p><p>所有配置文件按一下顺序考虑:优先级==从低到高==</p><ul><li><p>打包在jar中配置文件</p></li><li><p>打包在jar中profile</p></li><li><p>打包的jar之外的配置文件</p></li><li><p>打包的jar之外的profile </p></li></ul><h3 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h3><p>松散绑定:</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">user:  userName: 张胜男user:  user-ame: 张胜男user:  user_ame: 张胜男user:  USERNAME: 张胜男user:  username: 张胜男<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上几种命名是可以自动绑定bean属性<code>User.username</code></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111211514972.png" alt="image-20211121151451825"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token comment">/** * 可以通过@value + SPEL 直接绑定springboot配置文件中的值 * * @ConfigurationProperties(prefix = "user") * 常用于bean属性和yml配置文件的绑定 *  prefix属性指定配置文件中某一个节点,该节点中的子节点将自动和属性进行绑定 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token comment">//可以省略 后续的@Value("${user.username}")</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment">// @Value("${user.username}")</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">// @Value("${user.age}")</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> girlFriend<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token comment">//此处省略 getter setter toString等方法!!!!</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dest<span class="token punctuation">;</span><span class="token comment">//此处省略 getter setter toString等方法!!!!</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>application.yml</strong></em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 注意每个冒号后面都有空格!!!</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /yml<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">main</span><span class="token punctuation">:</span>    <span class="token key atrule">lazy-initialization</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">user</span><span class="token punctuation">:</span>  <span class="token key atrule">user-name</span><span class="token punctuation">:</span> 张胜男  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 2020/01/01  <span class="token key atrule">hobbies</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> 唱歌<span class="token punctuation">,</span>跳舞 <span class="token punctuation">]</span>  <span class="token comment"># 行内写法</span>  <span class="token key atrule">girl-friend</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">18</span><span class="token punctuation">:</span> 李冰冰<span class="token punctuation">,</span><span class="token key atrule">20</span><span class="token punctuation">:</span> 迪丽热巴<span class="token punctuation">}</span> <span class="token comment"># 行内写法</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span>    <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">desc</span><span class="token punctuation">:</span> 北京<span class="token comment">#  girl-friend:</span><span class="token comment">#    18: 范冰冰</span><span class="token comment">#    20: 迪丽热巴</span><span class="token comment">#  hobbies:</span><span class="token comment">#    - 唱歌</span><span class="token comment">#    - 跳舞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机数和属性引用"><a href="#随机数和属性引用" class="headerlink" title="随机数和属性引用"></a>随机数和属性引用</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">my</span><span class="token punctuation">:</span>  <span class="token key atrule">secret</span><span class="token punctuation">:</span> <span class="token string">"${random.value}"</span>  <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token string">"${random.int}"</span>  <span class="token key atrule">bignumber</span><span class="token punctuation">:</span> <span class="token string">"${random.long}"</span>  <span class="token key atrule">uuid</span><span class="token punctuation">:</span> <span class="token string">"${random.uuid}"</span>  <span class="token key atrule">number-less-than-ten</span><span class="token punctuation">:</span> <span class="token string">"${random.int(10)}"</span>  <span class="token key atrule">number-in-range</span><span class="token punctuation">:</span> <span class="token string">"${random.int[1024,65536]}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>random.int*</code> syntax is <code>OPEN value (,max) CLOSE</code> where the <code>OPEN,CLOSE</code> are any character and <code>value,max</code> are integers. If <code>max</code> is provided, then <code>value</code> is the minimum value and <code>max</code> is the maximum value (exclusive).</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">user</span><span class="token punctuation">:</span>  <span class="token key atrule">user-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.value<span class="token punctuation">}</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int(1<span class="token punctuation">,</span>150)<span class="token punctuation">}</span>  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 2020/01/01  <span class="token key atrule">hobbies</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> 唱歌<span class="token punctuation">,</span>跳舞 <span class="token punctuation">]</span>  <span class="token comment"># 行内写法</span>  <span class="token key atrule">girl-friend</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">18</span><span class="token punctuation">:</span> 李冰冰<span class="token punctuation">,</span><span class="token key atrule">20</span><span class="token punctuation">:</span> 迪丽热巴<span class="token punctuation">}</span> <span class="token comment"># 行内写法</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span>    <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">dest</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>user.user<span class="token punctuation">-</span>name<span class="token punctuation">}</span>的家在北京 <span class="token comment"># 属性占位符 只支持引用,不支持SpEL表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jsr-303数据校验"><a href="#jsr-303数据校验" class="headerlink" title="jsr-303数据校验"></a>jsr-303数据校验</h3><p>Bean Validation 中内置的 constraint</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111211507800.png" alt="image-20211121150718676"></p><p>Hibernate Validator 附加的 constraint</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111211507185.png" alt="image-20211121150754083"></p><p>还有其他方法的注入(引入外部xxx.properties):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token comment">//可以省略 后续的@Value("${user.username}")</span><span class="token annotation punctuation">@Validated</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:data/user.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> girlFriend<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>data/user.properties</strong></em></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">user.age</span><span class="token punctuation">=</span><span class="token attr-value">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="[?]自动配置原理"></a>[?]自动配置原理</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core</a></p><p><em><strong>org.springframework.boot.autoconfigure.==SpringBootApplication==:</strong></em></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111211547546.png" alt="image-20211121154752373"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment">// 设置当前注解标记位置(当前:类)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment">// 注解保留策略,保留在什么级别下   注解会被在运行时由 VM 保留，因此它们可以被反射读取。</span><span class="token annotation punctuation">@Documented</span><span class="token comment">// java doc会生成注解信息</span><span class="token annotation punctuation">@Inherited</span><span class="token comment">// 会不会被继承</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token comment">//表示这是一个springboot的配置类</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token comment">// springboot开启自动配置功能,自动加载自动配置类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token comment">// 扫描包 相当于在spring.xml中的  &lt;context:comonent-scan&gt; 但是没有指定basePackages 默认将当前配置类所在包作为扫描包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">TypeExcludeFilter 是springboot对外提供的扩展类,可以供我们全照我们的方式进行排除AutoConfigurationExcludeFilter 排除所有配置类且是自动配置类的类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="热部署与日志"><a href="#热部署与日志" class="headerlink" title="热部署与日志"></a>热部署与日志</h3><p>热部署 配置!!!</p><ol><li>加入依赖!</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--devtools热部署--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置IDEA（settings）</li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111211637515.png" alt="image-20211121163732386"></p><ol start="3"><li>compile.automake.allow.when.app.running</li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111211640448.png" alt="image-20211121164056284"></p><p>springboot日志框架!</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111212137687.png" alt="image-20211121213716507"></p><p>日志格式详细介绍:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">21</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">46</span><span class="token operator">:</span><span class="token number">12.968</span>  INFO <span class="token number">16288</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>  restartedMain<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>AprLifecycleListener</span>   <span class="token operator">:</span> APR<span class="token operator">/</span><span class="token class-name">OpenSSL</span> configuration<span class="token operator">:</span> useAprConnector <span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span> useOpenSSL <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111212149684.png" alt="image-20211121214901530"></p><p>==注意:==</p><p>在yml基本语法中如果有特殊字符% &amp; 记得用单引号<code>'</code>包起来</p><p>可以使用</p><pre class="line-numbers language-none"><code class="language-none">logging:pattern:  console:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来修改默认的控制的日志格式</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">'%clr(%d<span class="token punctuation">{</span>$<span class="token punctuation">{</span>LOG_DATEFORMAT_PATTERN<span class="token punctuation">:</span><span class="token punctuation">-</span>yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss.SSS<span class="token punctuation">}</span><span class="token punctuation">}</span>)<span class="token punctuation">{</span>faint<span class="token punctuation">}</span> %clr($<span class="token punctuation">{</span>LOG_LEVEL_PATTERN<span class="token punctuation">:</span><span class="token punctuation">-</span>%5p<span class="token punctuation">}</span>) %clr($<span class="token punctuation">{</span>PID<span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token punctuation">}</span>)<span class="token punctuation">{</span>magenta<span class="token punctuation">}</span> %clr(<span class="token punctuation">---</span>)<span class="token punctuation">{</span>faint<span class="token punctuation">}</span> %clr(<span class="token punctuation">[</span>%15.15t<span class="token punctuation">]</span>)<span class="token punctuation">{</span>faint<span class="token punctuation">}</span> %clr(%<span class="token punctuation">-</span>40.40logger<span class="token punctuation">{</span><span class="token number">39</span><span class="token punctuation">}</span>)<span class="token punctuation">{</span>cyan<span class="token punctuation">}</span> %clr(<span class="token punctuation">:</span>)<span class="token punctuation">{</span>faint<span class="token punctuation">}</span> %m%n$<span class="token punctuation">{</span>LOG_EXCEPTION_CONVERSION_WORD<span class="token punctuation">:</span><span class="token punctuation">-</span>%wEx<span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>%clr</code> :指定当前内容以什么颜色输出  {faint}</li></ul><pre class="line-numbers language-none"><code class="language-none">(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>${value:value2}</code>springboot==占位符+null条件表达式==(如果value为null,使用value2)</li><li>LOG_DATEFORMAT_PATTERN:系统环境变量中的值,spring底层会根据对应的配置项将值设置到对应的环境变量中.</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221441518.png" alt="image-20211122144100392"></p><ul><li><p><code>%d</code>:logback日期显示方式</p></li><li><p><code>-%5</code>:当前内容占字符的长度(向左对齐,保持五个字符的宽度)</p></li><li><p><code>p</code> :输出级别</p></li><li><p><code>${PID:- }</code>:线程id</p></li></ul><h3 id="日志文件输出"><a href="#日志文件输出" class="headerlink" title="日志文件输出"></a>日志文件输出</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">logging</span><span class="token punctuation">:</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> hello.log <span class="token comment">#可以设置文件的名称,如果没有设置路径会默认在项目的相对路径下</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>/<span class="token comment">#不可以指定文件名称,必须要指定一个物理文件夹路径,会默认使用spring.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日志迭代"><a href="#日志迭代" class="headerlink" title="日志迭代"></a>日志迭代</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core.logging.logback.rollingpolicy.clean-history-on-start"><code>logging.logback.rollingpolicy.clean-history-on-start</code></a></td><td align="center">是否在启动时清除存档日志文件</td><td align="center"><code>false</code></td></tr><tr><td align="center"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core.logging.logback.rollingpolicy.file-name-pattern"><code>logging.logback.rollingpolicy.file-name-pattern</code></a></td><td align="center">过渡日志文件名的模式</td><td align="center"><code>${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz</code></td></tr><tr><td align="center"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core.logging.logback.rollingpolicy.max-file-size"><code>logging.logback.rollingpolicy.max-file-size</code></a></td><td align="center">最大日志文件大小</td><td align="center"><code>10MB</code></td></tr><tr><td align="center"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core.logging.logback.rollingpolicy.max-history"><code>logging.logback.rollingpolicy.max-history</code></a></td><td align="center">归档日志文件的最大保留天数</td><td align="center"><code>7</code></td></tr><tr><td align="center"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.core.logging.logback.rollingpolicy.total-size-cap"><code>logging.logback.rollingpolicy.total-size-cap</code></a></td><td align="center">要保留的日志备份的总大小</td><td align="center"><code>0B</code></td></tr></tbody></table><h4 id="自定义日志配置文件"><a href="#自定义日志配置文件" class="headerlink" title="自定义日志配置文件"></a>自定义日志配置文件</h4><p>如果使用自定义配置文件 会使得springboot中全局配置文件的logging相关配置失效</p><h4 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h4><ul><li>将logback切换成log4j2</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--自动添加了starter-logging 也就是logback的依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--排除starter-logging 也就是logback的依赖 为了其他日志框架的切换--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--Log4j2的场景启动器 桥接器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将logback切换成log4j</li></ul><ol><li>logback的桥接器排除</li><li>添加log4j的桥接器</li><li>添加配置文件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--log4j桥接器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排除maven依赖操作"><a href="#排除maven依赖操作" class="headerlink" title="排除maven依赖操作"></a>排除maven依赖操作</h3><p>前提:安装插件:==maven helper==</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221638413.png" alt="image-20211122163805232"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221639407.png" alt="image-20211122163950191"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221638893.png" alt="image-20211122163846758"></p><h3 id="springboot-与-Web开发"><a href="#springboot-与-Web开发" class="headerlink" title="springboot 与 Web开发"></a>springboot 与 Web开发</h3><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221645456.png" alt="image-20211122164540296"></p><h4 id="推荐使用构造器注入"><a href="#推荐使用构造器注入" class="headerlink" title="推荐使用构造器注入"></a>推荐使用构造器注入</h4><p><a href="https://www.cnblogs.com/joemsu/p/7688307.html">https://www.cnblogs.com/joemsu/p/7688307.html</a></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221717942.png" alt="image-20211122171752812"></p><h4 id="如何将写好的mvc进行测试"><a href="#如何将写好的mvc进行测试" class="headerlink" title="如何将写好的mvc进行测试?"></a>如何将写好的mvc进行测试?</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111221733728.png" alt="image-20211122173335560"></p><h4 id="restTemplate"><a href="#restTemplate" class="headerlink" title="restTemplate"></a>restTemplate</h4><p>适用于微服务架构下  服务之间的远程调用 ,ps 以后使用微服务架构,==spring cloud feign==</p><blockquote><p>WebClient 与 restTemplate:</p><p>都可以调用远程服务,区别:</p><p>webclient 依赖 webflux</p><p>webclient 请求远程服务是无阻塞,响应式</p></blockquote><blockquote><p> restTemplate是阻塞式的 ,需要等待请求响应后才能执行下一句代码</p></blockquote><p>掌握:</p><ul><li>DELETE</li><li>GET</li><li>POST</li><li>PUT</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111231441162.png" alt="image-20211123144146965"></p><p><strong>springboot_web</strong></p><p>UserController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springbootweb<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">// spring 推荐使用构造器注入的方式</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token comment">//@PathVariable:代表将URL中的占位符 绑定到方法的形参之中!!!</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"查询成功"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 添加</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token comment">// 添加@RequestBody注解是为了接受json类型数据</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"添加成功"</span><span class="token punctuation">,</span>userService<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 修改</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token comment">// 这里没有用到@Pathvariable 是因为id 会自动注入到User对应的字段中!!!!!</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">editUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"修改成功"</span><span class="token punctuation">,</span>userService<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 删除</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">editUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"删除成功"</span><span class="token punctuation">,</span>userService<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>springboot_web_rest</strong></p><p>OrderController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springboot_web_rest<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token comment">// 声明了一个RestTemplate</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token comment">// 当bean 没有无参构造函数的时候,spring 将自动拿到有参的构造函数,参数进行自动注入</span>    <span class="token comment">// 不需要加@Autowired 当有多个构造器的时候会选择有@Autowired注解的构造器进行注入</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">OrderController</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> restTemplateBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplateBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">/**         * 调用删除         *  不需要额外在传递参数,所以不需要使用HttpEntity         */</span>        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> resultResponseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/user/{id}"</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultResponseEntity<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultResponseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 下单 远程访问rest服务!</span><span class="token comment">// 基于restTemplate 调用查询</span><span class="token class-name">Result</span> forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/user/{id}"</span><span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> forObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**         *  调用新增,这里的对象user 会被转化为json格式!         *  url         :请求的远程rest url         *  object      :post请求的参数         *  Class&lt;T&gt;    :返回的类型         *  ...Object   :@PathVariable占位符的参数,地址栏上没有占位符的不需要使用         */</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"无为"</span><span class="token punctuation">,</span><span class="token string">"地球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> resultResponseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/user/add"</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultResponseEntity<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> resultResponseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**         * 调用修改restTemplate.put         *  但是 put方法没有返回值,如果在当前springboot中想看到返回结果         *  可以使用restTemplate.exchange!!!!         */</span> <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"修改"</span><span class="token punctuation">,</span> <span class="token string">"修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// restTemplate.put("http://localhost:8080/user/{id}",user,Result.class);</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userHttpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> resultResponseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/user/{id}"</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">,</span> userHttpEntity<span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultResponseEntity<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> resultResponseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Result</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token comment">// restTemplate会调用无参构造函数 把数据赋值到该对象</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment">//省略setter getter tostring.....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MockMVC测试"><a href="#MockMVC测试" class="headerlink" title="MockMVC测试"></a>MockMVC测试</h4><p>如何在idea编写string的json文件?</p><ol><li><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111231627025.png" alt="image-20211123162734839"></li><li><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111231628580.png" alt="image-20211123162825414"></li><li><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111231629501.png" alt="image-20211123162922329"></li></ol><p><strong>如何进行测试?</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springbootweb</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span> <span class="token comment">// 专门做mockmvc的 有spring-test提供,依赖junit5</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockMvcTests</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>   <span class="token comment">//这里的注解是junit5的直接(jupiter)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMockMVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 发起一个模拟请求 不依赖网络,web服务 不需要启动web应用!</span>        <span class="token class-name">ResultActions</span> resultActions <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>                <span class="token comment">// 注意url 是controller中的url</span>                <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 发送了get请求</span>                        <span class="token comment">//设置响应文本类型</span>                        <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">characterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        resultActions<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置response的编码格式</span>        resultActions                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.data.username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"张飒2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultHandlers</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言并打印</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>   <span class="token comment">//这里的注解是junit5的直接(jupiter)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMockMVCpost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//language=JSON</span>        <span class="token class-name">String</span> userJson <span class="token operator">=</span> <span class="token string">"{\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"username\": \"张三\",\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"address\": \"mockMVC\"\n"</span> <span class="token operator">+</span>                <span class="token string">"}"</span><span class="token punctuation">;</span>        <span class="token comment">// 发起一个模拟请求 不依赖网络,web服务 不需要启动web应用!</span>        <span class="token class-name">ResultActions</span> resultActions <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>                <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">)</span><span class="token comment">// 发送了get请求</span>                        <span class="token comment">// 设置响应文本类型</span>                        <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>                        <span class="token comment">// 请求的字符编码</span>                        <span class="token punctuation">.</span><span class="token function">characterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>                        <span class="token comment">// 设置请求的文本类型</span>                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>                        <span class="token comment">// 传入准备好的json 字符串</span>                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>userJson<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        resultActions<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置response的编码格式</span>        resultActions                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 使用JsonPath json路径表达式 响应断言以检查正确性。</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.data.length()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultHandlers</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言并打印</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="springboot的自动配置"><a href="#springboot的自动配置" class="headerlink" title="springboot的自动配置"></a>springboot的自动配置</h3><p>Spring Boot 为Spring MVC 提供了自动配置,可与大多数应用程序完美配合</p><p>自动配置在spring的默认值之上添加了一下功能:</p><ul><li><p>包含<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver</code></p><ul><li><p>ViewResovler都是SpringMVC内置的视图解析器</p><ul><li><code>ContenNegotiatingViewResolver</code></li></ul><blockquote><p>不解析视图本身，而是委托给其他视图解析程序，并选择与客户端请求的表示类似的视图。可以从Accept标头或查询参数（例如，“/path？format=pdf”）确定表示形式。</p><p><strong>所有的视图解析器 , 都会根据返回的视图名称进行解析视图</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">RequestAttributes</span> attrs <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>attrs <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">,</span> <span class="token string">"No current ServletRequestAttributes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> requestedMediaTypes <span class="token operator">=</span> <span class="token function">getMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>requestedMediaTypes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获得所有匹配的视图</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> candidateViews <span class="token operator">=</span> <span class="token function">getCandidateViews</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> locale<span class="token punctuation">,</span> requestedMediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取最终的</span><span class="token class-name">View</span> bestView <span class="token operator">=</span> <span class="token function">getBestView</span><span class="token punctuation">(</span>candidateViews<span class="token punctuation">,</span> requestedMediaTypes<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bestView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> bestView<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>委派给其他视图解析器进行解析:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111232218807.png" alt="image-20211123221828541"></p><p>由以上代码得出结论,它是从spring IOC容器获得ViewResolver类型Bean,那么我们可以自己定制一个ViewResolver,</p><p><code>ContenNegotiatingViewResolver</code>也会帮我们委派解析</p></blockquote><ul><li><code>BeanNameViewResolver</code></li></ul><blockquote><p>会根据handler方法返回的视图名称 对应到具体视图并解析,==去ioc容器中找到名字叫xushu的一个Bean,并且这个bean实现了View!!==</p><p>示例:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111232230084.png" alt="image-20211123223050862"></p><p>可以配置一个叫Xushu的视图</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111232231888.png" alt="image-20211123223136642"></p></blockquote></li></ul></li><li><p>支持提供静态资源. 包括对WebJars的支持</p><ul><li><p>以前要访问jpg\css js等 这些静态资源文件,需要在web.xml中进行配置,在springboot不需要配置,只需要放在约定文件夹中就可以(约定大于配置)</p></li><li><p>原理</p><ul><li><p>webjars就是将静态资源放在jar包中进行访问(webjars.org)</p></li><li><p>当访问webjars时 就会去<code>"classpath:/META-INF/resources/webjars/"</code>对应进行映射</p><ul><li>当访问<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a> 对应映射到<code>/META-INF/resources/webjars/jquery/3.5.1/jquery.js</code></li></ul></li></ul><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Duration</span> cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CacheControl</span> cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUseLastModified</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUseLastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241028335.png" alt="image-20211124102854116"><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241032275.png" alt="image-20211124103234067"></p></blockquote></li><li><p>在static访问静态资源原理? 会依次访问下面的路径</p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// getStaticLocations 地址下的数组内容!!!!</span><span class="token punctuation">{</span> <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span><span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//xxxxxxxx省略xxxxxxxx</span><span class="token class-name">String</span> staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUseLastModified</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUseLastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>配置欢迎页</p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">&gt;</span></span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locations <span class="token operator">=</span> <span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getIndexHtml</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">isReadable</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接将index.html防止在resources下的static中即可</p></blockquote></li><li><p>也可以通过配置文件指定具体的静态资源地址</p></li></ul></li><li><p>自动注册<code>Converter</code> <code>GenericConverter</code> <code>Formatter</code> Bean类</p><ul><li>使用方式参考springmvc课程</li></ul></li><li><p>支持<code>HttpMessageConverters</code></p><ul><li><p>负责http请求和响应的文本处理</p></li><li><blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241051157.png" alt="image-20211124105134896"></p></blockquote></li></ul></li><li><p>自动注册<code>MessageCodeResolver</code></p><ul><li>修改4xx错误下格式转换出错 类型转化出错的 错误代码</li></ul></li><li><p>静态<code>index.html</code>支持</p><ul><li>在springboot 中可以直接返回html的视图,因为在<code>WebMvcAutoConfiguration</code>类中配置了</li></ul><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">InternalResourceViewResolver</span> <span class="token function">defaultViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">InternalResourceViewResolver</span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   resolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   resolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> resolver<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以就可以通过全局配置文件(<strong>application.properties</strong>)中完成</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring.mvc.view.prefix=/pages/spring.mvc.view.suffix=.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p>自动使用<code>ConfigurableWebBindingInitializer</code> Bean</p><p>* </p></li></ul><h3 id="定制SpringMvc的自动配置"><a href="#定制SpringMvc的自动配置" class="headerlink" title="定制SpringMvc的自动配置"></a>定制SpringMvc的自动配置</h3><p>springmvc的自动配置类：==WebMvcAutoConfiguration==</p><ol><li>在大多数情况下,springboot在自动配置类中标记了很多<code>@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code>就是如果容器中没有当前的bean才会生效,我们只需要在自己的配置类中==配置对应的bean就可以覆盖默认的配置类==</li></ol><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><ol><li><p>创建一个包<code>interceptors</code></p></li><li><p>在包里创建一个类<code>Timeinterceptor</code></p></li><li><p>实现接口<code>HandlerInterceptor</code></p></li><li><p>重写三个方法</p><ol><li><code>preHandle</code>:请求之前</li><li><code>postHandle</code>:请求之后,视图渲染之前</li><li><code>afterCompletion</code>:视图渲染之后</li></ol></li><li><p>将<code>preHandle</code>中的返回值设置为<code>true</code>:为了方法往下面继续执行</p></li><li><p>通过<code>WebMvcConfigure</code>来配置拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 添加拦截器     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 添加拦截器</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 拦截映射规则</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springbootweb<span class="token punctuation">.</span>interceptors</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token class-name">LocalDateTime</span> begin<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TimeInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 开始时间</span>        begin <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果这里不是true 就不会被拦截处理</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 结束时间</span>        <span class="token class-name">LocalDateTime</span> end <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算两个时间差</span>        <span class="token class-name">Duration</span> between <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得相差的毫秒</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> between<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前请求:"</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"请求执行时间为 : "</span><span class="token operator">+</span>l<span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h4><ul><li>注解实现跨域:在controller中的方法上添加注解<code>@CrossOrigin</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查询</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span> <span class="token comment">//支持跨域资源共享</span><span class="token comment">//@PathVariable:代表将URL中的占位符 绑定到方法的形参之中!!!</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"查询成功"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>全局配置跨域请求</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springbootweb<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span> <span class="token comment">// 映射服务器中那些http接口允许跨域访问</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 配置允许跨域访问的请求的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="WebMvcConfigure原理"><a href="#WebMvcConfigure原理" class="headerlink" title="WebMvcConfigure原理"></a>WebMvcConfigure原理</h4><p>实现<code>WebMvcConfigure</code>接口可以扩展mvc实现,又保留了springboot的自动配置</p><p>在<code>WebMvcAutoConfiguration</code>类中也有一个实现了<code>WebMvcConfigure</code>接口的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>WebMvcAutoConfigurationAdapter</code>也是利用实现接口的方法来进行配置,所以直接学习这个类~!!!!并且他帮我们实现了其他不常用的方法,帮助我们进行自动配置,我们只需要定制(==拦截器,视图控制器,CORS==)等在开发中需要额外定制的功能</p><p>   当添加了<code>@EnableWebMvc</code>注解在配置类后,就不会使用springMVC自动配置类的默认配置</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将此注释添加到@Configuration类会从WebMvcConfigurationSupport导入 Spring MVC 配置，例如：</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">MyConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 <code>WebMvcAutoConfiguration</code>类中有一行注解:<code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>代表着,只有当<code>WebMvcConfigurationSupport</code>bean不存在时才会使得当前自动配置类生效!</p><p>正是因为通过注解<code>@EnableWebMvc</code>导入了<code>WebMvcConfigurationSupport</code>的bean,所以自动配置类才会==失效==</p></blockquote><h3 id="json开发"><a href="#json开发" class="headerlink" title="json开发"></a>json开发</h3><p>springboot集成了三款json框架</p><ul><li>Gson</li><li>==jackson默认==</li><li>JSON-B</li></ul><p><strong>jackson的使用:</strong></p><ul><li><p><code>@JsonIgnore </code>:进行排除json序列化,将它标注在属性上将不会进行json序列化</p></li><li><p><code>@JsonFormat(pattern = "yyyy-MM-dd hh:mm:ss",locale = "zh")</code>:可以进行日期格式化</p></li><li><p><code>@JsonInclude(JsonInclude.Include.NON_NULL)</code>:当属性为null时,则不进行序列化,还有其他的值:<code>EMPTY</code>等</p></li><li><p><code>@JsonProperty("uname")</code>:来设置别名,这样显示的就是别名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token comment">//{"code":200,"message":"查询成功","data":{"id":1,"address":"北京","birthday":"2021-11-24 06:20:37","uname":"张飒1"}}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="序列化反序列化"><a href="#序列化反序列化" class="headerlink" title="序列化反序列化"></a>序列化反序列化</h4><p>springboot还能提供<code>@JsonComponent</code>来根据自己的业务要求进行json的序列化个反序列化</p><ul><li>创建一个json自定义类</li><li>添加注解<code>@JsonComponent</code></li><li>添加静态内部类,并提供需要进行序列化和反序列化的<strong>泛型</strong><ul><li><code>public static class Serializer extends JsonObjectSerializer&lt;User&gt;</code></li><li><code>public static class Deserializer extends JsonObjectDeserializer&lt;User&gt;</code></li></ul></li><li>重写方法并添加逻辑</li></ul><p>例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springbootweb<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@JsonComponent</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserJsonCustom</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Serializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonObjectSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">serializeObject</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> jgen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> provider<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            jgen<span class="token punctuation">.</span><span class="token function">writeObjectField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化了{"id","xxx"}</span>            jgen<span class="token punctuation">.</span><span class="token function">writeObjectField</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span><span class="token string">"xxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化了{"id","xxx"}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Deserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonObjectDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">User</span> <span class="token function">deserializeObject</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> jsonParser<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ObjectCodec</span> codec<span class="token punctuation">,</span> <span class="token class-name">JsonNode</span> tree<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">findValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="国际化"><a href="#国际化" class="headerlink" title="[?]国际化"></a>[?]国际化</h4><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="[?]统一异常处理"></a>[?]统一异常处理</h3><ol><li>springboot有统一异常处理自动配置类,可以进行==二次开发==</li></ol><p><code>ErrorMvcAutoConfiguration</code>:统一异常处理配置类<br>重要组件:</p><ul><li><code>DefaultErrorViewResolver</code></li><li><code>BasicErrorController</code></li><li><code>DefaultErrorAttributes</code></li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241457166.png" alt="image-20211124145742882"></p><p>当时用浏览器发送请求时,请求头是<code>Accept:text/html</code>,会交给<code>errorHtml</code>方法处理,除了text/html的其他请求都会交给<code>error</code>方法处理</p><p>BasicErrorController类中包含的两个方法:<code>errorHtml</code> <code>error</code></p><ul><li><code>errorHtml</code>怎么去定制返回页面? <ul><li><code>getEoorAttributes</code>获取所需要的的异常信息</li><li><code>resolveErrorView</code>解析视图</li></ul></li></ul><blockquote><p>默认情况下在<code>resources-static-error-400.html</code>中编写错误页面视图即可!</p></blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241549259.png" alt="image-20211124154944977"></p><p>总结:从errorHtml方法可以得出结论:我们需要使用自定义的页面响应错误只需要在对应的路径上创建对应错误代码的页面就行了,<strong>但是想记录日志就需要自己定制</strong></p><ul><li><code>error</code>:是怎么返回json数据的,从而要定制自己的</li></ul><ol start="2"><li>springmvc中的<code>@ControllerAdvce</code>也可以使用</li></ol><h3 id="springboot的嵌入式servlet容器"><a href="#springboot的嵌入式servlet容器" class="headerlink" title="springboot的嵌入式servlet容器"></a>springboot的嵌入式servlet容器</h3><p>springboot 默认的servlet容器是tomcat</p><ul><li><p>嵌入式servlet容器配置修改</p><ul><li><p>可以通过server.xxx来配置web服务,如果带了具体的服务器名称则是单独对该服务器进行设置</p><blockquote><p>server.tomcat.xxxx</p></blockquote></li><li><p>可以通过WebServeFactoryCustomizer的Bean修改</p></li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241618821.png" alt="image-20211124161816552"></p></li></ul><ul><li><p>注册servlet的三大组件</p><ul><li><p>==servlet==   ==listener==   ==filter==</p><p><strong>servlet3.0提供的注解方式注册</strong></p><blockquote><p><code>@WebServlet</code> <code>WebListener</code> <code>WebFilter</code>三个注解对应上述三个组件</p></blockquote></li></ul><ol><li><p>声明servlet及映射</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloServlet"</span> <span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">"/HelloServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello servlet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在启动类上加上注解<code>@servletCompinentScan</code>才会扫描三大组件</p></li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootServletApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootServletApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>springboot提供的注册</strong></p><p>使用<code>ServletRegistrationBean</code> <code>FilterRegistrationBean</code> <code>ServletListenerRegistrationBean</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello bean servlet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 声明一个servlet注册器Bean</span>        <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Servlet</span><span class="token punctuation">&gt;</span></span> servletServletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册写好的servlet</span>        servletServletRegistrationBean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletServletRegistrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"BeanServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加映射规则</span>        servletServletRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/BeanServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletServletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>切换其他servlet容器</strong></p><p>springboot包含对嵌入式Tomcat,jetty,undertow服务器的支持</p><ul><li>tomcat(默认)</li><li>jetty(socket)</li><li>Undertow(响应式)</li></ul><p>==要切换 ,先从pom.xml中排除==</p><p>下面是排除Tomcat 并 依赖<strong>jetty</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--切换成了jetty--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--切换undertow--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌入式servlet容器自动配置原理"><a href="#嵌入式servlet容器自动配置原理" class="headerlink" title="[?]嵌入式servlet容器自动配置原理"></a>[?]嵌入式servlet容器自动配置原理</h3><h3 id="使用外部servlet容器"><a href="#使用外部servlet容器" class="headerlink" title="使用外部servlet容器"></a>使用外部servlet容器</h3><p>外部servlet容器</p><ul><li>服务器安装tomcat 环境变量</li><li>部署：war—运维—tomcat webapp startup.sh –启动</li><li>开发:将开发绑定本地tomcat</li></ul><p>内嵌servlet容器</p><ul><li>部署:jar-&gt;运维-&gt;java-jar启动</li></ul><h3 id="使用外部servlet容器原理"><a href="#使用外部servlet容器原理" class="headerlink" title="[?]使用外部servlet容器原理"></a>[?]使用外部servlet容器原理</h3><h3 id="springboot作为单体web应用的使用"><a href="#springboot作为单体web应用的使用" class="headerlink" title="springboot作为单体web应用的使用"></a>springboot作为单体web应用的使用</h3><p>模板技术</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111241706833.png" alt="image-20211124170610572"></p><p>以FreeMarker为例</p><ul><li>添加freemarker的依赖</li><li>设置freemarker的全局配置</li><li>添加freemarker的页面</li><li>对应的控制器</li></ul><h3 id="Springboot-集成MyBatis"><a href="#Springboot-集成MyBatis" class="headerlink" title="Springboot 集成MyBatis"></a>Springboot 集成MyBatis</h3><h4 id="整合Durid连接池"><a href="#整合Durid连接池" class="headerlink" title="整合Durid连接池"></a>整合Durid连接池</h4><ul><li>**普通版 **</li></ul><p><strong>pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>application.yml</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 数据源</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123123</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springboot_mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone</span> = GMT    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DruidConfiguration配置类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>springboot_mybatis<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.type"</span><span class="token punctuation">)</span> <span class="token comment">// 确保配置文件中有该项配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">// @Bean</span>    <span class="token comment">// // 会绑定application.yml中所有spring.datasource开头的属性绑定到Datasource</span>    <span class="token comment">// // @ConfigurationProperties(prefix = "spring.datasource")</span>    <span class="token comment">// public DataSource dataSource() {</span>    <span class="token comment">//     DruidDataSource dataSource = new DruidDataSource();</span>    <span class="token comment">//     dataSource.setUrl();</span>    <span class="token comment">// }</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token comment">// 或者直接将DataSourceProperties自动注入进来 , 后续使用创建者模式进行构建</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 直通过配置动态构建一个DataSource</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在将配置文件中的数据源进行配置!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 配置服务器监控器     * &lt;p&gt;     * 配置监控台     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Servlet</span><span class="token punctuation">&gt;</span></span> servletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加IP白名单</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"allow"</span> <span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加IP黑名单,黑白名单重复,优先认可黑名单</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加控制台管理用户</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否能够重置数据</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"resetEnable"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 配置过滤器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">statFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加过滤规则</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 忽略过滤格式</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>强力版</strong></li></ul><p><strong>pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--druid 场景启动器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>application.yml</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 数据源</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123123</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springboot_mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone</span> = GMT    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment"># 数据源其他配置</span>    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>sql/springboot.sql    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 启动druid控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h4><ol><li>添加pom依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--mybatis依赖 mybatis自己提供的--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>添加Mybatis-generator插件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--Mybatis-generator插件,用于自动生成Mapper和POJO--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置文件的位置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">&gt;</span></span>src/main/resources/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--必须要引入数据库驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--必须指定版本--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置mybatis配置文件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--该文将请放置在项目同级目录下!!    需要配置的地方:    1.配置数据源    2.pojo mapper 那些表--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--如果需要使用command的方式生成需要配置数据库驱动的jar包,需要配置classPathEntry--&gt;</span>    <span class="token comment">&lt;!--&lt;classPathEntry location=""/&gt;--&gt;</span>    <span class="token comment">&lt;!--context上下文 配置生成规则        id:随意        targetRuntime:生成策略            MyBatis3DynamicSql:默认的 , 会生成 动态生成sql的方式(没有xml)            MyBatis3:生成通用的查询,可以指定动态where条件            MyBatis3Simple:最简单的只生成简单的CRUD(一般场景下推荐使用)    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simple<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--设置是否生成注释 true不生成 注意:如果不生成注释,代码将不会进行合并--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置数据源--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/springboot_mybatis?serverTimezone = UTC<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123123<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--pojo            javaModelGenerator:java实体生成规则(POJO)            targetPackage:生成到那个包下            targetProject:生成到当前文件的那个相对路径下        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.springboot_mybatis.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--mapper xml映射文件            sqlMapGenerator:Mapper.xml映射文件生成规则            targetPackage:生成到那个包下            targetProject:生成到当前文件的那个相对路径下        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.springboot_mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--mapper接口            type:指定生成方式                ANNOTATEDMAPPER:注解方式                XMLMAPPER:接口绑定方式 要配置&lt;sqlMapGenerator        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.springboot_mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--配置那些表需要进行代码生成                tableName:表名                domainObjectName:pojo类名                mapperName:对应mapper接口的类名 和 mapper.xml文件名        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span> <span class="token attr-name">mapperName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span> <span class="token attr-name">mapperName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>利用maven插件生成mybatis的文件</li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111242040334.png" alt="image-20211124204011035"></p><ol start="5"><li>全局配置文件加上mybatis配置</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span><span class="token comment"># 映射文件所在地</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>com/jt/springboot_mybatis/mapper/<span class="token important">*.xml</span><span class="token comment">#  如果依然想使用mybatis全局配置文件,需要使用下面这个 并且拥有mybatis-config.xml,启动器会自动配置</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis<span class="token punctuation">-</span>config.xml  <span class="token comment"># 更过配置请自己去找资料学习</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要设置mybatis的<strong>stttings</strong></p><ul><li><p>可以通过设置全局文件方式</p></li><li><p>也可以通过application.yml中配置configuration</p><ul><li>configuration封装了mybatis所有信息</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>   <span class="token key atrule">xxxx</span><span class="token punctuation">:</span> yyyy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="springboot启动原理"><a href="#springboot启动原理" class="headerlink" title="[?]springboot启动原理"></a>[?]springboot启动原理</h3><h3 id="springboot自定义starters"><a href="#springboot自定义starters" class="headerlink" title="springboot自定义starters"></a>springboot自定义starters</h3><h3 id="集成中间件"><a href="#集成中间件" class="headerlink" title="集成中间件"></a>集成中间件</h3><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!完结撒花!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"></a>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!完结撒花!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="/2022/01/04/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/04/Spring-MVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring-MVC"></a>Spring-MVC</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111041408590.png" alt="image-20211104140805456"></p><p>1、DispatcherServlet表示前端控制器，是整个SpringMVC的控制中心。用户发出请求， </p><p>DispatcherServlet接收请求并拦截请求。 </p><p>2、HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请 </p><p>求url查找Handler。 </p><p>3、返回处理器执行链，根据url查找控制器，并且将解析后的信息传递给DispatcherServlet </p><p>4、HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。 </p><p>5、执行handler找到具体的处理器 </p><p>6、Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。 </p><p>7、HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。 </p><p>8、DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。 </p><p>9、视图解析器将解析的逻辑视图名传给DispatcherServlet。 </p><p>10、DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图，进行试图渲染 </p><p>11、将响应数据返回给客户端 </p><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>项目目录</p><blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111031632324.png" alt="image-20211103163248272"></p></blockquote><p>配置web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置前端控制器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--前端控制器初始化参数--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置编码过滤器 一定要放在最前面,代表最先经过的过滤器 CharacterEncodingFilter--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--编码格式--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--开启request 和 response请求都设为编码UTF8--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--安装过滤器 _配置拦截那些请求进行过滤--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--拦截规则  只过滤springmvc的请求--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--处理HTML中不支持rest中的PUT和DELETE的问题,配置过滤器,推荐查看源码--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>hiddenHttpMethod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--安装过滤器,实际上配置映射到的servlet--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>hiddenHttpMethod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤器可以配置dispatcher元素</p><p>有四种可能的属性：<br>1、REQUEST<br>只要发起的操作是一次HTTP请求，比如请求某个URL、发起了一个GET请求、表单提交方式为POST的POST请求、表单提交方式为GET的GET请求。一次重定向则前后相当于发起了两次请求，这些情况下有几次请求就会走几次指定过滤器。<br>2、FOWARD<br>只有当当前页面是通过请求转发转发过来的情形时，才会走指定的过滤器<br>3、INCLUDE<br>只要是通过&lt;jsp:include page=”xxx.jsp” /&gt;，嵌入进来的页面，每嵌入的一个页面，都会走一次指定的过滤器。<br>4、ERROR<br>假如web.xml里面配置了<error-page></error-page>：</p><p>配置基于注解的spring</p><p>spring-mvc.xml和pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--必配!!用于配置访问静态资源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--推荐 将映射的地址直接指向静态资源文件夹,spring不会将此映射作为handler--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--不推荐        下面这个也可以用来访问静态资源文件        原理是,springmvc没有映射到handler时,        就会调用默认servlet来处理        而默认的可以处理静态资源文件    --&gt;</span>    <span class="token comment">&lt;!--&lt;mvc:default-servlet-handler/&gt;--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置tomcat</p><blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111031631322.png" alt="image-20211103163146205"><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111031632398.png" alt="image-20211103163200318"></p></blockquote><p><strong>如果需要使用servlet的原生api 需要将依赖加入进来(没什么大用处)知道即可</strong></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111031731542.png" alt="image-20211103173106440"></p><p>entity下的Role User UserDTO</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111032211765.png" alt="image-20211103221123688"></p><p>controller  和 params.jsp</p><h4 id="RequestMapping-和-RequestHeader-和-CookieValue"><a href="#RequestMapping-和-RequestHeader-和-CookieValue" class="headerlink" title="@RequestMapping 和@RequestHeader 和 @CookieValue"></a>@RequestMapping 和@RequestHeader 和 @CookieValue</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>controllers</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UserDTO</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CookieValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestHeader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * @author HDU_WS * @Classname ParamsController * @Description 处理请求参数 * @Date 2021/11/2 21:21 * @Created by TheKing_Shun */</span><span class="token comment">/*   在servlet api中   request。getParamerer("name")   在springmvc中只需要在处理方法中声明对应的参数就   可以自动接受请求的参数并且还可以自动转换类型   匹配规则：   请求的参数必须跟处理方法的参数名一致   如果处理方法的参数未传入的情况下会自动传入null   如果请求的参数和处理方法的参数名不一致:   可以利用@requestParam("xxx")管理请求参数   value 用来重命名参数,如果用了这个注解之后必须要传入值否则报错还必须是重名   required 用来指定参数是否必须传入值    true 默认 必须传入    false 可以不需要传入   不要用基本数据类型作为参数,因为无法接收null   处理请求参数乱码问题:   GET  :直接设置tomcat目录下conf下的server.xml Connector加入URIEncoding="UTF-8"   POST :在servlet的时期 获取参数前设置request.setCharacterEncoding("UTF-8")使用过滤器来处理        :使用springmvc提供的编码过滤器来解决POST乱码问题CharacterEncodingFilter(web.xml)   复杂数据参数类型   对象:    不用加上参数名字,直接传入该对象对应的属性名字    如果是包装类型的简单变量,直接输入属性名字= 表单元素的name="id"    数组 保证这一组的表单元素都是同样的name          name="alias"    list 必须加上[索引]                          name=list[0] \ name=list[0].name    map  ....[key]                             name=map[key]    其他的实体类:给某个属性赋值                     name=Object.xxx    注意:    如果出现多个对象参数的情况,建议再次封装一层javaBean(DTO data transfer object) */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamsController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/params01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">params01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 复杂数据类型参数自动绑定演示     *     * @param user     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/params02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">params02</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 如果参数是两个对象,且两个对象中包含哟相同的字段,那么前端提交表单后     * 会给两个对象相同的字段(成员变量)都赋上值!!!解决办法解释将两个对象在封装一层     * 然后用外围封装的对象作为参数,这样表单就能够通过user.id和role.id来     * 进行区分是哪个对象中字段的数据     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/params03"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">params03</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//dto里面包含两个对象User \ Role 用来接收传递的两个对象不同的数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取请求头中的Host数据     * 里面也有required 和 defaultValue     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/header"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取请求头中的所数据     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/headerAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">headerAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取cookies     * 没有springmvc前的servlet做法:     * Cookie[] cookies = request.getCookies;     * for(Cookie cookie : cookies){     * if(cookie.getValue.equals("JSESSIONID")){xxxxx}     * }     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/cookie"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">cookie</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> jsessionid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsessionid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 支持原生servlet api的支持     * 支持原生api 和 参数绑定同时使用     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span>                      <span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span>                      <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                      <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet api"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意@Controller方法返回值有三个,其中string是视图路径名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/params01"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">params01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回视图路径!!!!!!</span>      <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>简单参数演示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/params01<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>复杂类型参数演示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/params02<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    id:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    外号:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alias<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狗剩<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>狗剩        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alias<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>柱子<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>柱子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    爱好:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>唱歌<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>唱歌    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳舞<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>跳舞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    亲属:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relatives[<span class="token punctuation">'</span>fat<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>爸爸<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>爸爸    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relatives[<span class="token punctuation">'</span>mum<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>妈妈<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>妈妈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    角色:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role.name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    朋友:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>friends[0].name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>friends[1].name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestMapping用来匹配客户端发送的请求，可以在方法上使用， 也可以在类上使用。 </p><ul><li>==方法==：表示用来匹配要处理的请求 </li><li>==类上==：表示为当前类的所有方法的请求地址添加一个前置路径，访问的时候必须要添加此路径 </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>controllers</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @RequestMapping 用来处理URL映射,将请求映射到处理方法中 *      除了可以用在方法上 还可以用在类上面 *      避免请求方法中映射的重复 * * 如果加在类上面,该类所有请求方法的映射都必须加上类的映射@RequestMapping("/mapping") * xxx/mapping/xxx * * value 设置请求的URL映射 * * method 设置请求方式 GET/POST *      HTTP状态 405 Request method 'GET' not supported *      可以设置多个值同时处理多了请求方式,不写则会匹配所有请求方式 *  spring4.3提供了简写请求方式的注解 *     @PostMapping("/mapping02") *     @PutMapping *     @GetMapping *     @DeleteMapping * * params:设置请求必须携带某些参数 *      1.必须要有某些参数      params = {"username"} *      2.必须没有某些参数      params = {"!username"} *      3.参数必须要等于某些值   params = {"username=123"} *      4.参数必须不等于某些值   params = {"username!=123"} * * headers:请求头必须包含某些值 * * consumes:当前请求的内容类型必须是指定值 *      常见的内容类型: *      application/x-www-form-urlencoded   form表单提交默认的内容 *      multipart/form-data                 form表达提交文件流的内容类型 *      application/json                    ajax提交的json内容类型 *      HTTP状态 415 - 不支持的媒体类型 * * produces : 设置当前相应的内容类型 * * 映射的URL还可以支持通配符 /ANT style *      1.?     匹配单个字符 *      2.*     匹配任意个字符 *      3.**    匹配任意级 *  如果映射出现包含关系,会优先交给更精确的映射处理 *  没有通配符 &gt; ? &gt; * &gt; ** */</span> <span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/mapping"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/mapping01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"映射成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// @RequestMapping(value = "/mapping02",method = {RequestMethod.POST})</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/method"</span><span class="token punctuation">)</span>  <span class="token comment">// 等同于method路径 需要匹配post请求方式</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求方式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/params"</span><span class="token punctuation">,</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username=123"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/headers"</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Accept-Language=zh-CN,zh;q=0.9,en;q=0.8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumes"</span><span class="token punctuation">,</span>consumes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/produces"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"响应内容类型!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//http://localhost:8080/springmvc/mapping/ant1</span>    <span class="token comment">// 更细粒度 ,如果出现ant? 与 ant* 同时出现ant1则会优先被ant?匹配</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ant?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通配符 - ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//http://localhost:8080/springmvc/mapping/ant123</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ant*"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping08</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通配符 - *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//http://localhost:8080/springmvc/mapping/1/ant</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/**/ant"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapping09</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通配符 - **"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pathVariable"><a href="#pathVariable" class="headerlink" title="@pathVariable"></a>@pathVariable</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @PathVariable("id") 用在参数上 * 专门获取URL目录级别的参数 * 比如 http://localhost:8080/springmvc/path/user/123/youwei * 要获得123 id为占位符   @RequestMapping("/user/{id}") : @PathVariable("id") Integer id 获取 * * 如果是单个参数接受的话 必须要使用@PathVariable来声明对应的参数占位符名字 * 如果是javaBean可以省略@PathVariable,但要保证占位符名字和JavaBean的属性名字一样 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/path"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> pathVariableController <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取用户实体 传入id     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}/{username}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">path01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user02/{id}/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">path02</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h4><p>Representational State Transfer (表述性状态传递)</p><p>==客户端映射到服务器资源的一种架构设计== </p><p>URL -&gt; restful </p><p>==一种优雅的URL风格:== </p><p>万维网 http协议 <a href="http://www.tulingxueyuan.cn/">http://www.tulingxueyuan.cn</a> </p><p>==看URL就知道要什么==，， 看http method就知道干什么 </p><ul><li>查询用户: <a href="http://localhost:8080/xxx/user/1">http://localhost:8080/xxx/user/1</a>            GET ­­查询 </li><li>查询多个用户: <a href="http://localhost:8080/xxx/users">http://localhost:8080/xxx/users</a>      GET </li><li>新增用户: <a href="http://localhost:8080/xxx/user">http://localhost:8080/xxx/user</a>                POST ­­­新增 </li><li>修改用户: <a href="http://localhost:8080/xxx/user/1">http://localhost:8080/xxx/user/1</a>             PUT ­­修改 </li><li>删除用户:<a href="http://localhost:8080/xxx/user/1">http://localhost:8080/xxx/user/1</a>              DELETE ­­删除</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111041007009.png" alt="image-20211104100735919"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>controllers</span><span class="token punctuation">;</span><span class="token comment">/** * 用户rest风格的CRUD * * form表单提交PUT和DELETE出现问题:会将PUT和DELETE作为GET提交,因为HTML现在无法支持PUT和 * DELETE:解决: *      1.需要添加HiddenHttpMethodFilter过滤器 *      2.在表单中添加一个隐藏域&lt;input type="hidden" value="put" name="_method"&gt; *          value就是对应的请求方式, *      3.将form的method设置为POST *      4.过滤器自动将POST请求设置为隐藏域中value的值的请求类型 * * * tomcat 7以上版本对request.method更加严格,只支持GET/POST/HEAD *  HTTP Status 405  解决: *      1.tomcat7 *      2.不用转发,用重定向 *      3.自定义过滤器 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询用户:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 添加</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增用户:"</span><span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 修改</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token comment">//如果是javaBean可以省略@PathVariable,但要保证占位符名字和JavaBean的属性名字一样</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改用户:"</span><span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 删除</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户:"</span><span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--  Created by IntelliJ IDEA.  User: 00  Date: 2021/11/4  Time: 9:56  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;   &lt;!--用于设置正确的访问路径前缀,后续可以简写--&gt;&lt;% request.setAttribute("basepath",request.getContextPath()); %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--basepath已被上面声明 action代表请求的完整url--&gt;&lt;form action="${basepath}/rest/user/1" method="get"&gt;    &lt;input type="submit" value="查询"/&gt;&lt;/form&gt;&lt;form action="${basepath}/rest/user" method="post"&gt;    id:&lt;input name="id" type="text"&gt;&lt;/input&gt;&lt;p&gt;&lt;/p&gt;    姓名:&lt;input name="name" type="text"&gt;&lt;p&gt;&lt;/p&gt;    &lt;input type="submit" value="新增"/&gt;&lt;/form&gt;&lt;form action="${basepath}/rest/user/1" method="post"&gt;    &lt;input type="hidden" value="put" name="_method"&gt;    id:&lt;input name="id" type="text"&gt;&lt;p&gt;&lt;/p&gt;    姓名:&lt;input name="name" type="text"&gt;&lt;p&gt;&lt;/p&gt;    &lt;input type="submit" value="修改"/&gt;&lt;/form&gt;&lt;form action="${basepath}/rest/user/1" method="post"&gt;    &lt;input type="hidden" value="delete" name="_method"&gt;    &lt;input type="submit" value="删除"/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><p>如果servlet中配置的映射url是/  ==则代表除了.jsp以外的所有请求都会被调度器拦截==,这时可能静态资源文件不会被访问,因为dispatcherDervlet会拦截静态文件访问的url,但是找不到对应的handler mapping映射,因此会报错</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        配置DispatcherServlet映射        通常会为springmvc映射的路径为:        /               除了.jsp的请求都会被匹配        /*              所有的请求都会匹配        *.do            url结尾以.do的请求会匹配        *.action        url结尾以.action的请求会匹配        /request/*      进行约定,将jsp放在/views/ ;所有的servlet请求都用/request/    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案:</p><p>在spring-mvc.xml中进行配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐保证静态资源和动态请求都能够访问‐‐</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--推荐 将映射的地址直接指向静态资源文件夹,spring不会将此映射作为handler--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--不推荐        下面这个也可以用来访问静态资源文件        原理是,springmvc没有映射到handler时,        就会调用默认servlet来处理        而默认的可以处理静态资源文件    --&gt;</span><span class="token comment">&lt;!--&lt;mvc:default-servlet-handler/&gt;--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p><strong>使用默认内置视图解析器(ViewResolver)</strong> </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--默认视图解析器 配上前缀和后缀,简化逻辑视图名称--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/views<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/response01"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">response1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果没有在xml中配置InternalResourceViewResolver的bean就需要只要来访问视图</span>    <span class="token comment">// return "/WEB-INF/views/index.jsp";</span>    <span class="token comment">//配置后只需</span>    <span class="token keyword">return</span> <span class="token string">"/index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用视图控制器<view-controller></view-controller></strong></p><p>如果我们有些请求只是想跳转页面，不需要来后台处理什么逻辑，我们无法在Action中写 一个空方法来跳转，直接在中配置一个如下的视图跳转控制器即可(不经过Action，直接跳 转页面) </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--视图名称还是会使用试图解析器来解析        (立即访问)        path需要映射的路径,view-name对应的试图名称    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/main<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--默认视图解析器 配上前缀和后缀,简化逻辑视图名称--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用Model，Map，ModelMap传输数据到页面</strong></p><p>可以在方法的参数上传入Model，ModelMap,Map类型，此时都能够 将数据传送回页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DTVController</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 使用servlet API 原生方式传输数据到视图     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/servletAPI"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">servletAPI</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"servletAPI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  使用model的方式来传输数据到视图     *  底层还是使用的是BindingAwareModelMap     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/model"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 表面是model 底层是封装了request的API</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  使用modelmap的方式来传输数据到视图     *  底层还是使用的是BindingAwareModelMap     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/modelmap"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 表面是model 底层是封装了request的API</span>        modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"modelMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  使用map的方式来传输数据到视图     *  底层还是使用的是BindingAwareModelMap     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/map"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 表面是model 底层是封装了request的API</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"modelMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 通过modelandview来传输数据到视图     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ModelAndView"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">modelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置视图对应的modelandview ,也可以使用setView来设置视图路径</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 传输具体的值到视图中!</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"modelandview"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是下面的jsp文件中需要用${requestScope.type}接受返回的数据,</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  冲啊!!!!    ${requestScope.type}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用ModelAndView对象传输数据到页面</strong> </p><p>发现当使用modelAndView对象的时候，返回值的类型也是此对象， 可以将要跳转的页面设置成view的名称，来完成跳转的功能，同时数据也是放到 request作用中。</p><p><strong>使用session传输数据到页面</strong></p><p>怎么往session设置属性？ </p><p><strong>1.通过servlet api的方式去读写session</strong> </p><ol><li><p>通过参数绑定的方式去获取<strong>servlet api</strong> </p></li><li><p>通过自动注入的方式去获取<strong>servlet api(推荐使用这种方式）</strong> </p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过参数绑定的方式来获取servlet api--serssion * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/servletapi/session"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">session</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"servletapi-session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 通过自动注入的方式去获取servlet api */</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/autowired/session"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">session02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"autowired-session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.通过springmvc提供的注解方式去读写session</strong> </p><ol><li><p>@SessionAttributes </p><p>用在类上面的，==写入session的==。</p><blockquote><p> 从model中获取指定的属性写入session中 </p><p> 底层会从model中去找一个叫做type的属性 </p><p>  找到了会将type设置一份到session中 </p><p>  这种方式是依赖model的 </p><p> ==当前控制器下所有的处理方法 都会将model指定的属性写入session== </p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DTVController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>@SessionAttribute </p><p>用在参数上面的，==读取session的==</p></li></ol><p>默认指定的属性是必须要存在的，如果不存在则会报错，可以设 置==required =false 不需要必须存在==，不存在默认绑定null </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     *  @SessionAttribute 获取session     *  required 用来设置session中某个属性必须存在,不存在会报错     *  model 和 session 是互通的 : session可以通过model中去获取写入指定的属性     *                          model也会从session中自动写入指定的属性     */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/annotation/session"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">session03</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SessionAttribute</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用@ModelAttribute来获取请求中的数据</strong> </p><p>常用的使用场景 </p><ol><li><p>==写在方法上面== </p><p>@ModelAttribute的方法会在当前处理器中==所有的处理方法之前调用== </p><ul><li>通过@ModelAttribute来给全局变量赋值(不推荐） </li><li>当我们调用执行全字段的更新数据库操作时，假如提供给用户的修改字段只有 部分几个，这个时候就会造成其他字段更新丢失： </li></ul></li></ol><p>解决： </p><p>1.自己定制update语句， 只更新指定的那些字段 </p><p>2.如果无法定制sql语句， 可以在更新之前进行查询， 怎么在更新之前查询？只 能在springmvc 绑定请求参数之前查询， 利用@ModelAttribute就可以在参数绑定之前查询， 但是怎么将查询出来的对象和参数的对象进行合并？ springmvc具有该特性， 会 将model中和参数名相同的属性拿出来进行合并，将参数中的新自动进行覆盖，没有的字段 进行保留。这样就可以解决这个问题。 </p><ol start="2"><li>==写在参数上面== </li></ol><p>可以省略，加上则会从model中获取一个指定的属性和参数进行合并，因为model和 sessionAttribute具有共通的特性，所以如果session中有对应的属性也会进行合并 </p><p><strong>3种方式的获取servlet­­api的线程安全问题：</strong> </p><h1 id="不想写了-自己去看PDF文件"><a href="#不想写了-自己去看PDF文件" class="headerlink" title="不想写了!自己去看PDF文件!!"></a>不想写了!自己去看PDF文件!!</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="/2022/01/04/SSM-%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
      <url>/2022/01/04/SSM-%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM-框架整合"><a href="#SSM-框架整合" class="headerlink" title="SSM-框架整合"></a>SSM-框架整合</h1><h3 id="整体目录结构"><a href="#整体目录结构" class="headerlink" title="整体目录结构:"></a>整体目录结构:</h3><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111171001380.png" alt="image-20211117100140251"></p><h3 id="整合ssm框架做哪些事情"><a href="#整合ssm框架做哪些事情" class="headerlink" title="整合ssm框架做哪些事情?"></a><strong>整合ssm框架做哪些事情?</strong></h3><h4 id="springMVC"><a href="#springMVC" class="headerlink" title="springMVC"></a>springMVC</h4><ol><li>web.xml<ol><li>前端调度器servlet</li><li>编码过滤器filter</li><li>支持rest的过滤器</li></ol></li><li>springmvc.xml<ol><li>扫描controller包</li><li>添加<annotation-driver></annotation-driver></li><li>视图解析器</li><li>静态资源解析</li></ol></li><li>添加控制器类。。。</li></ol><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><ol><li>web.xml<ol><li>监听器(在启动web容器时加载<loadonstartup>)</loadonstartup></li></ol></li><li>spring.xml配置文件<ol><li>扫描所有除了controller包的其他包</li><li>声明式事务</li></ol></li></ol><h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><ol><li>需要和spring整合<ol><li>将sqlSessionFactor配置为spring的bean<ol><li>数据源 配置为spring的bean</li><li>配置全局配置文件</li><li>所有的mapper映射文件</li></ol></li><li>将mapper接口的包交给spring</li></ol></li><li>加入全局配置文件</li></ol><h4 id="tomcat如果出现控制台输出乱码问题可以尝试"><a href="#tomcat如果出现控制台输出乱码问题可以尝试" class="headerlink" title="tomcat如果出现控制台输出乱码问题可以尝试:"></a>tomcat如果出现控制台输出乱码问题可以尝试:</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111162153480.png" alt="image-20211116215318216"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111162155184.png" alt="image-20211116215535105"></p><h4 id="springMVC配置的代码"><a href="#springMVC配置的代码" class="headerlink" title="springMVC配置的代码"></a>springMVC配置的代码</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SPRING.VERSION</span><span class="token punctuation">&gt;</span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SPRING.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ASPECTJWEAVER.VERSION</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ASPECTJWEAVER.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SPRING-ASPECTS.VERSION</span><span class="token punctuation">&gt;</span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SPRING-ASPECTS.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SPRING-ORM.VERSION</span><span class="token punctuation">&gt;</span></span>5.3.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SPRING-ORM.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SPRING-WEBMVC.VERSION</span><span class="token punctuation">&gt;</span></span>5.3.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SPRING-WEBMVC.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MYBATIS-SPRING.VERSION</span><span class="token punctuation">&gt;</span></span>2.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MYBATIS-SPRING.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MYBATIS.VERSION</span><span class="token punctuation">&gt;</span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MYBATIS.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DRUID.VERSION</span><span class="token punctuation">&gt;</span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DRUID.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MYSQL-CONNECTOR-JAVA.VERSION</span><span class="token punctuation">&gt;</span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MYSQL-CONNECTOR-JAVA.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>JUNIT.VERSION</span><span class="token punctuation">&gt;</span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>JUNIT.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SLF4J-API.VERSION</span><span class="token punctuation">&gt;</span></span>1.7.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SLF4J-API.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LOGBACK-CLASSIC.VERSION</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LOGBACK-CLASSIC.VERSION</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MYBATIS-GENERATOR-CORE.VERSION</span><span class="token punctuation">&gt;</span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MYBATIS-GENERATOR-CORE.VERSION</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--springmvc依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${SPRING-WEBMVC.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring-AOP--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${SPRING.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring-AOP--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${SPRING-ASPECTS.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring-AOP依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${ASPECTJWEAVER.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring-orm：将对象持久化到数据库中  JDBC事务需要的依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${SPRING-ORM.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--spring-mybatis适配器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${MYBATIS-SPRING.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${MYBATIS.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--druid连接池--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${DRUID.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql 对应版本的连接器驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${MYSQL-CONNECTOR-JAVA.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--测试框架--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${JUNIT.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--log门面--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${SLF4J-API.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--log实现类--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${LOGBACK-CLASSIC.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis-代码生成器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${MYBATIS-GENERATOR-CORE.VERSION}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><p><span id="web"></span></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    web4.0方能使用,tomcat9    如果使用该文件:        1.请直接配置spring-mvc.xml的路径即可,对应在&lt;servlet&gt;中        2.在context-param内配置spring-core.xml路径--&gt;</span><span class="token comment">&lt;!--1. 前端调度器servlet2. 编码过滤器filter3. 支持rest的过滤器--&gt;</span>    <span class="token comment">&lt;!--配置web启动 加载 spring的ioc容器 和 springmvc的容器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--全局参数的方式配置spring配置文件,去通知listener监听器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring-core.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--前端调度器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置配置文件的路径--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置启动即加载--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--编码过滤器filter--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置编码格式--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置request和response的编码,这里是全部都设置为上述编码格式--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--支持rest的过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>hiddenHttpMethod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>hiddenHttpMethod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h5><p>(MVC自己管理的容器)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    使用该文件需要注意:        1.扫描包需要自行配置        2.试图解析器中的文件防止位置自行配置(默认为良好配置,需要遵守约定)--&gt;</span><span class="token comment">&lt;!--1. 扫描controller包2. 添加&lt;annotation-driver&gt;3. 视图解析器4. 静态资源解析--&gt;</span>    <span class="token comment">&lt;!--扫描controller包,只允许控制器的类--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--添加annotation-driven--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--视图解析器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB_INF/views<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--静态资源解析器 2 种方式--&gt;</span>    <span class="token comment">&lt;!--&lt;mvc:resources mapping="" location=""/&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="控制器类EmpController"><a href="#控制器类EmpController" class="headerlink" title="控制器类EmpController"></a>控制器类EmpController</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">IEmpService</span> empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> emps <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="spring配置的代码"><a href="#spring配置的代码" class="headerlink" title="spring配置的代码"></a>spring配置的代码</h4><h5 id="web-xml-1"><a href="#web-xml-1" class="headerlink" title="web.xml"></a><a href="#web">web.xml</a></h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--添加的部分--&gt;</span><span class="token comment">&lt;!--配置web启动 加载 spring的ioc容器 和 springmvc的容器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--全局参数的方式配置spring配置文件,去通知listener监听器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring-core.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="spring-core-xml"><a href="#spring-core-xml" class="headerlink" title="spring-core.xml"></a>spring-core.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mybatis</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://mybatis.org/schema/mybatis-spring<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--1. 扫描所有除了controller包的其他包2. 声明式事务(事务是与数据库打交道的所以一定要有数据源才能配置)--&gt;</span>    <span class="token comment">&lt;!--扫描所有除了controller包的其他包        spring的容器和spring-mvc的容器是父子容器,需要分开管理!    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入外部属性资源文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置druid数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--声明式事务:事务管理器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--基于注解方式的事务,开启事务的注解驱动,传入事务管理器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--用于声明事务切入的所有方法--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionCut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.jt.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--用来明确切点匹配到的方法那些方法需要使用事务--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>advice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--可以使用通配符 必须以下面声明的名字来开头 否则不会用上事务!--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置sqlSessionFactory--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--指定spring中的数据源--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/jt/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--将mapper接口交给spring管理--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mybatis:</span>scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mybatis整合进spring"><a href="#Mybatis整合进spring" class="headerlink" title="Mybatis整合进spring"></a>Mybatis整合进spring</h4><h5 id="将sqlSessionFactor配置为spring的bean"><a href="#将sqlSessionFactor配置为spring的bean" class="headerlink" title="将sqlSessionFactor配置为spring的bean"></a>将sqlSessionFactor配置为spring的bean</h5><p><a href="#spring-core.xml">spring-core.xml</a></p><p>添加的地方:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置sqlSessionFactory--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--指定spring中的数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/jt/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--将mapper接口交给spring管理--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mybatis:</span>scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="加入全局配置文件"><a href="#加入全局配置文件" class="headerlink" title="加入全局配置文件"></a>加入全局配置文件</h5><p>==由于是与交给spring进行管理,所有配置文件mybatis-config.xml文件省略了已经在spring-core.xml中声明过配置==</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--开启延迟加载,默认是立即加载--&gt;</span>        <span class="token comment">&lt;!--&lt;setting name="lazyLoadingEnabled" value="true"/&gt;--&gt;</span>        <span class="token comment">&lt;!--&amp;lt;!&amp;ndash;开启后,使用pojo中任意属性都会启用立即加载延迟查询(贪心),默认是false&amp;ndash;&amp;gt;--&gt;</span>        <span class="token comment">&lt;!--&lt;setting name="aggressiveLazyLoading" value="true"/&gt;--&gt;</span>        <span class="token comment">&lt;!--&amp;lt;!&amp;ndash;设置对象的那些方法调用会立即加载延迟查询 默认equals,clone,hashCode,toStrin&amp;ndash;&amp;gt;--&gt;</span>        <span class="token comment">&lt;!--&lt;setting name="lazyLoadTriggerMethods" value="hashCode"/&gt;--&gt;</span>        <span class="token comment">&lt;!--将数据库下划线列名转换为java小驼峰风格--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--开启二级缓存,默认为true,在声明一次为了可读性--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--类型别名可为java类型设置一个缩写名字 它仅用于xml配置,意在降低冗余的全限定类名书写--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--根据包设置包里面所有的类的别名:会将类的名字作为别名(忽略大小写)            还可以为包里面的类设置个性别名,@Alias("") (默认的以类的名字作为别名就会失效)            设置之后 resultType就可以使用简写        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/01/04/spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/04/spring5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-spring初识"><a href="#第一章-spring初识" class="headerlink" title="第一章 spring初识"></a>第一章 spring初识</h3><h4 id="1-framework（框架）"><a href="#1-framework（框架）" class="headerlink" title="1.framework（框架）"></a>1.framework（框架）</h4><blockquote><p>框架就是一些类和接口的集合，通过这些类和接口协调来完成一系列的程序实现。</p><p><strong>或者：开发的半成品</strong></p><p>作用：使用框架来快速的开发成品解决问题！==简化开发，提高效率==</p></blockquote><h4 id="2-架构发展历史"><a href="#2-架构发展历史" class="headerlink" title="2.架构发展历史"></a>2.架构发展历史</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110132137437.png" alt="image-20211013213730327"></p><ul><li><p>单一应用架构</p><blockquote><p>网站流量跟小，只需一个应用，此时用于简化增删改查工作量的数据访问框架（ORM）是关键</p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110132154352.png" alt="image-20211013215426251" style="zoom: 67%;"></blockquote></li><li><p>垂直应用架构</p><blockquote><p>将应用拆分为互不相干的几个应用，以提升效率（MVC）</p><img src="C:/Users/00/AppData/Roaming/Typora/typora-user-images/image-20211013215500856.png" alt="image-20211013215500856" style="zoom:67%;"><p><strong>SSH：Struts1/Struts2 + Spring + Hibernate</strong></p><p><strong>SSM:  SpringMVC + Mybatis + Spring</strong></p><p>ssm框架基本结构：<span id="ssm架构"></span></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110171015034.png" alt="image-20211017101503963"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110171015581.png"></p></blockquote></li><li><p>分布式服务架构</p><blockquote><p>将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心（RPC）</p></blockquote></li><li><p>面向服务架构</p><blockquote><p>面向服务，需要增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。（SOA）</p></blockquote></li></ul><h4 id="3-Spring介绍"><a href="#3-Spring介绍" class="headerlink" title="3.Spring介绍"></a>3.Spring介绍</h4><p>Spring Framework 是一个<strong>轻量级java开发框架</strong> ，<strong>是模块化的</strong>，<strong>是非侵入性的（轻量级，侵入性：重量级）</strong></p><p>解决开发中的业务层和其它层之间的<strong>耦合问题</strong>。<strong>最根本的使命是解决企业级应用开发的复杂性，简化java开发。</strong></p><ul><li>IOC：控制反转</li><li>AOP：面向切面编程</li><li>容器：包含并管理应用对象的生命周期</li></ul> <img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110132216335.png" alt="image-20211013221607198" style="zoom:150%;"><h4 id="3-Ioc：控制反转"><a href="#3-Ioc：控制反转" class="headerlink" title="3.Ioc：控制反转"></a>3.Ioc：控制反转</h4><p>是一种==设计思想==，在java开发中，将设计好的对象交给容器控制，而不是显示的用代码进行对象的创建。</p><p>对象由spring<strong>创建、管理、装配</strong></p><p>传统：<strong>任何变更都会加大系统BUG的可能性</strong></p><blockquote><p>ioc被初始化后 默认实例化所有的bean</p></blockquote><p>DI :依赖注入(是一种实现)</p><p><strong>面向对象五大原则</strong></p><blockquote><ul><li>单一职责：==只做一件事==，低耦合高内聚的延申</li><li>开放封闭：在设计一个类或者模块时，应该对==扩展开放==，对==修改关闭==</li><li>里氏替换：对==继承==进行了==规则上的约束==</li><li>依赖倒置：1.==具体实现依赖抽象==  2.==下层依赖上层==</li><li>接口分离：接口端不应该依赖它==不需要的接口==，一个类对另一个类的依赖应该==建立在最小的接口==上。</li></ul></blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110142208356.png" alt="image-20211014220846266"></p><h4 id="4-ioc代码实现方式"><a href="#4-ioc代码实现方式" class="headerlink" title="4.ioc代码实现方式"></a>4.ioc代码实现方式</h4><ul><li>导入jar包-配置xml（菜鸡）</li></ul><blockquote><ol><li>导入jar</li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110142225530.png" alt="image-20211014222550438"></p><ol start="2"><li>配置xml</li></ol></blockquote><p>spring Application ContextApplication Context 是 BeanFactory 的子接口，也被称为 Spring 上下文。它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.dap.impl.UserDaoMysqlImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDaoMysql<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.service.impl.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDaoMysql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 加载spring，加载ioc容器 ApplicationContext是Spring IoC容器实现的代表，</span>        <span class="token comment">//负责实例化，配置和组装Bean</span>        <span class="token comment">// 容器实例化后就已经加载了所有的Bean</span>        <span class="token comment">// 可以配置多个xml的Bean在参数中</span>        <span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//spring.xml文件放置在xxx/resources/spring.xml</span>        <span class="token comment">//获取Bean的方式：</span>        <span class="token comment">// 1.通过类来获取Bean，getBean（User.class）</span>        <span class="token comment">// 2.通过bean的名字或者id来获取Bean    getBean（“User”）</span>        <span class="token comment">// 3.通过名字+类型 getBean（“user”，User.class）</span>        <span class="token class-name">IUserService</span> service <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ApplicationContext是Spring的顶层核心接口，有很多的实现类，常用的：</p><ul><li>ClassPathXMLApplicationContext 根据==项目路径的xml==配置来实例化spring容器</li><li>FileSystemXMLApplicationContext 根据==磁盘路径的xml==配置来实例化spring容器</li><li>AnnotationConfigApplicationContext 根据==javaconfig==，纯注解的方式</li></ul></blockquote><p>xml头文件 解析：</p><blockquote><ul><li>问题的出现：</li></ul><p> XML的元素名字是不固定的，当两个不同的文档使用同样的名称描述两个不同类型的元素的时候，或者一个同样的标记表示两个不同含义的内容的时候，就会发生命名冲突。</p><ul><li>解决方法：命名空间，给他一个独一无二的标志</li><li>语法：</li></ul><p> xmlns:[prefix]=”[url of name]”</p><p>其中“xmlns:”是必须的属性（xmlnamespace）。“prefix”是命名空间的别名，它的值不能为xml。</p><p>例如：xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;">http://www.w3.org/2001/XMLSchema-instance"</a></p><ul><li><p>解析xml头文件：</p><ul><li><p><code>xmlns="http://www.springframework.org/schema/beans"</code></p><p>声明xml文件默认的命名空间，表示未使用其他命名空间的所有标签的默认命名空间。</p></li><li><p><code> xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</code></p><p>声明XMLSchema 实例名称空间，并将xsi前缀与该名称空间绑定，这样模式处理器就可以识别xsi:schemaLocation属性。XML Schema实例名称空间的前缀通常使用xsi。</p></li><li><p><code>xsi:schemaLocation="http://www.springframework.org/schema/beans </code></p><p>模式位置<a href="http://www.springframework.org/schema/beans/spring-beans-3.0.xsd%E7%9B%B8%E5%85%B3%E3%80%82">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd相关。</a></p></li><li><p><code>xmlns:context="http://www.springframework.org/schema/context"</code></p><p>添加注解后多出来的一个，是添加了context的命名空间</p></li></ul></li></ul></blockquote><ul><li>maven+注解+xml（正常）</li></ul><blockquote><ul><li>需要导入jar，配置maven依赖</li><li>pom.xml配置</li></ul></blockquote><ul><li>springboot+javaconfig（大神）</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>DI与IOC</strong></p><p>IOC与DI是从==不同的角度来描述的同一件事情==，IOC是从==容器==的角度来描述，DI是从应用程序的角度来描述。</p><p>区分理解：IOC是依赖倒置原则的==设计思想==，DI是具体的==实现方式==</p><p><strong>把IOC理解为粘合剂</strong></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110151045489.png" alt="image-20211015104526370"></p><h3 id="第二章-Maven下的spring"><a href="#第二章-Maven下的spring" class="headerlink" title="第二章 Maven下的spring"></a>第二章 Maven下的spring</h3><h4 id="1-Maven及其结构"><a href="#1-Maven及其结构" class="headerlink" title="1.Maven及其结构"></a>1.Maven及其结构</h4><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。</li></ul><p>scope：</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110192159424.png" alt="image-20211019215908340"></p><p><strong>compile</strong> ：为<strong>默认的</strong>依赖有效范围。如果在定义依赖关系的时候，没有明确指定依赖有效范围的话，则默认采用该依赖有效范围。</p><p>此种依赖，在编译、运行、测试时均有效。</p><p><strong>provided</strong> ：在编译、测试时有效，但是在运行时无效。</p><p>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。</p><p>事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。</p><p>例如：servlet-api，运行项目时，容器已经提供，就不需要Maven重复地引入一遍了。</p><p><strong>runtime</strong> ：在运行、测试时有效，但是在编译代码时无效。</p><p>说实话在终端的项目（非开源，企业内部系统）中，和compile区别不是很大。比较常见的如JSR×××的实现，对应的API jar是compile的，具体实现是runtime的，compile只需要知道接口就足够了。</p><p>例如：JDBC驱动实现，项目代码编译只需要JDK提供的JDBC接口，只有在测试或运行项目时才需要实现上述接口的具体JDBC驱动。</p><p>另外runntime的依赖通常和optional搭配使用，optional为true。我可以用A实现，也可以用B实现。</p><p><strong>test</strong> ：只在测试时有效，包括测试代码的编译，执行。例如：JUnit。</p><p>==PS: test表示只能在src下的test文件夹下面才可以使用，你如果在a项目中引入了这个依赖，在b项目引入了a项目作为依赖，在b项目中这个注解不会生效，因为scope为test时无法传递依赖。==</p><p><strong>system</strong> ：在编译、测试时有效，但是在<strong>运行时无效</strong>。</p><p>和provided的区别是，使用system范围的依赖时必须通过<strong>systemPath元素显式地指定依赖文件的路径</strong>。由于此类依赖<strong>不是通过Maven仓库解析的，而且往往与本机系统绑定</strong>，可能造成构建的不可移植，因此应该谨慎使用。</p><p>==一个使用Maven管理的普通的Java项目，它的目录结构默认如下：==</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">a-maven-project├── pom.xml├── src源码│   ├── main主程序│   │   ├── java存放java源文件│   │   └── resources存放框架或其他工具的配置文件│   └── test存放测试程序│       ├── java存放java测试的源文件│       └── resources存放测试的配置文件└── targetMaven工程的核心配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目描述文件：pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itranswarp.learnjava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>groupId</code>类似于Java的包名，通常是公司或组织名称，<code>artifactId</code>类似于Java的类名，通常是项目名称，再加上<code>version</code>，一个Maven工程就是由<code>groupId</code>，<code>artifactId</code>和<code>version</code>作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量（==坐标==）确定。例如，依赖<code>commons-logging</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>&lt;dependency&gt;</code>声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。</p><h4 id="2-Maven仓库分类"><a href="#2-Maven仓库分类" class="headerlink" title="2.Maven仓库分类"></a>2.Maven仓库分类</h4><ul><li><strong>本地仓库</strong>：==Maven 在根据坐标查找依赖的构件时，先是在本地仓库中查找==。默认情况下，不管是 Windows 操作系统还是 Linux 操作系统，每个用户在自己的用户目录下都有一个路径名为 .m2/repository/ 的目录，这个目录就是 Maven 的本地仓库目录。</li><li><strong>私有仓库</strong>：私服是一个==特殊的远程仓库，架设在局域网内==。</li><li><strong>中央仓库</strong>：由于最原始的本地仓库是空的，Maven 必须知道至少一个远程仓库才能执行 Maven 的命令。这个远程仓库是默认的，这里把它叫作中央仓库。也就是说，==中央仓库就是一个默认的远程仓库。==</li><li><strong>远程仓库</strong>：安装好 Maven 后，如果不执行任何 Maven 命令的话，本地仓库目录是不存在的。当用户输入第 1 条 Maven 命令后，Maven 才会创建本地仓库。然后根据配置和需要从远程仓库下载对应的构件到本地仓库，以备需要的时候使用。</li></ul><h4 id="3-Maven常用命令"><a href="#3-Maven常用命令" class="headerlink" title="3.Maven常用命令"></a>3.Maven常用命令</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110151408842.png" alt="image-20211015140849894"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>     //默认是compile，此处是作用域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-xml标签解释"><a href="#4-xml标签解释" class="headerlink" title="4.xml标签解释"></a>4.xml标签解释</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--使用name也可以设置别名，分隔符为 ， ： 空格--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2,user3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>用来描述一个Bean的用途<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--在一个xml文件中导入另外一个spring的xml文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-ioc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--用于给bean取别名的--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bieming<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-依赖注入"><a href="#5-依赖注入" class="headerlink" title="5.依赖注入"></a>5.依赖注入</h4><p>注入Bean当中的属性</p><ul><li>基于setter方法的依赖注入</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--基于setter方法的依赖注入--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--基于setter方法的依赖注入，对应的是set方法后面的名字--&gt;</span>    <span class="token comment">&lt;!--比如setId  -&gt; name = “id”    setXXX  -&gt; name=“XXX”--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>youwei<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WUWEI<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 例如这个方法是setId，name在.xml中的bean的属性name就可以是name="id"</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于构造函数的依赖注入</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--基于构造函数的依赖注入    1.基于name属性设置构造函数参数    2.可以只有value属性    3.如果省略name属性，一定要注意参数顺序    4.如果参数顺序错乱，        可以使用name（推荐），        也可以使用index:设置下标，从0开始        还可以使用type：在错乱的参数类型一致的情况下不能使用--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wuwei<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>youwei<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-依赖和配置的细节"><a href="#6-依赖和配置的细节" class="headerlink" title="6.依赖和配置的细节"></a>6.依赖和配置的细节</h4><ul><li>直接值（基本类型，string等）</li><li>对其他bean的引用（装配）</li><li>内部Bean</li><li>集合</li><li>null和空的字符串值</li><li>使用p命名空间简化基于setter属性注入xml配置</li><li>使用c命名空间简化基于构造函数的xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token comment">&lt;!--复杂数据的依赖注入--&gt;</span><span class="token comment">&lt;!--不指定id是不能按名字寻找的！--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token comment">&lt;!--设置null--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>null</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--设置空值--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token comment">&lt;!--引用外部bean（常用）--&gt;</span>       <span class="token comment">&lt;!--&lt;property name="wife" ref="wife"/&gt;--&gt;</span>       <span class="token comment">&lt;!--使用内部Bean（不希望别人复用时使用）来依赖注入其他bean--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>迪丽热巴内<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--配置list：           如果泛型是基本数据类型 使用&lt;value&gt;           如果泛型是bean       使用&lt;bean&gt;       --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>跳舞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--针对map的注入：           如果map的value是基本数据类型 使用&lt;entry value&gt;           如果map的value是bean        使用&lt;entry value-ref&gt;       --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>数据库<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--&lt;entry key="3" value-ref="wife"&gt;&lt;/entry&gt;--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--外部引用的bean--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>迪丽热巴<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="P命名空间的使用"><a href="#P命名空间的使用" class="headerlink" title="P命名空间的使用"></a>P命名空间的使用</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   xmlns:p="http://www.springframework.org/schema/p"<span class="token comment">&lt;!--使用p命名空间简化基于setter属性注入xml配置       p:IDEA自动添加p命名空间       设置基本数据类型，或者p:wife-ref 引用外部bean       如果有集合类型，就不支持，需要额外配置&lt;property&gt;       支持混用   --&gt;</span>   <span class="token comment">&lt;!--Spring 默认调用无参的构造函数 类中如果只定义了有参构造函数，那么默认的无参构造函数会失效       导致Spring中的xml文件报错，为了解决这个问题，直需要在类中在添加一个无参的构造函数。   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>迪丽热巴<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>wife-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="C命名空间的使用"><a href="#C命名空间的使用" class="headerlink" title="C命名空间的使用"></a>C命名空间的使用</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   xmlns:c="http://www.springframework.org/schema/c"<span class="token comment">&lt;!--c命名空间简化基于构造函数的xml       原先需要使用&lt;constructor-arg&gt; 标签，       现在只需要在bean中使用c:属性来指定参数值，       如果有集合类型，就不支持   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>林青霞<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-spring的xml配置高级使用"><a href="#7-spring的xml配置高级使用" class="headerlink" title="7.spring的xml配置高级使用"></a>7.spring的xml配置高级使用</h4><h5 id="depends-on"><a href="#depends-on" class="headerlink" title="depends-on"></a>depends-on</h5><blockquote><p>spring中xml的加载顺序是按序加载，即从上至下的顺序加载</p><p>如果需要先加载后面的bean，则需要：depends-on</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token comment">&lt;!--控制加载顺序，需要另一个bean在当前bean之前加载需要设置depends-on      可以使用“，”来提供多个depends-on没有depends-on情况下xml文件会被先加载User后加载Wife下面的xml文件在加载时会先加载Wife后加载User  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a><strong>懒加载</strong></h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--懒加载    就不会再spring容器加载的时候 加载该bean    而是在使用的时候加载bean--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a><strong>bean的作用域</strong></h5><ul><li>Singleton 单例 作用域 - 默认</li><li>Prototype 原型 作用域</li><li>request 、 session 、application 、websocket </li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--作用域    singleton 默认值 同一个id始终只会创建一次bean （存在线程安全的问题）    prototype 多例（原型） 每一次使用都会创建一个bean    ************************************************************    request 、 session 、application 、websocket 等都是在web中使用的作用域--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实例化Bean的几种方法"><a href="#实例化Bean的几种方法" class="headerlink" title="实例化Bean的几种方法"></a>实例化Bean的几种方法</h5><ul><li><p>使用构造器实例化 ==默认== 无法干预实例化进程</p><p>根据类中的信息，调用默认的无参构造函数，如果设置了<constractor-arg>标签则会调用有参构造函数</constractor-arg></p><p>此过程无法被干预！</p></li></ul><ul><li><p>使用静态工厂方法实例化</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--使用静态工厂来实例化Bean        不需要额外的指定一个factory-bean        只需要指定bean中的静态方法即可    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createPersonFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//com.jt.beans.Person 类中的静态工厂方法</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">createPersonFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Child</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    child<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> child<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用实例工厂方法实例化</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--实例工厂来实例化bean        需要指定一个factory-bean        需要指定factory-bean中的工厂方法    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.PersonFactory<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createPersonFactoryMethod<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 新建的类PersonFactory 作为factory-bean来使用 ，</span><span class="token comment">// createPersonFactoryMethod是该类中的实例工厂方法！</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">createPersonFactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Child</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        child<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> child<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--自动注入    不需要使用set函数来注入，也不需要使用构造函数来注入    autowire="byType" : 根据类型自动匹配 当出现多个或没有 则报错    autowire="byName" : 根据setXXX方法的XXX名字来匹配，此处为setWife-&gt;id=“wife”    autowire="constructor": 根据构造器来匹配            优先根据名字匹配，参数名字没有匹配到，会根据参数类型匹配（byType）            会根据构造函数的参数进行完整的匹配注入：如果构造函数的参数是：Person（Wife   wife3,User user）            ioc容器里面必须同时有Wife bean和User bean            名字没有匹配到会根据类型匹配 类型出现多个会注入失败会选择其他参数的构造器，都没有则报错--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>constructor<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--当根据类型匹配到多个时    1.使用primary=true设置某个bean为主要自动注入bean    2.设置不需要自动注入的bean ：autowire-candidate="false" 忽略自动注入--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">primary</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>迪丽热巴<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>迪丽热巴2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h5><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110162118072.png" alt="image-20211016211828933"></p><ul><li><p>初始化方法回调</p></li><li><p>销毁方法回调</p></li><li><p>在非Web应用中优雅地关闭Spring IoC容器</p></li></ul><blockquote><p>如果接口和配置同时存在的化，则==先调用接口的回调，后调用配置的回调==！</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     *   回调测试     *  1.使用接口的方式实现     *      1.初始化回调，实现InitializingBean，重写afterPropertiesSet     *      2.销毁回调    实现DisposableBean ，重写destroy     *  2.基于配置方式     */</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment">// 实例化 接口方式 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例化Person1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 销毁 接口方式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁Person1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*********************************************************************************/</span>    <span class="token comment">// 实例化 配置方式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initByConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例化Person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 销毁 配置方式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyByConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁Person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Spring创建第三方Bean对象"><a href="#Spring创建第三方Bean对象" class="headerlink" title="Spring创建第三方Bean对象"></a>Spring创建第三方Bean对象</h5><p>日常开发中经常需要外部单实例对象（类似于普通Bean的实现方式），例如数据库连接池：</p><ol><li>导入数据库连接池的pom文件</li><li>编写配置文件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置第三方Bean--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--如果需要用到属性文件中的值需要${xxxx}--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/demo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置第三方Bean 引入外部属性文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// db.properties 文件</span>mysql<span class="token punctuation">.</span>username<span class="token operator">=</span>rootmysql<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span>mysql<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>testmysql<span class="token punctuation">.</span>driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SpEL的使用"><a href="#SpEL的使用" class="headerlink" title="SpEL的使用"></a>SpEL的使用</h5><p>（用途不多）了解即可</p><blockquote><p>SpEL：Spring Expressing Language ,spring的表达式语言，支持运行时查询操作对象</p><p>使用#{…}作为语法规则，大括号中的字符都认为是SpEL；</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--运算表达式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{1+2}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--引用外部Bean--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{wife}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--调用bean的属性--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{wife.name}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--调用bean的方法--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{wife.getName()}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--调用静态属性--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{T(com.jt.beans.PersonFactory).getNowDate()}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.beans.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>迪丽热巴<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="补充：pom"><a href="#补充：pom" class="headerlink" title="补充：pom"></a>补充：pom</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--ioc 注解--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--切面--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--切面--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三章-Spring-IoC注解使用"><a href="#第三章-Spring-IoC注解使用" class="headerlink" title="第三章 Spring IoC注解使用"></a>第三章 Spring IoC注解使用</h3><h4 id="注解-Xml"><a href="#注解-Xml" class="headerlink" title="注解+Xml"></a>注解+Xml</h4><p>在引入context的命名空间时 需要注意：</p><ol><li><p>引入xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context"</a></p></li><li><p>在xsi:schemaLocation 加入</p><p><a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br><a href="http://www.springframework.org/schema/context/spring-context-4.2.xsd">http://www.springframework.org/schema/context/spring-context-4.2.xsd</a></p></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    该xmlns包含的命名空间：    p 命名空间    c 命名空间    context 命名空间aop 命名空间如果需要引入命名空间，最快的方法是在idea中打出需要的属性：打出cmponent-scan，会自动引入--context命名空间--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context-4.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token comment">&lt;!--  注解：      @Controller   标记在控制层的类注册为Bean的组件      @Service      标记在业务逻辑层的类注册为Bean的组件      @Repository   标记在数据访问层的类注册为Bean的组件      @Component    标记非三层的普通的类注册为Bean的组件（是其他注解的元注解）      不是需要每个层对应相应注解，使用对应层的注解的目的在于:          1.增强可读性          2.更利于Spring的管理（分类操作）      怎样使用注解来注册一个类为Bean步骤：          1.设置扫描包context:component-scan          2.在对应的类名上加上对应的注解使用上面的注解会自动将类名首字母小写作为Bean的名字  扫描：      base-package 设置需要扫描的包          排除扫描&lt;context:exclude-filter：设置需要排除扫描的选项          包含扫描&lt;context:include-filter：设置需要包含扫描的选项              type：                  常用                  1.annotation：默认 根据注解的完整限定名设置排除|包含                  2.assignable：    根据类的完整限定名设置排除|包含                  不常用：                  3.aspectj：       根据切面表达式设置排除|包含                  4.regex：         根据正则表达式设置排除|包含                  5.custom：        根据TypeFilter接口的自定义实现设置排除|包含                         use-default-filters 默认为true，会默认扫描@Controller                                              @Service                                              @Repository                                              @Component  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--排除扫描controller注解，expression中的值是完整注解名--&gt;</span>      <span class="token comment">&lt;!--&lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assignable<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.controller.UserController<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">AbstractApplicationContext</span> ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring_ioc.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "userController" 来自于类名首字母小写作为Bean的名字</span>    <span class="token comment">// xml配置spring时 "userController" 来自于xml中配置的id 或 alias（别名）</span>    <span class="token class-name">UserController</span> bean <span class="token operator">=</span>            ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span> <span class="token string">"userController"</span><span class="token punctuation">,</span><span class="token class-name">UserController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#ssm%E6%9E%B6%E6%9E%84">文件架构</a></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110171106989.png" alt="image-20211017110605905"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110171106253.png" alt="image-20211017110621201"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110171106237.png" alt="image-20211017110637177"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110171106614.png" alt="image-20211017110646564"></p><h4 id="自动注入-1"><a href="#自动注入-1" class="headerlink" title="自动注入"></a>自动注入</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">/*     * @AutoWired 可以作用于:构造器、方法、参数、属性     *   使用@Autowired（也可以使用@Resource）来实现自动注入     *   byType 、 byName？     *   1.默认优先根据类型去匹配！（如果是接口，这里会去找接口的实现类作为类型）     *   2.如果匹配到多个类型则会按照名字取匹配     *   3.如果名子没有匹配到 就报错     *      解决：1.修改属性的名字对应bean的名字：userServiceImpl     *           2.修改bean的名字来对应属性的名字：@Service("userService")     *           3.通过@Qualifier设置属性的名字     *           4.通过@Primary设置其中一个bean为主要的自动注入Bean     *           5.使用泛型作为自动注入限定符！(不常用！)     * */</span>     <span class="token comment">/**     * @Resource 和 @Autowired 的区别     * @Resource依赖jdk、 @Autowired依赖spring     * @Resource 优先根据名字匹配     * @Autowired 优先根据类型匹配     */</span>        <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 会自动装填实现类</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userServiceImpl"</span><span class="token punctuation">)</span>     <span class="token comment">// 这是个接口</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110172208323.png" alt="image-20211017220837226"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110172210620.png" alt="image-20211017221027544"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110172211344.png" alt="image-20211017221133262"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/202110172229222.png" alt="image-20211017222923136"></p><h3 id="第四章-Spring-javaConfig使用"><a href="#第四章-Spring-javaConfig使用" class="headerlink" title="第四章 Spring javaConfig使用"></a>第四章 Spring javaConfig使用</h3><p>JavaConfig原来是Spring项目的一个子项目，它通过Java类的方式提供Bean的定义信息，在Spring3的版本，JavaConfig已正式成为Spring4的核心功能。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>重点：**==@Bean 和 @Configuration==**</p><p><strong>将一个类注入到IoC中几种方法：</strong></p><ul><li>xml：<bean></bean></li><li>@Component（@Controller，@Service，@Repository）</li><li>@Bean</li><li>@import</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">MyImportSelector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Role</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @author HDU_WS * @Classname IoCJavaConfig * @Description TODO * @Date 2021/10/18 19:34 * @Created by TheKing_Shun */</span><span class="token comment">// 用于标记一个spring的配置类，之前是根据xml来启动spring上下文，</span><span class="token comment">// 现在根据类来启动，相当于xml文件 &lt;beans&gt;&lt;/beans&gt;</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 相当于xml文件中的component-scan 用于扫描</span><span class="token comment">// 并且basePackage可以默认不写！</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.jt"</span><span class="token punctuation">)</span><span class="token comment">//获取外部属性资源文件名</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:db.properties"</span><span class="token punctuation">)</span>  <span class="token comment">/**  1.引入其他配置类，可以多个{“xxx”,"yyy"}   2.将类注册为Bean  如果Role没有@Component注解注册为bean，可以Import*  3.导入ImportSelector实现类，可以注册多个类* */</span><span class="token comment">// @Import(SecondJavaConfig.class)</span><span class="token comment">// @Import(Role.class)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IoCJavaConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// 将外部属性获取到字段中</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mysql.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mysql.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mysql.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mysql.driverClassName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span>    <span class="token comment">/**     * 配置第三方Bean (返回值为xml 中 bean的 class（类型），方法名为 bean的名字)     * 自己的Bean也可以 只是替换掉原先的bean     *     * @Bean（name={"ss"，“dd”}） 设置bean的id，可以只设置一个     * 可以将一个类的实例（可以干预Bean实例化过程）注册为一个bean     * @Bean(initMethod="",destroyMethod="") 等价于：     * &lt;bean class="xx" id="xx" init-method="xxx" destroy-method="xxx"/&gt;     *     * 如何自动装配外部bean :在方法里面协商需要需要的参数     * 如何自动装配内部bean（在同一个配置类中的bean） :直接调用方法即可！     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自动装配外部bean</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自动装配内部bean</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">user3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondJavaConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五章-Spring-AOP介绍"><a href="#第五章-Spring-AOP介绍" class="headerlink" title="第五章 Spring AOP介绍"></a>第五章 Spring AOP介绍</h3><p><strong>面向切面编程</strong></p><p>基于oop基础之上的新的编程思想，oop面向的是类，Aop面向的切面，在处理日志、安全管理、</p><p>事务管理很重要。</p><blockquote><p>不修改原有代码的情况下，增强跟主要业务没有关系的 公共功能代码 到之前写好的方法中的指定位置</p></blockquote><p>AOP的底层是==代理==</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ul><li><p><strong>静态代理</strong></p><p>需要为<strong>每一个被代理</strong>的类创建一个“代理类”，成本太高！</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110212135449.png" alt="image-20211021213528365"></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGamePlayer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GamePlayer</span> <span class="token keyword">implements</span> <span class="token class-name">IGamePlayer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GamePlayer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"开始游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"被玩家击毙！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这个就是所谓的代理类！</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameProxyPlayer</span> <span class="token keyword">implements</span> <span class="token class-name">IGamePlayer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">GamePlayer</span> gamePlayer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GameProxyPlayer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gamePlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GamePlayer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿到"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"用户名 密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gamePlayer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代练击毙敌军，赢得游戏！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IGamePlayer</span> gamePlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameProxyPlayer</span><span class="token punctuation">(</span><span class="token string">"youwei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gamePlayer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gamePlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>动态代理</strong>（Spring AOP底层使用动态,将jdk代理和cglib代理集成，使得给用户更简单的方式实现代理）<ul><li>jdk动态代理 ：<strong>必须保证被代理的类实现了接口才能被代理</strong></li><li>cglib动态代理：不需要接口</li></ul></li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>jdk步骤：</p><ol><li>获取类加载器、类型、处理类</li><li>在处理类中编写业务逻辑</li><li>动态创建代理类，将**1.**作为参数传入到代理类中</li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110212139474.png" alt="image-20211021213957402"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICalculator</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">implements</span> <span class="token class-name">ICalculator</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">// 被代理对象</span>    <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理函数获取一个被代理对象赋值给target</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*     *  被代理类的所有方法都会经过这个invoke方法！     */</span>    <span class="token comment">// 代理类的执行方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志：调用add方法，无参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志：调用add方法，参数是："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 执行被代理的方法</span>        <span class="token comment">/*         * Object obj,       被代理的对象         * Object... args    被代理的方法参数，直接将args传入         *         * */</span>        <span class="token comment">// 调用真正方法的地方！</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jdk 动态代理完成增加日志的功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 用对应的接口来接受</span>        <span class="token class-name">IGamePlayer</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IGamePlayer</span><span class="token punctuation">)</span><span class="token class-name">MainTest</span><span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GamePlayer</span><span class="token punctuation">(</span><span class="token string">"wuwei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  公共jdk动态代理对象生成     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> needProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * ClassLoader loader       类加载器,通常指定的被代理类的接口的类加载器         * Class&lt;?&gt;[] interfaces,   类型，通常指定的被代理类的接口的类型         * InvocationHandler h      委托执行的处理类：例如日志功能         */</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> needProxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> needProxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//传入被代理的对象</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>needProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 动态创建代理类(反射包中)</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//cmd: class com.sun.proxy.$Proxy4</span>        <span class="token comment">// 带$ 就是jdk动态代理类！！！！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110212156340.png" alt="image-20211021215624178"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110221911816.png" alt="image-20211022191138691"></p><ul><li>切面</li></ul><blockquote><p>涉及多个类别的关注点的模块化。事务 Management 是企业 Java 应用程序中横切关注的一个很好的例子。在 Spring AOP 中，方面是通过使用常规类(<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#aop-schema">schema-based approach</a>)或使用<code>@Aspect</code>注解(<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#aop-ataspectj">@AspectJ style</a>)注解 的常规类来实现的。</p></blockquote><ul><li>连接点</li></ul><blockquote><p>在程序执行过程中的一点，例如方法的执行或异常的处理。在 Spring AOP 中，连接点始终代表方法的执行。</p></blockquote><ul><li>通知</li></ul><blockquote><p>方面在特定的连接点处采取的操作。不同类型的建议包括“周围”，“之前”和“之后”建议。 (建议类型将在后面讨论.)包括 Spring 在内的许多 AOP 框架都将建议建模为拦截器，并在连接点周围维护一系列拦截器。</p></blockquote><ul><li>切点</li></ul><blockquote><p>与连接点匹配的谓词。建议与切入点表达式关联，并在与该切入点匹配的任何连接点处运行(例如，执行具有特定名称的方法)。切入点表达式匹配的连接点的概念是 AOP 的核心，并且 Spring 默认使用 AspectJ 切入点表达语言。</p></blockquote><p><strong>简单配置：</strong></p><ol><li>在ioc的基础上添加pom依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>// AOP 与 spring相互配合的jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是使用注解的形式，所以要是用xml进行配置，xml头省略，具体查看<a href="#%E6%B3%A8%E8%A7%A3+Xml">命名空间配置</a></p><p>必须要设置扫描宝和注解AOP</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">.............</span>    <span class="token attr-name">&lt;!--扫描包：扫描类中所有注解，不扫描注解不生效--</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--使用的是注解方式的AOP，所以要开启注解AOP功能！--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>配置</p><ul><li>设置程序中的切面类</li></ul><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span>     <span class="token comment">// 声明为切面</span><span class="token annotation punctuation">@Component</span>  <span class="token comment">//不仅要声明为切面，还有将其注册在ioc中作为组件管理，因为如果要增强ioc中的Bean就必须注册在IoC中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><ul><li>设置切面类中的方法在什么时候执行</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span>     <span class="token comment">// 声明为切面</span><span class="token annotation punctuation">@Component</span>  <span class="token comment">//不仅要声明为切面，还有将其注册在ioc中作为组件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogUtil</span> <span class="token punctuation">{</span>         <span class="token comment">// 前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jt.service..*.*(..))"</span><span class="token punctuation">)</span> <span class="token comment">//后面是切入表达式！</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 后置通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jt.service..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 后置异常通知</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jt.service..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">afterException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 后置返回通知</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jt.service..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">afterEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110221915831.png" alt="image-20211022191547718"></p><h3 id="第六章-Spring-AOP使用详解"><a href="#第六章-Spring-AOP使用详解" class="headerlink" title="第六章 Spring AOP使用详解"></a>第六章 Spring AOP使用详解</h3><ul><li>注解方式</li><li>xml方式</li></ul><p>SSM项目结构（<strong>示例</strong>）：</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110241011659.png" alt="image-20211024101125567"></p><table><thead><tr><th align="center">包名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">dao</td><td align="center">数据访问层-存放与数据库交互相关代码（Data access object）</td></tr><tr><td align="center">dto</td><td align="center">存放与业务相关性不大的数据实体类(Data Transfer Object)</td></tr><tr><td align="center">entity</td><td align="center">存放与业务相关性大的实体类</td></tr><tr><td align="center">enums</td><td align="center">存放枚举类型，这里主要是存放一些常亮</td></tr><tr><td align="center">exception</td><td align="center">存放自定义的一些运行时异常类</td></tr><tr><td align="center">service</td><td align="center">存放service层的业务相关功能的类</td></tr><tr><td align="center">web（controller）</td><td align="center">存放controller层的控制类</td></tr><tr><td align="center">resources</td><td align="center">即classpath，mapper文件夹存放Mybatis的mapper.xml，spring文件夹放spring的配置文件。</td></tr></tbody></table><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--扫描注解的包--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--启动aop的注解方式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:/spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IUserService</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        *  当开启了aop后，结果是class com.sun.proxy.$Proxy19        *  这是一个jdk动态代理类，实现了IUserService接口        *  因此这个类 与 UserServiceImpl是两个完全不同的两个类，        *  故不能使用UserServiceImpl来接受这个动态代理类！        *        *  aop：当被代理的类实现了接口 会默认使用jdk代理        *       当被代理的类未实现接口 会使用cglib代理        *        *  总结，aop实现的代理类可以理解为：被代理类在注册到ioc中时会被AOP截胡        *       从而生成动态代理类，因此ioc.getBean需要使用接口来接受，        *       (当被代理类没有实现接口则可以使用被代理类接受)        * */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><ul><li><strong>execution</strong>：用于匹配方法执行连接点。主要切点标识符。</li><li><strong>within</strong>：限制匹配特定类型中的连接点（在使用Spring AOP时，只需执行在匹配类型中声明的方法）</li><li>this：匹配实现了某个接口的类</li><li>target：限制匹配到连接点（使用Spring AOP时方法的执行），其中目标对象（正在代理的应用程序对象）是给定类型的实例</li><li>args：限制与连接点的匹配（使用Spring AOP时方法的执行），其中变量是给定类型的实例</li><li>@target：限制与连接点的匹配（使用Spring AOP时方法的执行），其中执行对象的类具有给定类型的注解</li><li>@args：限制匹配连接点（使用Spring AOP时方法的执行），其中传递的实际参数的运行时类型具有给定类型的注解</li><li>@within：限制与具有给定注解的类型中的连接点匹配（使用Spring AOP时在具有给定注解的类型中声明的方法的执行）</li><li>@annotation：限制匹配连接点（在Spring AOP中执行的方法具有给定的注解）有对应注解的就匹配上 </li></ul><p>==例子：==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>modifiers<span class="token operator">-</span>pattern<span class="token operator">?</span> ret<span class="token operator">-</span>type<span class="token operator">-</span>pattern declaring<span class="token operator">-</span>type<span class="token operator">-</span>pattern<span class="token operator">?</span>name<span class="token operator">-</span><span class="token function">pattern</span><span class="token punctuation">(</span>param<span class="token operator">-</span>pattern<span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token operator">-</span>pattern<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这里问号表示当前项可以有也可以没有，其中各项的语义如下：</p><ul><li>modifiers-pattern：<strong>方法的修饰符</strong>，如public，protected；</li><li>ret-type-pattern：<strong>方法的返回值类型</strong>（==必须====，非jdk自带类型必须写完整现定名==：com.jt.user）</li><li>declaring-type-pattern：<strong>方法所在类的全路径名</strong>，如com.spring.Aspect；</li><li>name-pattern：<strong>方法名类型</strong>，如buisinessService()；</li><li>param-pattern：<strong>方法的参数类型</strong>，如java.lang.String； </li><li>throws-pattern：<strong>方法抛出的异常类型</strong>，如java.lang.Exception；</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110241704487.png" alt="image-20211024170409319"></p><blockquote><p>cn.*  == cn.jt ==cn.任意名字，但是只能匹配一级。（cn.jt.service就无法匹配）</p><p>cn.jt.* 可以匹配cn.jt.service</p><p>cn.jt..* 可以匹配cn.jt.service.impl</p></blockquote><p>类名：</p><blockquote><p>可以写***** 代表任意名字的类名。</p><p>可以*<strong>ServiceImpl</strong> 能够匹配诸如：1.UserServiceImpl 、 2.RoleServiceImpl  、 3…</p></blockquote><p>以下示例显示了一些常见的切点表达式：</p><ul><li><p>匹配任意公共方法的执行:</p><pre class="line-numbers language-none"><code class="language-none">execution(public * *(..))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配任意以<code>set</code>开始的方法:</p><pre class="line-numbers language-none"><code class="language-none">execution(* set*(..))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配定义了<code>AccountService</code>接口的任意方法:</p><pre class="line-numbers language-none"><code class="language-none">execution(* com.xyz.service.AccountService.*(..))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配定义在<code>service</code> 包中的任意方法:</p><pre class="line-numbers language-none"><code class="language-none">execution(* com.xyz.service.*.*(..))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配定义在service包和其子包中的任意方法:</p><pre class="line-numbers language-none"><code class="language-none">execution(* com.xyz.service..*.*(..))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配在service包中的任意连接点（只在Spring AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">within(com.xyz.service.*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配在service包及其子包中的任意连接点（只在Spring AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">within(com.xyz.service..*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配代理实现了<code>AccountService</code> 接口的任意连接点（只在Spring AOP中的方法执行）：</p><pre class="line-numbers language-none"><code class="language-none">this(com.xyz.service.AccountService)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘this’ 常常以捆绑的形式出现. 见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用代理对象。</p></li><li><p>匹配当目标对象实现了<code>AccountService</code>接口的任意连接点（只在Spring AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">target(com.xyz.service.AccountService)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘target’ 常常以捆绑的形式出现. 见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用目标对象。</p></li><li><p>匹配使用了单一的参数，并且参数在运行时被传递时可以序列化的任意连接点（只在Spring的AOP中的方法执行）。:</p><pre class="line-numbers language-none"><code class="language-none">args(java.io.Serializable)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘args’ 常常以捆绑的形式出现.见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用方法参数。</p><p>注意在这个例子中给定的切点不同于<code>execution(* *(java.io.Serializable))</code>. 如果在运行时传递的参数是可序列化的，则与execution匹配，如果方法签名声明单个参数类型可序列化，则与args匹配。</p></li><li><p>匹配当目标对象有<code>@Transactional</code>注解时的任意连接点（只在Spring AOP中的方法执行）。</p><pre class="line-numbers language-none"><code class="language-none">@target(org.springframework.transaction.annotation.Transactional)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘@target’ 也可以以捆绑的形式使用.见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用注解对象。</p></li><li><p>匹配当目标对象的定义类型有<code>@Transactional</code>注解时的任意连接点（只在Spring的AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">@within(org.springframework.transaction.annotation.Transactional)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘@within’ 也可以以捆绑的形式使用.见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用注解对象。</p></li><li><p>匹配当执行的方法有<code>@Transactional</code>注解的任意连接点（只在Spring AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">@annotation(org.springframework.transaction.annotation.Transactional)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘@annotation’ 也可以以捆绑的形式使用.见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用注解对象。</p></li><li><p>匹配有单一的参数并且在运行时传入的参数类型有<code>@Classified</code>注解的任意连接点（只在Spring AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">@args(com.xyz.security.Classified)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘@args’ 也可以以捆绑的形式使用.见后续的章节讨论如何在<a href="https://github.com/DocsHome/spring-docs/blob/master/pages/core/aop.md#aop-advice">声明通知</a>中使用注解对象。</p></li><li><p>匹配在名为<code>tradeService</code>的Spring bean上的任意连接点（只在Spring AOP中的方法执行）:</p><pre class="line-numbers language-none"><code class="language-none">bean(tradeService)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>匹配以<code>Service</code>结尾的Spring bean上的任意连接点（只在Spring AOP中方法执行） :</p><pre class="line-numbers language-none"><code class="language-none">bean(*Service)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="合并切点表达式"><a href="#合并切点表达式" class="headerlink" title="合并切点表达式"></a>合并切点表达式</h4><p>可以使用 <code>&amp;&amp;,</code> <code>||</code> 和 <code>!</code>等符号进行合并操作</p><pre class="line-numbers language-none"><code class="language-none">@Pointcut("anyPublicOperation() &amp;&amp; inTrading()")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="通知方法执行顺序"><a href="#通知方法执行顺序" class="headerlink" title="通知方法执行顺序"></a>通知方法执行顺序</h4><ul><li><p>正常执行</p><blockquote><p>@Before -&gt; @After -&gt; @AfterReturning </p></blockquote></li><li><p>异常执行</p><blockquote><p>@Before -&gt; @After -&gt; @AfterThrowing</p></blockquote></li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110261921756.png" alt="image-20211026192106665"></p><p>==手动写动态代理的时候如上图所示，各个通知所在位置是固定的，只是使用SpringAOP后，spring会帮我们将这些通知放在不同位置上。简化我们的操作==上面的图片仅供理解，AOP实际上并不是这样。</p><p>任何通知方法都可以声明一个类型为 <code>org.aspectj.lang.JoinPoint</code>的参数作为其第一个参数（注意，需要使用around advice来声明一个类型为<code>ProceedingJoinPoint</code>的第一个参数， 它是<code>JoinPoint</code>的一个子类。<code>JoinPoint</code>接口提供很多有用的方法：:</p><ul><li><code>getArgs()</code>: 返回方法参数.</li><li><code>getThis()</code>: 返回代理对象.</li><li><code>getTarget()</code>: 返回目标对象.</li><li><code>getSignature()</code>:返回正在通知的方法的描述.</li><li><code>toString()</code>: 打印方法被通知的有用描述.</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 前置通知</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jt.service.impl.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinpoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinpoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 所有的参数</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinpoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName<span class="token operator">+</span><span class="token string">"方法运行，参数是"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要获取返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.注解中的value不能省略了，以为需要多个参数</span><span class="token comment">// 2.在注解中加入returning=“xxxx” ， 其中xxxx为返回值，由于类型不知道是什么，采用object</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.jt.service.impl.*.*(..))"</span><span class="token punctuation">,</span>                returning <span class="token operator">=</span> <span class="token string">"returnValue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回值"</span><span class="token operator">+</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要获取异常信息</p><ul><li><p> 注解中的value不能省略了，以为需要多个参数</p></li><li><p> 在注解中加入throwing=“xxxx” ， 其中xxxx为异常返回值，类型为Exception</p></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注：修饰符、返回值些什么无所谓，但是函数名一定要对应</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.jt.service.impl.*.*(..))"</span><span class="token punctuation">,</span>               throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>sw<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> ret <span class="token operator">=</span> sw<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置异常通知"</span> <span class="token operator">+</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题：</strong>每次写代理类的时候都要写切点表达式，很麻烦！怎么办？</p><p>解决：声明切点，其他方法来引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">// 采用切点的方式让其他通知引用，重用性更强</span>   <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.jt.service.impl.*.*(..))"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// 前置通知 @annotation里面 一定要是函数中参数的名字</span><span class="token comment">// 通知里面的参数不是随便写的，其中JoinPoint是所有的通知都可以用！</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut() &amp;&amp; @annotation(logger)"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinpoint<span class="token punctuation">,</span><span class="token class-name">Logger</span> logger<span class="token punctuation">)</span> <span class="token punctuation">{</span>xxxxxxxxx       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注解的值为:"</span><span class="token operator">+</span>logger<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110262114674.png" alt="image-20211026211405494"></p><h4 id="基于schema（XML）的AOP支持"><a href="#基于schema（XML）的AOP支持" class="headerlink" title="基于schema（XML）的AOP支持"></a>基于schema（XML）的AOP支持</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AOP的xml方式实现--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAspectTwo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.jt.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>returnValue<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110262153779.png" alt="image-20211026215324694"></p><h3 id="第七章-Spring-声明式事务"><a href="#第七章-Spring-声明式事务" class="headerlink" title="第七章 Spring 声明式事务"></a>第七章 Spring 声明式事务</h3><p>什么是事务：</p><blockquote><p>把一组业务当成一个业务来做，要么都成功，要么都失败，保证业务操作完整性的数据库机制</p></blockquote><h4 id="Spring-JdbcTemplate"><a href="#Spring-JdbcTemplate" class="headerlink" title="Spring JdbcTemplate"></a>Spring JdbcTemplate</h4><p>在Spring中为了更加方便的操作jdbc，在JDBC的基础上定义了一个抽象层，目的是为了不同类型的JDBC操作提供模板方法，每个模板方法都能空值整个过程，并允许覆盖过程中的特定任务，通过这种方式，可以尽可能保留灵活性，将数据库存取的工作量降到最低。</p><p><strong>配置xml</strong>：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--Spring ioc容器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--单元测试--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--阿里巴巴数据库连接池--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mysql 数据库--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--AOP--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span> 5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--AOP--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--AOP依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--JDBC事务需要的依赖--&gt;</span>    <span class="token comment">&lt;!--orm：将对象持久化到数据库中--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--扫描--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置JDBC Template Bean组件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--引用数据源--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置druid数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--引入外部属性资源文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCTest</span> <span class="token punctuation">{</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> ioc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DruidDataSource</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DruidDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  jdbcTemplate 演示     *  查询单个值 , 必需保证sql语句返回的是一行一列,且返回值是参数2中所给出的类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> aLong <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select count(*) from pet"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查询实体     * 数据库字段名和属性名一样:     * 利用BeanPropertyRowMapper来与实体类自动映射     *     * 也可以使用lambda     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// User user = jdbcTemplate.queryForObject("select * from suser where id = 1",</span>        <span class="token comment">//         new BeanPropertyRowMapper&lt;&gt;(User.class));</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select * from suser where id = 1"</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>rs<span class="token punctuation">,</span> rowNum<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">User</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    o<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> o<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查询list实体     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// new BeanPropertyRowMapper&lt;&gt;(User.class)参数为对应的对象类</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from suser where id=1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 增删改查 思路都一样 去看文档!!!!!</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li><p>Atomicity（原子性）：==一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节==。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p>Consistency（一致性）：==在事务开始之前和事务结束以后，数据库的完整性没有被破坏==。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p>Isolation（隔离性）：==数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致==。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p></li><li><p>Durability（持久性）：==事务处理结束后，对数据的修改就是永久的==，即便系统故障也不会丢失。 [1] </p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110282223199.png" alt="image-20211028222302000"></p></li></ul><p><strong>配置事务管理器</strong></p><blockquote><p>配置数据源-&gt;配置事务管理器-&gt;开启事务注解驱动</p></blockquote><p>基于注解的事务声明配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置druid数据源--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.driverClassName}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入外部属性资源文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--事务管理器,需要将数据源交给事务管理器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--基于注解方式的事务,开启事务的注解驱动,传入事务管理器如果注解 和 xml 都配置了 会以注解优先--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于xml的事务声明配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--用于声明事务切入的所有方法--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionCut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.jt.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--用来明确切点匹配到的方法那些方法需要使用事务--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--可以使用通配符 必须以下面声明的名字来开头 否则不会用上事务!--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对事务加上注解==@Transactional==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 转账     */</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//张三扣钱</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//出现异常回滚事务</span>    <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//李四加钱</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Transactional标记位置:</p><ul><li><strong>标记在类上面</strong>:当前类所有方法都运用上了事务</li><li><strong>标记在方法</strong>:当前方法运用上了事务(推荐–这样的话控制力度比较细)</li></ul><p><strong>事务配置的属性:</strong></p><p>通常采用简单的注解配置属性：<br><code>@Transactional(属性名称=属性值)</code></p><ul><li><p>Isolation 指定事务的隔离级别<code>@Transactional(isolation = Isolation.DEFAULT)</code></p><ul><li>读已提交 READ_COMMITTED</li><li>读未提交 READ_UNCOMMITTED</li><li>可重复读 REPEATABLE_READ</li><li>串行化 SERIALIZABLE</li><li>默认值 DEFAULT： （MySQL： 可重复读、Oracle： 读已提交）</li></ul></li><li><p>timeout 设置单位为秒的超时。 默认值是 -1 表示使用数据库的设置。</p></li><li><p>readOnly<code> 设置是否是只读事务(常用，用来标识是否是只读操作)。</code>@Transactional(readOnly = false)</p><blockquote><p>当你能确保整个事务过程中只对数据库执行Select操作的时候，如果将此属性设置为true，则会自动进行优化，提高性能。</p></blockquote></li><li><p>Propagation 事务的传播属性（特有的精细化的控制），解决的是事务嵌套的问题，例如：service依赖其他多个service进行数据操作，并且需要保证各个service执行中的事务控制@Transactional(propagation = Propagation.SUPPORTS)</p></li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202110311711776.png" alt="在这里插入图片描述"></p><ul><li>noRollbackFor:那些异常事务可以不会滚</li><li>rollbackFor:那些异常事务需要回滚</li></ul><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><blockquote><p>1、在事务A执行过程中，事务A对数据资源进行了修改，事务B读取了事务A修改后的数据。</p><p>2、由于某些原因，事务A并没有完成提交，发生了RollBack操作，则事务B读取的数据就是脏数据。</p><p>这种读取到另一个事务未提交的数据的现象就是脏读(Dirty Read)。</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111011520122.png" alt="image-20211101152051060"></p><p>==解决方法:@Transcation(isolation = isolation.READ_COMMITTED)==</p><p>读已提交</p><p>==要求事务B只能读取事务A已提交的修改==</p></blockquote><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><blockquote><p>事务B读取了两次数据资源，在这两次读取的过程中事务A修改了数据，导致事务B在这两次读取出来的数据不一致。</p><p>这种在同一个事务中，前后两次读取的数据不一致的现象就是不可重复读(Nonrepeatable Read)。</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111011521730.png" alt="image-20211101152147668"></p><p>==解决方法:@Transcation(isolation = isolation.REPEATABLE_READ)==</p><p>可重复读</p><p>==确保事务X可以多次从一个字段中读取到相同的值,即事务X执行期间禁止其他事物对这个字段进行更新(<strong>行锁</strong>)==</p></blockquote><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><blockquote><p>事务B前后两次读取同一个范围的数据，在事务B两次读取的过程中事务A新增了数据，导致事务B后一次读取到前一次查询没有看到的行。</p><p><strong>幻读和不可重复读有些类似，但是幻读强调的是集合的增减，而不是单条数据的更新。</strong></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111011522198.png" alt="image-20211101152253130"></p><p>==解决方法:@Transcation(isolation = isolationSERIALIZABLE)==</p><p>串行化</p><p>==确保事务X可以多次从一个字段中读取到相同的行,即事务X执行期间禁止其他事物对这表进行添加,更新,删除==可以避免任何并发问题,性能十分低下(<strong>表锁</strong>)</p></blockquote><p>什么是并发操作？</p><p>并发操作是指同一时间可能有多个用户对同一数据进行读写操作.</p><p>并发（concurrency）和并行（parallellism）是：</p><ol><li><p>解释一：并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</p><p>​                操作系统上讲就是指令</p></li><li><p>解释二：并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</p></li><li><p>解释三：并行是在多台处理器上同时处理多个任务。如 hadoop 分布式集群，并发是在一台处理器上“同时”处理多个任务。</p></li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111011614135.png" alt="image-20211101161401025"></p><p><strong>安全性越高,效率越差</strong></p><h4 id="事务的传播性"><a href="#事务的传播性" class="headerlink" title="事务的传播性"></a>事务的传播性</h4><p>指的是当一个事物方法被另一个事物方法调用时,这个事务方法应该如何执行?</p><p>==前三个 重点==</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111011622030.png" alt="image-20211101162200843"></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//也是一个事务 被融合到trans中(我的理解是代码都存在于trans中然后全部执行完毕才行)</span>    <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//也是一个事务 如果调用trans 则 save属于外部存在事务 调用save则属于外部不存在事务</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ILogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">IUserDao</span> userDao<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 如果事务传播行为是挂起事务，需要将父事务方法和子事务方法写在不同的类中</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="超时属性"><a href="#超时属性" class="headerlink" title="超时属性"></a>超时属性</h4><p>指定事务等待的最长时间(秒)</p><p>当前事务访问数据时,有可能访问的数据被别的事务进行加锁的处理,那么此时事务就必须等待,如果等待时间过长给用户造成的体验极差!</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111011717741.png" alt="image-20211101171708636"></p><p> <strong>==Spring事务的实现方式和原理==</strong></p><p>在使用Spring框架时,可以有两种使用事务的方式，一种是编程式的，另一种是声明式。</p><p>首先，事务这个概念是数据库层面的，Spring只是基于数据库中的事务进行了扩展，以及提供了一些能让程序员更加方便操作事务的方式。</p><p>比如我们可以通过在某个方法上增加@Transaction注解，就可以开启事务，这个方法所有的sql都会在一个事务中执行，统一成功或失败。</p><p>在一个方法上加了@Transaction注解后，Spring会基于这个类生成一个代理对象，会将这个代理对象作为bean，当在使用这个代理对象的方法时，如果这个方法上存在@Transaction注解，那么代理逻辑会先把事务的自动提交设置为false,然后再去执行原本的业务逻辑方法，如果执行业务逻辑方法没有出现异常，那么代理逻辑中就会将事务进行提交，如果执行业务逻辑方法出现了异常，那么则会将事务进行回滚。</p><p>当然，针对哪些异常回滚，事务是可以配置的。可以利用@Transaction注解中的rollbackFor属性进行配置，默认情况下会对RuntimeException和Error进行回滚。</p><h3 id="第八章-Spring源码讲解"><a href="#第八章-Spring源码讲解" class="headerlink" title="第八章 Spring源码讲解"></a>第八章 Spring源码讲解</h3><p><a href="https://mp.weixin.qq.com/s/0zDCy0eQycdM8M9eHGuLEQ">https://mp.weixin.qq.com/s/0zDCy0eQycdM8M9eHGuLEQ</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484564&amp;idx=1&amp;sn=84bd8fee210c0d00687c3094431482a7&amp;chksm=fe396eaac94ee7bcf54aae99aecab9fcfbefa7b2be17961061874d0f5cf9c95c81258ddae1b5&amp;scene=178&amp;cur_album_id=1344425436323037184#rd">https://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484564&amp;idx=1&amp;sn=84bd8fee210c0d00687c3094431482a7&amp;chksm=fe396eaac94ee7bcf54aae99aecab9fcfbefa7b2be17961061874d0f5cf9c95c81258ddae1b5&amp;scene=178&amp;cur_album_id=1344425436323037184#rd</a></p><p>所有知识的源码部分打算22年5月份开始学习</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot练手项目:博客</title>
      <link href="/2022/01/04/springboot+vue%E7%BB%83%E6%89%8B%E7%BA%A7%E9%A1%B9%E7%9B%AE%EF%BC%8C%E7%9C%9F%E5%AE%9E%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/01/04/springboot+vue%E7%BB%83%E6%89%8B%E7%BA%A7%E9%A1%B9%E7%9B%AE%EF%BC%8C%E7%9C%9F%E5%AE%9E%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-boot-练手实战项目说明"><a href="#spring-boot-练手实战项目说明" class="headerlink" title="spring boot 练手实战项目说明"></a>spring boot 练手实战项目说明</h1><p>码神之路网站所使用的博客，项目简单，需求明确，容易上手，非常适合做为练手级项目。</p><p>最终成品</p><p>项目讲解说明：</p><ol><li>提供前端工程，只需要实现后端接口即可1. 项目以单体架构入手，先快速开发，不考虑项目优化，降低开发负担1. 开发完成后，开始优化项目，提升编程思维能力1. 比如页面静态化，缓存，云存储，日志等1. docker部署上线1. 云服务器购买，域名购买，域名备案等<br>项目使用技术 ：</li></ol><p>springboot + mybatisplus+redis+mysql</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>​    </p><p>推荐安装插件 配好@Data使用</p> <img src="https://img-blog.csdnimg.cn/e2f5c4eb9cf2423b842381af83257bf4.png" alt="在这里插入图片描述"><p>查看文章代码结构</p> <img src="https://img-blog.csdnimg.cn/0f0504a431af4295b66f3052c7839feb.png" alt="在这里插入图片描述"> <p>自动提示编写的代码</p> <img src="https://img-blog.csdnimg.cn/b2850ef527484df88701916ef89bd8a8.png" alt="在这里插入图片描述"><p>快速生成xml文件</p> <img src="https://img-blog.csdnimg.cn/223ecf8d35ef49bf9d961dad5b3b1a86.png" alt="在这里插入图片描述"><p>区分括号</p> <img src="https://img-blog.csdnimg.cn/d01a13fe992743b984e4d249593fc756.png" alt="在这里插入图片描述"> <p>vscode插件</p> <img src="https://img-blog.csdnimg.cn/8085dedbac7b4db6aba46639ea34e9d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><p>解决通过构造器注入时出现的==循环依赖问题==</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111301714120.png" alt="image-20211130171452025"></p><p>在构造器上加上<code>@Lazy</code>注解与<code>@Autowired</code>共同使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Lazy</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">public</span> <span class="token class-name">SysUserServiceImpl</span><span class="token punctuation">(</span><span class="token class-name">SysUserMapper</span> sysUserMapper<span class="token punctuation">,</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserMapper <span class="token operator">=</span> sysUserMapper<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loginService <span class="token operator">=</span> loginService<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h1><h1 id="1-工程搭建"><a href="#1-工程搭建" class="headerlink" title="1. 工程搭建"></a>1. 工程搭建</h1><p>前端的工程：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run build<span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-1-新建maven工程"><a href="#1-1-新建maven工程" class="headerlink" title="1.1 新建maven工程"></a>1.1 新建maven工程</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mszlu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>blog-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 排除 默认使用的logback  --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- log4j2 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.76<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/joda-time/joda-time --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.10.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==删除src文件==</p><p>maven中的<code>dependencyMangement</code>的作用其实相当于一个对所依赖jar包进行版本管理的管理器。</p><blockquote><ul><li><code>&lt;dependencyManagement&gt; </code>:只是对版本进行管理，不会实际引入jar </li><li><code>&lt;dependencies&gt; </code>:会实际下载jar包  </li></ul></blockquote><h2 id="1-1-2遇到的bug"><a href="#1-1-2遇到的bug" class="headerlink" title="1.1.2遇到的bug"></a>1.1.2遇到的bug</h2><p>==mybatis-plus在springboot中的常用配置一览==</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#mybatis-plus</span><span class="token comment"># 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml</span><span class="token comment"># 如果是放在resource目录 classpath:/mapper/*Mapper.xml</span><span class="token attr-name">mybatis-plus.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/com/springboot/study/mapper/*Mapper.xml</span><span class="token comment">#实体扫描，多个package用逗号或者分号分隔</span><span class="token attr-name">mybatis-plus.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.springboot.study.entity</span><span class="token comment">#主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";</span><span class="token attr-name">mybatis-plus.global-config.id-type</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token comment">#字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"</span><span class="token attr-name">mybatis-plus.global-config.field-strategy</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token comment">#驼峰下划线转换</span><span class="token attr-name">mybatis-plus.global-config.db-column-underline</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#mp2.3+ 全局表前缀 mp_</span><span class="token comment">#mybatis-plus.global.table-prefix: mp_</span><span class="token comment">#刷新mapper 调试神器</span><span class="token attr-name">mybatis-plus.global-config.refresh-mapper</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#数据库大写下划线转换</span><span class="token attr-name">mybatis-plus.global-config.capital-mode</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># Sequence序列接口实现类配置</span><span class="token attr-name">mybatis-plus.global-config.key-generator</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.incrementer.OracleKeyGenerator</span><span class="token comment">#逻辑删除配置（下面3个配置）</span><span class="token attr-name">mybatis-plus.global-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">mybatis-plus.global-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">mybatis-plus.global-config.sql-injector</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.springboot.MyMetaObjectHandler</span><span class="token comment">#配置返回数据库(column下划线命名&amp;&amp;返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）</span><span class="token attr-name">mybatis-plus.configuration.map-underscore-to-camel-case</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">mybatis-plus.configuration.cache-enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment">#配置JdbcTypeForNull, oracle数据库必须配置</span><span class="token attr-name">mybatis-plus.configuration.jdbc-type-for-null</span><span class="token punctuation">=</span><span class="token attr-value">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#server</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span> <span class="token attr-value">8888</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">mszlu_blog</span><span class="token comment"># datasource</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment">#mybatis-plus</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span class="token attr-name">mybatis-plus.global-config.db-config.table-prefix</span><span class="token punctuation">=</span><span class="token attr-value">ms_</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//扫包，将此包下的接口生成代理实现类，并且注册到spring容器中</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.mszlu.blog.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span><span class="token comment">//分页插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==分页插件设置步骤==</p><ul><li>创建<code>MybatisPlusInterceptor</code>主拦截器</li><li>拦截器中注册<code>PaginationInnerInterceptor</code>分页拦截器</li><li>返回主拦截器本身</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span>  <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//跨域配置，不可设置为*，不安全, 前后端分离项目，可能域名不一致</span>        <span class="token comment">//本地测试 端口不一致 也算跨域</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-启动类"><a href="#1-3-启动类" class="headerlink" title="1.3 启动类"></a>1.3 启动类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">BlogApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-首页-文章列表"><a href="#2-首页-文章列表" class="headerlink" title="2. 首页-文章列表"></a>2. 首页-文章列表</h1><h2 id="2-1-接口说明"><a href="#2-1-接口说明" class="headerlink" title="2.1 接口说明"></a>2.1 接口说明</h2><p>接口url：/articles</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>int</td><td>当前页数</td></tr><tr><td>pageSize</td><td>int</td><td>每页显示的数量</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"springboot介绍以及入门案例"</span><span class="token punctuation">,</span>            <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\r\n\r\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。"</span><span class="token punctuation">,</span>            <span class="token property">"commentCounts"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"viewCounts"</span><span class="token operator">:</span> <span class="token number">54</span><span class="token punctuation">,</span>            <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"createDate"</span><span class="token operator">:</span> <span class="token string">"2609-06-26 15:58"</span><span class="token punctuation">,</span>            <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"12"</span><span class="token punctuation">,</span>            <span class="token property">"body"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>            <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"444"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"22"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"11"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"categorys"</span><span class="token operator">:</span> <span class="token null keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Vue.js 是什么"</span><span class="token punctuation">,</span>            <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。"</span><span class="token punctuation">,</span>            <span class="token property">"commentCounts"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"viewCounts"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"createDate"</span><span class="token operator">:</span> <span class="token string">"2609-06-27 11:25"</span><span class="token punctuation">,</span>            <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"12"</span><span class="token punctuation">,</span>            <span class="token property">"body"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>            <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"22"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"categorys"</span><span class="token operator">:</span> <span class="token null keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Element相关"</span><span class="token punctuation">,</span>            <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"本节将介绍如何在项目中使用 Element。"</span><span class="token punctuation">,</span>            <span class="token property">"commentCounts"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"viewCounts"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"createDate"</span><span class="token operator">:</span> <span class="token string">"2609-06-27 11:25"</span><span class="token punctuation">,</span>            <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"12"</span><span class="token punctuation">,</span>            <span class="token property">"body"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>            <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"444"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"33"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"22"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>                    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"11"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"categorys"</span><span class="token operator">:</span> <span class="token null keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-编码"><a href="#2-2-编码" class="headerlink" title="2.2 编码"></a>2.2 编码</h2><h2 id="2-2-0-Spring—基于注解开发"><a href="#2-2-0-Spring—基于注解开发" class="headerlink" title="2.2.0 Spring—基于注解开发"></a>2.2.0 Spring—基于注解开发</h2><h3 id="2-2-1-表结构"><a href="#2-2-1-表结构" class="headerlink" title="2.2.1 表结构"></a>2.2.1 表结构</h3><p>==文章表==</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `blog`.`ms_article`  (  `id` bigint(0) NOT NULL AUTO_INCREMENT,  `comment_counts` int(0) NULL DEFAULT NULL COMMENT '评论数量',  `create_date` bigint(0) NULL DEFAULT NULL COMMENT '创建时间',  `summary` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简介',  `title` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',  `view_counts` int(0) NULL DEFAULT NULL COMMENT '浏览数量',  `weight` int(0) NOT NULL COMMENT '是否置顶',  `author_id` bigint(0) NULL DEFAULT NULL COMMENT '作者id',  `body_id` bigint(0) NULL DEFAULT NULL COMMENT '内容id',  `category_id` int(0) NULL DEFAULT NULL COMMENT '类别id',  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 25 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==标签表== id，文章id，标签id，通过文章id可以间接查到标签id</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `blog`.`ms_tag`  (  `id` bigint(0) NOT NULL AUTO_INCREMENT,  `article_id` bigint(0) NOT NULL,  `tag_id` bigint(0) NOT NULL,  PRIMARY KEY (`id`) USING BTREE,  INDEX `article_id`(`article_id`) USING BTREE,  INDEX `tag_id`(`tag_id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==用户表==</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `blog`.`ms_sys_user`  (  `id` bigint(0) NOT NULL AUTO_INCREMENT,  `account` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '账号',  `admin` bit(1) NULL DEFAULT NULL COMMENT '是否管理员',  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',  `create_date` bigint(0) NULL DEFAULT NULL COMMENT '注册时间',  `deleted` bit(1) NULL DEFAULT NULL COMMENT '是否删除',  `email` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',  `last_login` bigint(0) NULL DEFAULT NULL COMMENT '最后登录时间',  `mobile_phone_number` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号',  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '密码',  `salt` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '加密盐',  `status` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '状态',  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="entity层"><a href="#entity层" class="headerlink" title="entity层"></a>entity层</h3><p><code>别名</code>： model层 ，domain层</p><p><code>用途</code>： 实体层，用于存放我们的实体类，与数据库中的属性值基本保持一致，实现set和get的方法。 例子：user表的实体User </p><p>==文章==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">Article_TOP</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">Article_Common</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> commentCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> viewCounts<span class="token punctuation">;</span>    <span class="token comment">/**     * 作者id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> authorId<span class="token punctuation">;</span>    <span class="token comment">/**     * 内容id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> bodyId<span class="token punctuation">;</span>    <span class="token comment">/**     *类别id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">;</span>    <span class="token comment">/**     * 置顶     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token class-name">Article_Common</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> createDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==用户==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> admin<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> createDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> deleted<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> lastLogin<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mobilePhoneNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> salt<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==标签==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tag</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tagName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-Controller"><a href="#2-2-2-Controller" class="headerlink" title="2.2.2 Controller"></a>2.2.2 Controller</h3><p>controller层。控制器，导入service层，因为service中的方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>api</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Article</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ArticleVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">PageParams</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"articles"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleService</span> articleService<span class="token punctuation">;</span><span class="token comment">//Result是统一结果返回</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">articles</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//ArticleVo 页面接收的数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">listArticlesPage</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的<code>@RequestMapping("articles")</code>中的<code>articles</code>没有加<code>/</code>是可以的,因为springboot底层会判断有没有<code>/</code>没有的话会自己给加上,详情请见<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping的createRequestMappingInfo</code></p><p><strong>java的(PO,VO,TO,BO,DAO,POJO)解释</strong></p><ul><li><p>==PO(persistant object) 持久对象==<br>在o/r映射的时候出现的概念，如果没有o/r映射，没有这个概念存在了。通常对应数据模型(数据库),本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的java对象。最简单的PO就是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。</p></li><li><p>==VO(value object) 值对象==<br>通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得同DTO(数据传输对象),在web上传递。</p></li><li><p>==TO(Transfer Object)，数据传输对象==<br>在应用程序不同tie(关系)之间传输的对象</p></li><li><p>==BO(business object) 业务对象==<br>从业务模型的角度看,见UML元件领域模型中的领域对象。封装业务逻辑的java对象,通过调用DAO方法,结合PO,VO进行业务操作。</p></li><li><p>==POJO(plain ordinary java object) 简单无规则java对象==<br>纯的传统意义的java对象。就是说在一些Object/Relation Mapping工具中，能够做到维护数据库表记录的persisent object完全是一个符合Java Bean规范的纯Java对象，没有增加别的属性和方法。我的理解就是最基本的Java Bean，只有属性字段及setter和getter方法！。</p></li><li><p>==DAO(data access object) 数据访问对象==<br>是一个sun的一个标准j2ee设计模式，这个模式中有个接口就是DAO，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和PO结合使用，DAO中包含了各种数据库的操作方法。通过它的方法,结合PO对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合VO, 提供数据库的CRUD操作…</p></li><li><p>==O/R Mapper 对象/关系 映射==<br>定义好所有的mapping之后，这个O/R Mapper可以帮我们做很多的工作。通过这些mappings,这个O/R Mapper可以生成所有的关于对象保存，删除，读取的SQL语句，我们不再需要写那么多行的DAL代码了。</p></li><li><p>==DTO (Data Transfer Object)数据传输对象==<br>主要用于远程调用等需要大量传输对象的地方。<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。<br>但是我们界面上只要显示10个字段，<br>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，<br>这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p></li></ul><p>统一最后的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Article</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span>code<span class="token punctuation">,</span>msg<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==建立与前端交互的Vo文件==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleVo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> commentCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> viewCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleBodyVo</span> body<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagVo</span><span class="token punctuation">&gt;</span></span> tags<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVo</span><span class="token punctuation">&gt;</span></span> categorys<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-Service"><a href="#2-2-3-Service" class="headerlink" title="2.2.3 Service"></a>2.2.3 Service</h3><p><strong>service层主要是写业务逻辑方法，service层经常要调用dao层（也叫mapper层）的方法对数据进行增删改查的操作。</strong>*</p><h2 id="2-2-3-0-解决mapper爆红"><a href="#2-2-3-0-解决mapper爆红" class="headerlink" title="2.2.3.0 解决mapper爆红"></a>2.2.3.0 解决mapper爆红</h2><p>建立service接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ArticleVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">PageParams</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 分页查询文章列表     * @param pageParams     * @return     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">listArticlesPage</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立service接口的实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">ArticleMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">SysUserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Article</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Tag</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">SysUserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">TagsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ArticleBodyVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ArticleVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">TagVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">PageParams</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">DateTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleMapper</span> articleMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TagService</span> tagService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SysUserService</span> sysUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listArticle</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 1、分页查询article数据库表         */</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//是否置顶进行排序,        //时间倒序进行排列相当于order by create_data desc</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">,</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getCreateDate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articlePage <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分页查询用法 https://blog.csdn.net/weixin_41010294/article/details/105726879</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> articlePage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 要返回我们定义的vo数据，就是对应的前端数据，不应该只返回现在的数据需要进一步进行处理</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articleVoList <span class="token operator">=</span><span class="token function">copyList</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>articleVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">,</span><span class="token keyword">boolean</span> isTag<span class="token punctuation">,</span><span class="token keyword">boolean</span> isAuthor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articleVoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Article</span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>            articleVoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span>isTag<span class="token punctuation">,</span>isAuthor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> articleVoList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//"eop的作用是对应copyList，集合之间的copy分解成集合元素之间的copy</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleVo</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">,</span><span class="token keyword">boolean</span> isTag<span class="token punctuation">,</span><span class="token keyword">boolean</span> isAuthor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ArticleVo</span> articleVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//BeanUtils.copyProperties用法   https://blog.csdn.net/Mr_linjw/article/details/50236279</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> articleVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        articleVo<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">getCreateDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//并不是所有的接口都需要标签和作者信息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isTag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> articleId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleVo<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>tagService<span class="token punctuation">.</span><span class="token function">findTagsByArticleId</span><span class="token punctuation">(</span>articleId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAuthor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//拿到作者id</span>            <span class="token class-name">Long</span> authorId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getAuthorId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleVo<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>sysUserService<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>authorId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> articleVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BeanUtils.copyProperties(article, articleVo);</code>:</p><blockquote><p>上面的这个工具类是spring提供的用于两个具有很多相同属性的JavaBean之间的赋值</p><p><strong>但是有几点我们需要注意：</strong></p><p>BeanUtils.copyProperties(a, b);</p><ul><li>==b中的存在的属性，a中一定要有，但是a中可以有多余的属性==；</li><li>a中与b中==相同的属性都会被替换==，不管是否有值；</li><li>a、 b中的==属性要名字相同==，才能被赋值，不然的话需要手动赋值；</li><li>Spring的BeanUtils的CopyProperties方法需要对应的==属性有getter和setter方法==；</li><li>如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为==属性不同，不会copy==；</li><li>==spring和apache的copy属性的方法源和目的参数的位置正好相反==，所以导包和调用的时候都要注意一下。</li></ul></blockquote><p>建立用户的service接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token class-name">SysUser</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立用户的service接口实现类</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.service.impl;import com.mszlu.blog.dao.SysUserMapper;import com.mszlu.blog.dao.pojo.SysUser;import com.mszlu.blog.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class SysUserServiceImpl implements SysUserService {    @Autowired    private SysUserMapper sysUserMapper;    @Override    public SysUser findUserById(Long id) {        //根据id查询        //为防止sysUser为空增加一个判断        SysUser sysUser = sysUserMapper.selectById(id);        if (sysUser == null){            sysUser = new SysUser();            sysUser.setNickname("码神之路");        }        return sysUser;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-3-1mybatisplus遇到多表查询怎么办"><a href="#2-2-3-1mybatisplus遇到多表查询怎么办" class="headerlink" title="2.2.3.1mybatisplus遇到多表查询怎么办"></a>2.2.3.1mybatisplus遇到多表查询怎么办</h2><p>TagMapper的建立中遇到这个问题了，办法是在建立到TagMapper后需要建立xml文件进行读写 xml文件放到resource文件夹下 文件夹名和xml文件名必须和TagMapper.java文件夹保持一致 <img src="https://img-blog.csdnimg.cn/af3eab062ffa4da3b9ed70c395286ad3.png" alt="在这里插入图片描述"></p><img src="https://img-blog.csdnimg.cn/a9e8bd190451491fb200164568abfdd7.png" alt="在这里插入图片描述"><h2 id="2-2-3-2创建文件夹时遇到的坑"><a href="#2-2-3-2创建文件夹时遇到的坑" class="headerlink" title="2.2.3.2创建文件夹时遇到的坑"></a>2.2.3.2创建文件夹时遇到的坑</h2><p>使用IntelliJ IDEA创建多级文件夹时，文件夹名为com.immer.monitor.persistence 和 com/immer/monitor/persistence 均会显示为如下图所示</p><img src="https://img-blog.csdnimg.cn/012a9edbeba84c0e904e8af06de2ea53.png" alt="在这里插入图片描述"><p>但实际结构确实截然不同 ==com.immer.monitor.persistence 是单个文件夹==== 而 ==com/immer/monitor/persistence 是一个文件夹嵌套==</p><p>会导致资源文件not found 的问题，而且很难排查得到 要不会显示找不到文件夹路径的问题，因为我们要保证mapper.xml要和mapper的文件夹和路径保持一致</p><p>建立标签的service接口</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.service;import com.mszlu.blog.dao.pojo.Tag;import com.mszlu.blog.vo.TagVo;import java.util.List;public interface TagsService {    List&lt;TagVo&gt; findTagsByArticleId(Long id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立tag的service接口的实现类</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.service.impl;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.mszlu.blog.dao.TagMapper;import com.mszlu.blog.dao.pojo.Tag;import com.mszlu.blog.service.TagsService;import com.mszlu.blog.vo.TagVo;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.List;@Servicepublic class TagsServiceImpl implements TagsService {    @Autowired    private TagMapper tagMapper;    /**     * ms_article_tag是文章和标签的关联表     * ms_tag为单纯的标签的表     * @param articleId     * @return     */    @Override    public List&lt;TagVo&gt; findTagsByArticleId(Long articleId) {        //mybatisplus无法进行多表查询        List&lt;Tag&gt; tags = tagMapper.findTagsByArticleId(articleId);        return copyList(tags);    }    private List&lt;TagVo&gt; copyList(List&lt;Tag&gt; tagList) {        List&lt;TagVo&gt; tagVoList = new ArrayList&lt;&gt;();        for (Tag tag : tagList) {            tagVoList.add(copy(tag));        }        return tagVoList;    }    private TagVo copy(Tag tag) {        TagVo tagVo = new TagVo();        BeanUtils.copyProperties(tag, tagVo);        return tagVo;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-4-Dao层"><a href="#2-2-4-Dao层" class="headerlink" title="2.2.4 Dao层"></a>2.2.4 Dao层</h3><p><strong>mapper层=dao层</strong>，现在用mybatis逆向工程生成的mapper层，其实就是dao层。 dao层对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，而service层是针对我们controller，也就是针对我们使用者。service的impl是把mapper和service进行整合的文件。</p><p><strong>dao层和service层关系</strong>：service层经常要调用dao层的方法对数据进行增删改查的操作，现实开发中，对业务的操作会涉及到数据的操作，而对数据操作常常要用到数据库，所以service层会经常调用dao层的方法。</p><p>文章的dao层 由于我们直接继承了mybatisplus的BaseMapper所以基本的增删改查都不用再写了。</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.mszlu.blog.dao.pojo.Article;import com.mszlu.blog.vo.ArticleVo;import java.util.List;public interface ArticleMapper extends BaseMapper&lt;Article&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签的dao层</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.mszlu.blog.dao.pojo.Tag;import java.util.List;public interface TagMapper extends BaseMapper&lt;Tag&gt; {    List&lt;Tag&gt; findTagsByArticleId(Long articleId);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作者的dao层</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.mszlu.blog.dao.pojo.SysUser;public interface SysUserMapper extends BaseMapper&lt;SysUser&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是上文提到的mybatisplus遇到多表查询怎么办，我们需要建立自己的xml文件进行联合查询操作 <img src="https://img-blog.csdnimg.cn/746f8eb6eb7a41fe879444adbe05afea.png" alt="在这里插入图片描述"></p><p>在mapper文件中 利用mapperX插件我们可以创建 方法名为select的命令</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id="findTagsByArticleId" resultType="com.mszlu.blog.dao.pojo.Tag"&gt;&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>总的xml文件如下所示</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!--MyBatis配置文件--&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.mszlu.blog.dao.mapper.TagMapper"&gt;    &lt;sql id="all"&gt;        id,avatar,tag_name as tagName    &lt;/sql&gt;&lt;!--        List&lt;Tag&gt; findTagsByArticleId(Long articleId);在这个文件中，id代表方法名，parameterType表示输入变量的名字，resultType表示泛型的类型--&gt;    &lt;select id="findTagsByArticleId" parameterType="long" resultType="com.mszlu.blog.dao.pojo.Tag"&gt;        select  id,avatar,tag_name as tagName from ms_tag        where id in (select tag_id from ms_article_tag where article_id=#{articleId})    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-5-测试"><a href="#2-2-5-测试" class="headerlink" title="2.2.5 测试"></a>2.2.5 测试</h3><img src="https://img-blog.csdnimg.cn/937739ee77074de7ab0ee5f8fedeffdb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h1 id="3-首页-最热标签"><a href="#3-首页-最热标签" class="headerlink" title="3. 首页-最热标签"></a>3. 首页-最热标签</h1><h2 id="3-1-接口说明"><a href="#3-1-接口说明" class="headerlink" title="3.1 接口说明"></a>3.1 接口说明</h2><p>接口url：/tags/hot</p><p>请求方式：GET</p><p>请求参数：无</p><p>id 标签名称 我们期望点击标签关于文章的所有列表都显示出来</p><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"tagName"</span><span class="token operator">:</span><span class="token string">"4444"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-编码"><a href="#3-2-编码" class="headerlink" title="3.2 编码"></a>3.2 编码</h2><h3 id="3-2-1-Controller"><a href="#3-2-1-Controller" class="headerlink" title="3.2.1 Controller"></a>3.2.1 Controller</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>api</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ArticleService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">TagsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Archive</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ArticleVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">TagVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">//@RestController代表我们返回的是json数据,@RequestMapping("tags")表示路径映射</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TagsController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TagService</span> tagService<span class="token punctuation">;</span>    <span class="token comment">// 路径 tags/hot</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"hot"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">hot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  tagService<span class="token punctuation">.</span><span class="token function">hots</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vo表示后端与前端交互的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TagVo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tagName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-Service"><a href="#3-2-2-Service" class="headerlink" title="3.2.2 Service"></a>3.2.2 Service</h3><p>建立service接口</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.service;import com.mszlu.blog.vo.TagVo;import java.util.List;public interface TagsService {    Result hots(int limit);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立serviceimpl实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">TagMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Tag</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">TagsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">TagVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TagsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TagsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TagMapper</span> tagMapper<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">hots</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 最热标签就是对标签ms_article_tag中的tag_id进行排序数量最多的就是我们的最热标签         * 1、标签所拥有的文章数量最多就是最热标签         * 2、查询 根据tag_id分组计数，从大到小排列取前limit个         */</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> tagIds <span class="token operator">=</span> tagMapper<span class="token punctuation">.</span><span class="token function">findHotsTagIds</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//因为id in（1,2,3） 里面不能为空所以我们需要进行判断</span>        <span class="token comment">//  CollectionUtils.isEmpty作用 https://blog.csdn.net/qq_42848910/article/details/105717235</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//需求的是tagId 和tagName Tag对象</span>        <span class="token comment">//我们的sql语句类似于select * from tag where id in (1,2,3)</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tag</span><span class="token punctuation">&gt;</span></span> tagList <span class="token operator">=</span> tagMapper<span class="token punctuation">.</span><span class="token function">findTagsByTagIds</span><span class="token punctuation">(</span>tagIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>tagList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3-Dao"><a href="#3-2-3-Dao" class="headerlink" title="3.2.3 Dao"></a>3.2.3 Dao</h3><p>TagMapper.java</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.mszlu.blog.dao.pojo.Tag;import java.util.List;public interface TagMapper extends BaseMapper&lt;Tag&gt; {    /**     * 查询最热的标签前n条     * @param limit     * @return     */    List&lt;Long&gt; findHotsTagIds(int limit);    List&lt;Tag&gt; findTagsByTagIds(List&lt;Long&gt; tagIds);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TagMapper.xml文件 一定要了解所有表的业务逻辑，知道自己要返回什么值再进行操作 我们通过findHotsTagIds这个方法在ms_article_tag表中找到了tag_id <img src="https://img-blog.csdnimg.cn/c8bd6331b3614f7e844f95066a68318e.png" alt="在这里插入图片描述"> 然后多表查询，tag_id就是ms_tag表中的id我们在findHotsTagIds这个方法中找到了我们想要的前两条id，然后再利用动态mysql这个方法将id，tagName两个选项选择出来。多写多看基本上可以成为一个合格的crud工程师 <img src="https://img-blog.csdnimg.cn/c8b18849666a4e9a83d5afb73d944d1b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!--MyBatis配置文件--&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.mszlu.blog.dao.TagMapper"&gt;&lt;!--    List&lt;Long&gt; findHotsTagIds(int limit);--&gt;&lt;!--    parameterType="int"是自己加的因为不会自动生成我们输入的标签,#{limit}为我们自己传的参数--&gt;&lt;!--  GROUP by 用法  https://www.runoob.com/sql/sql-groupby.html--&gt;&lt;!--    sql语句的意思是在ms_article_tag表中查找tag_id，根据tag_id将其聚合在一起，再根据count（*）的数量以递减的顺序排序最后限制输出两条数据--&gt;    &lt;select id="findHotsTagIds" parameterType="int" resultType="java.lang.Long"&gt;        select tag_id from ms_article_tag GROUP BY tag_id ORDER BY count(*) DESC LIMIT #{limit}    &lt;/select&gt;&lt;!--    List&lt;Tag&gt; findTagsByTagIds(List&lt;Long&gt; tagIds);因为输入的类型是list所以parameterType的值是list--&gt;&lt;!--    foreach用法 https://www.cnblogs.com/fnlingnzb-learner/p/10566452.html            相当于for循环找传进来的一个id集合，每个id通过sql语句找到对应的tag对象--&gt;    &lt;select id="findTagsByTagIds" parameterType="list" resultType="com.mszlu.blog.dao.pojo.Tag"&gt;        select id,tag_name as tagName from ms_tag        where  id in        &lt;foreach collection="tagIds" item="tagId" separator="," open="(" close=")"&gt;            #{tagId}        &lt;/foreach&gt;    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-4-测试"><a href="#3-2-4-测试" class="headerlink" title="3.2.4 测试"></a>3.2.4 测试</h3><p>最热标签显示出来 <img src="https://img-blog.csdnimg.cn/e8695ffe43854fc8a8252fc404eb8dc8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="4-1-统一异常处理"><a href="#4-1-统一异常处理" class="headerlink" title="4.1. 统一异常处理"></a>4.1. 统一异常处理</h1><p>不管是controller层还是service，dao层，都有可能报异常，如果是预料中的异常，可以直接捕获处理，如果是意料之外的异常，需要统一进行处理，进行记录，并给用户提示相对比较友好的信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span><span class="token punctuation">;</span><span class="token comment">//对加了@controller注解的方法进行拦截处理 Aop的实现</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment">//进行异常处理，处理Exception.class的异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span> <span class="token comment">//返回json数据如果不加就返回页面了</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">doException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//e.printStackTrace();是打印异常的堆栈信息，指明错误原因，</span>        <span class="token comment">// 其实当发生异常时，通常要处理异常，这是编程的好习惯，所以e.printStackTrace()可以方便你调试程序！</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token string">"系统异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/a7ffc2c8842f493497a22c025d27d837.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h1 id="4-2-首页-最热文章"><a href="#4-2-首页-最热文章" class="headerlink" title="4.2. 首页-最热文章"></a>4.2. 首页-最热文章</h1><p>在ms_article表中的view_counts表示浏览数量，越多表示越火热 <img src="https://img-blog.csdnimg.cn/f6d1555209ff4628b043d13e88f31d4a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="4-2-1-接口说明"><a href="#4-2-1-接口说明" class="headerlink" title="4.2.1 接口说明"></a>4.2.1 接口说明</h2><p>接口url：/articles/hot</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"springboot介绍以及入门案例"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Vue.js 是什么"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Element相关"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-2-Controller"><a href="#4-2-2-Controller" class="headerlink" title="4.2.2 Controller"></a>4.2.2 Controller</h2><p>ArticleController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     * 首页最热文章     * @return     */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"hot"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">hotArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">hotArticle</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-3-Service"><a href="#4-2-3-Service" class="headerlink" title="4.2.3 Service"></a>4.2.3 Service</h2><p>src/main/java/com/mszlu/blog/service/ArticleService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">PageParams</span><span class="token punctuation">;</span><span class="token comment">/** * @Author ljm * @Date 2021/10/11 10:30 * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 分页查询文章列表     * @param pageParams     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">listArticle</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 最热文章     * @param limit     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">hotArticle</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">hotArticle</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getViewCounts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getTitle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//"limit"字待串后要加空格，不要忘记加空格，不然会把数据拼到一起</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit "</span><span class="token operator">+</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//select id,title from article order by view_counts desc limt 5</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回vo对象</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token function">copyList</span><span class="token punctuation">(</span>articles<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-4-测试"><a href="#4-2-4-测试" class="headerlink" title="4.2.4 测试"></a>4.2.4 测试</h2><img src="https://img-blog.csdnimg.cn/139dbd5acc69437281fb8df373741291.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h1 id="4-3-首页-最新文章"><a href="#4-3-首页-最新文章" class="headerlink" title="4.3. 首页-最新文章"></a>4.3. 首页-最新文章</h1><p>和最热文章非常类似，一个是根据浏览量来选择，一个是根据最新创建时间来选择</p><h2 id="4-3-1-接口说明"><a href="#4-3-1-接口说明" class="headerlink" title="4.3.1 接口说明"></a>4.3.1 接口说明</h2><p>接口url：/articles/new</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"springboot介绍以及入门案例"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Vue.js 是什么"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Element相关"</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-1-Controller"><a href="#4-3-1-Controller" class="headerlink" title="4.3.1 Controller"></a>4.3.1 Controller</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 首页 最新文章    * @return    */</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"new"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">newArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">newArticles</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-2-Service"><a href="#4-3-2-Service" class="headerlink" title="4.3.2 Service"></a>4.3.2 Service</h2><p>src/main/java/com/mszlu/blog/service/ArticleService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 最新文章 * @param limit * @return */</span><span class="token class-name">Result</span> <span class="token function">newArticles</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">newArticles</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getCreateDate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getTitle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit "</span><span class="token operator">+</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//select id,title from article order by create_date desc limit 5</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token function">copyList</span><span class="token punctuation">(</span>articles<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-4-首页-文章归档"><a href="#4-4-首页-文章归档" class="headerlink" title="4.4. 首页-文章归档"></a>4.4. 首页-文章归档</h1><p>每一篇文章根据创建时间某年某月发表多少篇文章</p><h2 id="4-4-1接口说明"><a href="#4-4-1接口说明" class="headerlink" title="4.4.1接口说明"></a>4.4.1接口说明</h2><p>接口url：/articles/listArchives</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span> <span class="token string">"2021"</span><span class="token punctuation">,</span>            <span class="token property">"month"</span><span class="token operator">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span>            <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span>create_date<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">year</span><span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">(</span>create_date<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">month</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count <span class="token keyword">from</span> ms_article <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">year</span><span class="token punctuation">,</span><span class="token keyword">month</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是 p9 up主给的sql里面create_date 为bigint 13位，直接year()不行，需要先转date型后year()。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span>FROM_UNIXTIME<span class="token punctuation">(</span>create_date<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">year</span><span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">(</span>FROM_UNIXTIME<span class="token punctuation">(</span>create_date<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> count <span class="token keyword">from</span> ms_article <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">year</span><span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样才能查出来结果</p><h2 id="4-4-1-Controller"><a href="#4-4-1-Controller" class="headerlink" title="4.4.1 Controller"></a>4.4.1 Controller</h2><p>src/main/java/com/mszlu/blog/controller/ArticleController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 首页 文章归档   * @return   */</span>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"listArchives"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">listArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面这个是在src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java中使用的返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>dos</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @Author ljm * @Date 2021/10/12 17:19 * @Version 1.0 * do 对象 数据库 查询出来的对象但是不需要持久化，由于do是关键字所以加了个s成为dos */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Archives</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> year<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> month<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-2-Service"><a href="#4-4-2-Service" class="headerlink" title="4.4.2 Service"></a>4.4.2 Service</h2><p>src/main/java/com/mszlu/blog/service/ArticleService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 文章归档 * @return */</span><span class="token class-name">Result</span> <span class="token function">listArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*        文章归档         */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Archives</span><span class="token punctuation">&gt;</span></span> archivesList <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">listArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>archivesList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-3-Dao"><a href="#4-4-3-Dao" class="headerlink" title="4.4.3 Dao"></a>4.4.3 Dao</h2><p>src/main/java/com/mszlu/blog/dao/mapper/ArticleMapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Article</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Archives</span><span class="token punctuation">&gt;</span></span> <span class="token function">listArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/resources/com/mszlu/blog/dao/mapper/ArticleMapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token comment">&lt;!--MyBatis配置文件--&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--创立ArticleMapper.xml文件后再利用mybatisX一键生成select语句--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mszlu.blog.dao.mapper.ArticleMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listArchives<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mszlu.blog.dao.dos.Archives<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select year(FROM_UNIXTIME(create_date/1000)) as year,month(FROM_UNIXTIME(create_date/1000)) as month, count(*) as count from ms_article        group by year,month    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-4-测试"><a href="#4-4-4-测试" class="headerlink" title="4.4.4 测试"></a>4.4.4 测试</h2><img src="https://img-blog.csdnimg.cn/bc18c928a8d24021906d4e235cca0275.png" alt="在这里插入图片描述"><p>注意：前端工程 需使用当天资料下的app</p><h1 id="5-1-登录"><a href="#5-1-登录" class="headerlink" title="5.1. 登录"></a>5.1. 登录</h1><h2 id="5-1-1-接口说明"><a href="#5-1-1-接口说明" class="headerlink" title="5.1.1 接口说明"></a>5.1.1 接口说明</h2><p>接口url：/login</p><p>请求方式：==POST==</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>string</td><td>账号</td></tr><tr><td>password</td><td>string</td><td>密码</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"token"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-2-JWT"><a href="#5-1-2-JWT" class="headerlink" title="5.1.2 JWT"></a>5.1.2 JWT</h2><p>==登录使用JWT技术。==</p><p>jwt 可以生成 一个加密的token，做为用户登录的令牌，当用户登录成功之后，发放给客户端。</p><p>请求需要登录的资源或者接口的时候，将token携带，后端验证token是否合法。</p><p>jwt 有三部分组成：A.B.C</p><p>==A：==Header，{“type”:“JWT”,“alg”:“HS256”} 固定</p><p>==B：==playload，存放信息，比如，用户id，过期时间等等，可以被解密，不能存放敏感信息</p><p>==C  :== 签证，A和B加上秘钥 加密而成，只要秘钥不丢失，可以认为是安全的。</p><p>jwt 验证，<font color="orange">主要就是验证C部分 是否合法</font>。</p><p><font color="red">导入依赖包</font></p><p>依赖包:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/utils/JWTUtils.java 工具类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> jwtToken <span class="token operator">=</span> <span class="token string">"123456Mszlu!@#$$"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtBuilder</span> jwtBuilder <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> jwtToken<span class="token punctuation">)</span> <span class="token comment">// 签发算法，秘钥为jwtToken</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token comment">// body数据，要唯一，自行设置</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置签发时间</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一天的有效时间</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> jwtBuilder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Jwt</span> parse <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parse<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-3-Controller"><a href="#5-1-3-Controller" class="headerlink" title="5.1.3 Controller"></a>5.1.3 Controller</h2><p>src/main/java/com/mszlu/blog/controller/LoginController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LoginService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span>    <span class="token comment">//@RequestBody,@ResponseBody的用法 和理解 https://blog.csdn.net/zhanglf02/article/details/78470219</span>    <span class="token comment">//浅谈@RequestMapping @ResponseBody 和 @RequestBody 注解的用法与区别</span><span class="token comment">//https://blog.csdn.net/ff906317011/article/details/78552426?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link</span><span class="token comment">//@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；而最常用的使用请求体传参的无疑是POST请求了，所以使用@RequestBody接收数据时，一般都用POST方式进行提交。</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//登陆 验证用户 访问用户表</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造LoginParam也就是我们的请求数据 src/main/java/com/mszlu/blog/vo/params/LoginParam.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @Author ljm * @Date 2021/10/12 20:06 * @Version 1.0 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-4-Service"><a href="#5-1-4-Service" class="headerlink" title="5.1.4 Service"></a>5.1.4 Service</h2><p>src/main/java/com/mszlu/blog/service/LoginService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 登录     * @param loginParam     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入依赖包 md5加密的依赖包：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/LoginServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LoginService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">SysUserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JWTUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ErrorCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>digest<span class="token punctuation">.</span></span><span class="token class-name">DigestUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">//Spring 自动扫描组件// https://blog.csdn.net/u010002184/article/details/72870065</span><span class="token comment">// @Component – 指示自动扫描组件。</span><span class="token comment">//@Repository – 表示在持久层DAO组件。</span><span class="token comment">//@Service – 表示在业务层服务组件。</span><span class="token comment">//@Controller – 表示在表示层控制器组件。</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span><span class="token comment">//加密盐用于加密</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> slat <span class="token operator">=</span> <span class="token string">"mszlu!@#"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SysUserService</span> sysUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/**         * 1. 检查参数是否合法         * 2. 根据用户名和密码去user表中查询 是否存在         * 3. 如果不存在 登录失败         * 4. 如果存在 ，使用jwt 生成token 返回给前端         * 5. token放入redis当中，redis  token：user信息 设置过期时间         *  (登录认证的时候 先认证token字符串是否合法，去redis认证是否存在)         */</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> loginParam<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> loginParam<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>PARAMS_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>PARAMS_ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>password <span class="token operator">+</span> slat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">findUser</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>ACCOUNT_PWD_NOT_EXIST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>ACCOUNT_PWD_NOT_EXIST<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//登录成功，使用JWT生成token，返回token和redis中</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// JSON.toJSONString 用法    https://blog.csdn.net/antony9118/article/details/71023009</span>        <span class="token comment">//过期时间是一百天</span>        <span class="token comment">//redisTemplate用法  https://blog.csdn.net/lydms/article/details/105224210 </span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"TOKEN_"</span><span class="token operator">+</span>token<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//生成我们想要的密码，放于数据库用于登陆</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token operator">+</span>slat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/SysUserServiceImpl.java</p><pre class="line-numbers language-none"><code class="language-none">@Override public SysUser findUser(String account, String password) {     LambdaQueryWrapper&lt;SysUser&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();     queryWrapper.eq(SysUser::getAccount,account);     queryWrapper.eq(SysUser::getPassword,password);     //account id 头像 名称     queryWrapper.select(SysUser::getAccount,SysUser::getId,SysUser::getAdmin,SysUser::getNickname);     //增加查询效率，只查询一条     queryWrapper.last("limit 1");     return sysUserMapper.selectOne(queryWrapper); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/SysUserService.java</p><pre class="line-numbers language-none"><code class="language-none">SysUser findUser(String account, String pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-1-5-登录参数，redis配置，统一错误码"><a href="#5-1-5-登录参数，redis配置，统一错误码" class="headerlink" title="5.1.5 登录参数，redis配置，统一错误码"></a>5.1.5 登录参数，redis配置，统一错误码</h2><p>src/main/resources/application.properties</p><pre class="line-numbers language-none"><code class="language-none">spring.redis.host=localhostspring.redis.port=6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/ErrorCode.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span>  <span class="token class-name">ErrorCode</span> <span class="token punctuation">{</span>    <span class="token function">PARAMS_ERROR</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"参数有误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ACCOUNT_PWD_NOT_EXIST</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">"用户名或密码不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NO_PERMISSION</span><span class="token punctuation">(</span><span class="token number">70001</span><span class="token punctuation">,</span><span class="token string">"无访问权限"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SESSION_TIME_OUT</span><span class="token punctuation">(</span><span class="token number">90001</span><span class="token punctuation">,</span><span class="token string">"会话超时"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NO_LOGIN</span><span class="token punctuation">(</span><span class="token number">90002</span><span class="token punctuation">,</span><span class="token string">"未登录"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token class-name">ErrorCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-6-测试"><a href="#5-1-6-测试" class="headerlink" title="5.1.6 测试"></a>5.1.6 测试</h2><p>使用postman测试，因为登录后，需要跳转页面，进行token认证，有接口未写，前端会出现问题。</p><p>token前端获取到之后，会存储在 storage中 h5 ，本地存储</p><p>postman <img src="https://img-blog.csdnimg.cn/2260e7b6a61849aca769c8ac09c12942.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">redis查看 <img src="https://img-blog.csdnimg.cn/f4848f105e9d46ac819b98d7ac6fa13d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="5-2-获取用户信息"><a href="#5-2-获取用户信息" class="headerlink" title="5.2. 获取用户信息"></a>5.2. 获取用户信息</h1><p>为什么实现完获取用户信息才能登陆测试呢？</p><p>token前端获取到之后，会存储在 storage中 h5 ，本地存储，存储好后，拿到storage中的token去获取用户信息，如果这个接口没实现，他就会一直请求陷入死循环</p><h2 id="5-2-1-接口说明"><a href="#5-2-1-接口说明" class="headerlink" title="5.2.1 接口说明"></a>5.2.1 接口说明</h2><p>得从http的head里面拿到这个参数，这样传参相对来说安全一些， 返回是数据是我们用户相关的数据，id，账号、昵称和头像</p><p>接口url：/users/currentUser</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>Authorization</td><td>string</td><td>头部信息(TOKEN)</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"account"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"nickaname"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"avatar"</span><span class="token operator">:</span><span class="token string">"ss"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-2-Controller"><a href="#5-2-2-Controller" class="headerlink" title="5.2.2 Controller"></a>5.2.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/UsersController.java</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.controller;import com.mszlu.blog.service.SysUserService;import com.mszlu.blog.vo.Result;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;//浅谈@RequestMapping @ResponseBody 和 @RequestBody 注解的用法与区别//https://blog.csdn.net/ff906317011/article/details/78552426?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link//@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；而最常用的使用请求体传参的无疑是POST请求了，所以使用@RequestBody接收数据时，一般都用POST方式进行提交。@RestController@RequestMapping("users")public class UserController {    @Autowired    private SysUserService sysUserService;    @GetMapping("currentUser")    public Result currentUser(@RequestHeader("Authorization") String token){        return sysUserService.findUserByToken(token);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-3-Service"><a href="#5-2-3-Service" class="headerlink" title="5.2.3 Service"></a>5.2.3 Service</h2><p>src/main/java/com/mszlu/blog/service/SysUserService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">/**    * 根据token查询用户信息    * @param token    * @return    */</span><span class="token class-name">Result</span> <span class="token function">findUserByToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/SysUserServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这个爆红只需要在对应的mapper上加上@Repository,让spring识别到即可解决爆红的问题</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">SysUserMapper</span> sysUserMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findUserByToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**         * 1、token合法性校验         * 是否为空 ，解析是否成功，redis是否存在         * 2、如果校验失败，返回错误         *3、如果成功，返回对应结果 LoginUserVo         */</span>    <span class="token comment">//去loginservice中去校验token</span>    <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>TOKEN_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>TOKEN_ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">LoginUserVo</span> loginUserVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginUserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUserVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUserVo<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUserVo<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUserVo<span class="token punctuation">.</span><span class="token function">setAccount</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>loginUserVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/LoginService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token comment">/** * @Author ljm * @Date 2021/10/12 20:04 * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 登陆功能     * @param loginParam     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SysUser</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/LoginServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//token为空返回null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> stringObjectMap <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解析失败</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stringObjectMap <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果成功</span>    <span class="token class-name">String</span> userJson <span class="token operator">=</span>  redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"TOKEN_"</span><span class="token operator">+</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>userJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//解析回sysUser对象</span>    <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>userJson<span class="token punctuation">,</span> <span class="token class-name">SysUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sysUser<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-4-LoginUserVo"><a href="#5-2-4-LoginUserVo" class="headerlink" title="5.2.4 LoginUserVo"></a>5.2.4 LoginUserVo</h2><p>src/main/java/com/mszlu/blog/vo/LoginUserVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUserVo</span> <span class="token punctuation">{</span><span class="token comment">//与页面交互</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.2.5 测试</p><h1 id="5-3-退出登录"><a href="#5-3-退出登录" class="headerlink" title="5.3. 退出登录"></a>5.3. 退出登录</h1><p>登陆一个的对token进行认证，一个是在redis中进行注册，token字符串没法更改掉，只能由前端进行清除，后端能做的就是把redis进行清除</p><h2 id="5-3-1-接口说明"><a href="#5-3-1-接口说明" class="headerlink" title="5.3.1 接口说明"></a>5.3.1 接口说明</h2><p>接口url：/logout</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>Authorization</td><td>string</td><td>头部信息(TOKEN)</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-2-Controller"><a href="#5-3-2-Controller" class="headerlink" title="5.3.2 Controller"></a>5.3.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/LogoutController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LoginService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogoutController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span><span class="token comment">//获取头部信息这样一个参数</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-3-Service"><a href="#5-3-3-Service" class="headerlink" title="5.3.3 Service"></a>5.3.3 Service</h2><p>src/main/java/com/mszlu/blog/service/LoginService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 退出登陆 * @param token * @return */</span><span class="token class-name">Result</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/LoginServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//后端直接删除redis中的token</span>      redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"TOKEN_"</span><span class="token operator">+</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-4-测试"><a href="#5-3-4-测试" class="headerlink" title="5.3.4 测试"></a>5.3.4 测试</h2><h1 id="6-1-注册"><a href="#6-1-注册" class="headerlink" title="6.1. 注册"></a>6.1. 注册</h1><h2 id="6-1-1-接口说明"><a href="#6-1-1-接口说明" class="headerlink" title="6.1.1 接口说明"></a>6.1.1 接口说明</h2><p>接口url：/register</p><p>请求方式：POST ==post传参意味着请求参数是按照json方式传== </p><p>请求参数：</p><table><thead><tr><th align="center">参数名称</th><th align="center">参数类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">account</td><td align="center">string</td><td align="center">账号</td></tr><tr><td align="center">password</td><td align="center">string</td><td align="center">密码</td></tr><tr><td align="center">nickname</td><td align="center">string</td><td align="center">昵称</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token string">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token operator">:</span> <span class="token string">"token"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-1-2-Controller"><a href="#6-1-2-Controller" class="headerlink" title="6.1.2 Controller"></a>6.1.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/RegisterController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LoginService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span>    <span class="token comment">//后端传递多个参数，前端只选用其需要的参数就可以了</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//sso 单点登录，后期如果把登录注册功能 提出去（单独的服务，可以独立提供接口服务）</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>loginParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数LoginParam中 添加新的参数nickname。 src/main/java/com/mszlu/blog/vo/params/LoginParam.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-1-3-Service"><a href="#6-1-3-Service" class="headerlink" title="6.1.3 Service"></a>6.1.3 Service</h2><p>src/main/java/com/mszlu/blog/service/impl/LoginServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">/**        * 1. 判断参数 是否合法        * 2. 判断账户是否存在，存在 返回账户已经被注册        * 3. 不存在，注册用户        * 4. 生成token        * 5. 存入redis 并返回        * 6. 注意 加上事务，一旦中间的任何过程出现问题，注册的用户 需要回滚        */</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> loginParam<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> password <span class="token operator">=</span> loginParam<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> nickname <span class="token operator">=</span> loginParam<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span>               <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>               <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>nickname<span class="token punctuation">)</span>       <span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>PARAMS_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>PARAMS_ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">findUserByAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>sysUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>ACCOUNT_EXIST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>ACCOUNT_EXIST<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span>nickname<span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>password<span class="token operator">+</span>slat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setLastLogin</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span><span class="token string">"/static/img/logo.b3a48c0.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setAdmin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1 为true</span>       sysUser<span class="token punctuation">.</span><span class="token function">setDeleted</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 为false</span>       sysUser<span class="token punctuation">.</span><span class="token function">setSalt</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//token</span>       <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"TOKEN_"</span><span class="token operator">+</span>token<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ErrorCode.java中添加一条 src/main/java/com/mszlu/blog/vo/ErrorCode.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">ACCOUNT_EXIST</span><span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">,</span><span class="token string">"账号已存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sysUserService中save 和findUserByAccount方法没有需要构造接口和实现类 src/main/java/com/mszlu/blog/service/SysUserService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">/**    * 根据账户查找用户    * @param account    * @return    */</span><span class="token class-name">SysUser</span> <span class="token function">findUserByAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 保存用户    * @param sysUser    */</span>   <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/SysUserServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">findUserByAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span><span class="token operator">::</span><span class="token function">getAccount</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//确保只能查询一条</span>     queryWrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//保存用户这 id会自动生成</span>     <span class="token comment">//这个地方 默认生成的id是 分布式id 雪花算法</span>     <span class="token comment">//mybatis-plus</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-1-4-加事务"><a href="#6-1-4-加事务" class="headerlink" title="6.1.4 加事务"></a>6.1.4 加事务</h2><p>出现错误就进行回滚防止添加异常 增加@Transactional注解 src/main/java/com/mszlu/blog/service/impl/LoginServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span> <span class="token comment">// 理论上应该加载xxxService上 但是实现类一般只有一个,所以加在实现类上也可!</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==当然 一般建议将事务注解@Transactional加在 接口上，通用一些。== src/main/java/com/mszlu/blog/service/LoginService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">LoginParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span><span class="token punctuation">;</span><span class="token comment">/** * @Author ljm * @Date 2021/10/12 20:04 * @Version 1.0 */</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 登陆功能     * @param loginParam     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SysUser</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 退出登陆     * @param token     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 注册     * @param loginParam     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试的时候 可以将redis 停掉，那么redis连接异常后，新添加的用户 应该执行回滚操作。</p><h2 id="6-1-5-测试"><a href="#6-1-5-测试" class="headerlink" title="6.1.5 测试"></a>6.1.5 测试</h2><h1 id="6-2-登录拦截器"><a href="#6-2-登录拦截器" class="headerlink" title="6.2. 登录拦截器"></a>6.2. 登录拦截器</h1><p>每次访问需要登录的资源的时候，都需要在代码中进行判断，一旦登录的逻辑有所改变，代码都得进行变动，非常不合适。</p><p>那么可不可以统一进行登录判断呢？</p><p>springMVC中拦截器</p><p>可以，使用拦截器，进行登录拦截，如果遇到需要登录才能访问的接口，如果未登录，拦截器直接返回，并跳转登录页面。 </p><h2 id="6-2-1-拦截器实现"><a href="#6-2-1-拦截器实现" class="headerlink" title="6.2.1 拦截器实现"></a>6.2.1 拦截器实现</h2><p>src/main/java/com/mszlu/blog/handler/LoginInterceptor.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LoginService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ErrorCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">HandlerMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token comment">//在执行controller方法(Handler)之前进行执行</span>        <span class="token comment">/**         * 1. 需要判断 请求的接口路径 是否为 HandlerMethod (controller方法)         * 2. 判断 token是否为空，如果为空 未登录         * 3. 如果token 不为空，登录验证 loginService checkToken         * 4. 如果认证成功 放行即可         */</span>        <span class="token comment">//如果不是我们的方法进行放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//handler 可能是 RequestResourceHandler springboot 程序 访问静态资源 默认去classpath下的static目录去查询</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=================request start==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request uri:{}"</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request method:{}"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"token:{}"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=================request end==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>NO_LOGIN<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置浏览器识别返回的是json</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//https://www.cnblogs.com/qlqwjy/p/7455706.html response.getWriter().print()</span>            <span class="token comment">//SON.toJSONString则是将对象转化为Json字符串</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>NO_LOGIN<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//是登录状态，放行</span>                <span class="token comment">//登录验证成功，放行</span>        <span class="token comment">//我希望在controller中 直接获取用户的信息 怎么获取?</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-2-使拦截器生效"><a href="#6-2-2-使拦截器生效" class="headerlink" title="6.2.2 使拦截器生效"></a>6.2.2 使拦截器生效</h2><p>src/main/java/com/mszlu/blog/config/WebMVCConfig.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">LoginInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMVCConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginInterceptor</span> loginInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//跨域配置</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//假设拦截test接口后续实际遇到拦截的接口是时，再配置真正的拦截接口</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-3-测试"><a href="#6-2-3-测试" class="headerlink" title="6.2.3 测试"></a>6.2.3 测试</h2><p>src/main/java/com/mszlu/blog/controller/TestController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/handler/LoginInterceptor.java返回true进行放行，test这个接口就可以正常访问了 <img src="https://img-blog.csdnimg.cn/183b7c0f640f4ea0934e769d30bc542f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="6-3-ThreadLocal保存用户信息"><a href="#6-3-ThreadLocal保存用户信息" class="headerlink" title="6.3. ThreadLocal保存用户信息"></a>6.3. ThreadLocal保存用户信息</h1><p>redis中只放了token我们希望直接获取用户信息 好处和如何使用的  </p><p>==使用ThreadLocal替代Session完成保存用户登录信息功能==</p><p>使用ThreadLocal替代Session的好处：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">可以在同一线程中很方便的获取用户信息，不需要频繁的传递session对象。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体实现流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">在登录业务代码中，当用户登录成功时，生成一个登录凭证存储到redis中，将凭证中的字符串保存在cookie中返回给客户端。使用一个拦截器拦截请求，从cookie中获取凭证字符串与redis中的凭证进行匹配，获取用户信息，将用户信息存储到<span class="token class-name">ThreadLocal</span>中，在本次请求中持有用户信息，即可在后续操作中使用到用户信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相关问题  </p><p>src/main/java/com/mszlu/blog/utils/UserThreadLocal.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserThreadLocal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">UserThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//线程变量隔离</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> LOCAL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOCAL<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SysUser</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOCAL<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/handler/LoginInterceptor.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LoginService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">UserThreadLocal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ErrorCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">HandlerMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//在执行controller方法(Handler)之前进行执行</span>        <span class="token comment">/**         * 1. 需要判断 请求的接口路径 是否为 HandlerMethod (controller方法)         * 2. 判断 token是否为空，如果为空 未登录         * 3. 如果token 不为空，登录验证 loginService checkToken         * 4. 如果认证成功 放行即可         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//handler 可能是 RequestResourceHandler springboot 程序 访问静态资源 默认去classpath下的static目录去查询</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=================request start==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request uri:{}"</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request method:{}"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"token:{}"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=================request end==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>NO_LOGIN<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span>NO_LOGIN<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//登录验证成功，放行</span>        <span class="token comment">//我希望在controller中 直接获取用户的信息 怎么获取?</span>        <span class="token class-name">UserThreadLocal</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       <span class="token comment">//如果不删除 ThreadLocal中用完的信息 会有内存泄漏的风险</span>        <span class="token class-name">UserThreadLocal</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/controller/TestController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">UserThreadLocal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        SysUser</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token class-name">UserThreadLocal</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-1-ThreadLocal内存泄漏"><a href="#7-1-ThreadLocal内存泄漏" class="headerlink" title="7.1. ThreadLocal内存泄漏"></a>7.1. ThreadLocal内存泄漏</h1> <img src="https://img-blog.csdnimg.cn/9e256d87362c4d9295589e3d72e69211.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><p><strong>实线代表强引用,虚线代表弱引用</strong></p><p>每一个Thread维护一个ThreadLocalMap, key为使用<strong>弱引用</strong>的ThreadLocal实例，value为线程变量的副本。</p><p><strong>强引用</strong>，使用最普遍的引用，一个对象具有强引用，不会被垃圾回收器回收。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不回收这种对象。</p><p><strong>如果想取消强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样可以使JVM在合适的时间就会回收该对象。</strong></p><p><strong>弱引用</strong>，JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。在java中，用java.lang.ref.WeakReference类来表示。</p><h1 id="7-2-文章详情"><a href="#7-2-文章详情" class="headerlink" title="7.2. 文章详情"></a>7.2. 文章详情</h1><h2 id="7-2-1-接口说明"><a href="#7-2-1-接口说明" class="headerlink" title="7.2.1 接口说明"></a>7.2.1 接口说明</h2><p>接口url：/articles/view/{id}</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>文章id（路径参数）</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>…<span class="token punctuation">}</span>code<span class="token operator">:</span> <span class="token number">200</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"1405916999732707330"</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"SpringBoot入门案例"</span><span class="token punctuation">,</span> summary<span class="token operator">:</span> <span class="token string">"springboot入门案例"</span><span class="token punctuation">,</span> commentCounts<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>…<span class="token punctuation">}</span>msg<span class="token operator">:</span> <span class="token string">"success"</span>success<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-2-涉及到的表"><a href="#7-2-2-涉及到的表" class="headerlink" title="7.2.2 涉及到的表"></a>7.2.2 涉及到的表</h2><p>内容表</p><p>content存放makedown格式的信息 content_html存放html格式的信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ms_article_body<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">longtext</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content_html<span class="token punctuation">`</span> <span class="token keyword">longtext</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>article_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>article_id<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>article_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">38</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/pojo/ArticleBody.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">//内容表</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleBody</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> contentHtml<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> articleId<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类别表 avata分类图标路径 category_name图标分类的名称 description分类的描述 <img src="https://img-blog.csdnimg.cn/8670bb51483e4d3cb9f6df0cd3886508.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ms_category<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>avatar<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>category_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>description<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/pojo/Category.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">//类别表</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-3-Controller"><a href="#7-2-3-Controller" class="headerlink" title="7.2.3 Controller"></a>7.2.3 Controller</h2><p>src/main/java/com/mszlu/blog/controller/ArticleController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"view/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findArticleById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> articleId<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">findArticleById</span><span class="token punctuation">(</span>articleId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-4-Service"><a href="#7-2-4-Service" class="headerlink" title="7.2.4 Service"></a>7.2.4 Service</h2><p>src/main/java/com/mszlu/blog/service/ArticleService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查看文章详情 * @param articleId * @return */</span><span class="token class-name">Result</span> <span class="token function">findArticleById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> articleId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文章表里面只有tiltle以及一些简介 ms_article 中body_id对应第二张表ms_article_body上的id ms_category会映射到ms_article 中的category_id 需要做一些相对的关联查询 <img src="https://img-blog.csdnimg.cn/e09cf9dda3284c99996f4ac67a8dc71a.png" alt="表一"><img src="https://img-blog.csdnimg.cn/e9f889a0f76546c8b0c03cabd136bb61.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c15c079de7b44d37bdacd7e1127875a0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/88ae15f8289e4ec3ab0cef393b7bf9b1.png" alt="在这里插入图片描述"></p><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findArticleById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> articleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 1. 根据id查询 文章信息     * 2. 根据bodyId和categoryid 去做关联查询     */</span>    <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>articleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>articleId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArticleVo</span> articleVo <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查看完文章了，新增阅读数，有没有问题呢？</span>    <span class="token comment">//查看完文章之后，本应该直接返回数据了，这时候做了一个更新操作，更新时加写锁，阻塞其他的读操作，性能就会比较低</span>    <span class="token comment">// 更新 增加了此次接口的 耗时 如果一旦更新出问题，不能影响 查看文章的操作</span>    <span class="token comment">//线程池  可以把更新操作 扔到线程池中去执行，和主线程就不相关了</span>   <span class="token comment">//threadService.updateArticleViewCount(articleMapper,article);</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>articleVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/ArticleVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleVo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> commentCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> viewCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleBodyVo</span> body<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagVo</span><span class="token punctuation">&gt;</span></span> tags<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryVo</span> category<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/ArticleBodyVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleBodyVo</span> <span class="token punctuation">{</span><span class="token comment">//内容</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/CategoryVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryVo</span> <span class="token punctuation">{</span><span class="token comment">//id，图标路径，图标名称</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ArticleVo中的属性填充： src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法重载，方法名相同参数数量不同</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAuthor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articleVoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Article</span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>            articleVoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span>isTag<span class="token punctuation">,</span>isAuthor<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> articleVoList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAuthor<span class="token punctuation">,</span><span class="token keyword">boolean</span> isBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articleVoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Article</span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>            articleVoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span>isTag<span class="token punctuation">,</span>isAuthor<span class="token punctuation">,</span>isBody<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> articleVoList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAuthor<span class="token punctuation">,</span><span class="token keyword">boolean</span> isBody<span class="token punctuation">,</span><span class="token keyword">boolean</span> isCategory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articleVoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Article</span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>            articleVoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span>isTag<span class="token punctuation">,</span>isAuthor<span class="token punctuation">,</span>isBody<span class="token punctuation">,</span>isCategory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> articleVoList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span><span class="token comment">//带body信息，带category信息</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleVo</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAuthor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isBody<span class="token punctuation">,</span><span class="token keyword">boolean</span> isCategory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ArticleVo</span> articleVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span>articleVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//时间没法copy因为是long型</span>        articleVo<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">getCreateDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//并不是所有的接口 都需要标签 ，作者信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isTag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> articleId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleVo<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>tagService<span class="token punctuation">.</span><span class="token function">findTagsByArticleId</span><span class="token punctuation">(</span>articleId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAuthor<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> authorId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getAuthorId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleVo<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>sysUserService<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>authorId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isBody<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> bodyId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getBodyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleVo<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token function">findArticleBodyById</span><span class="token punctuation">(</span>bodyId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isCategory<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> categoryId <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            articleVo<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>categoryService<span class="token punctuation">.</span><span class="token function">findCategoryById</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> articleVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryVo</span> <span class="token function">findCategory</span><span class="token punctuation">(</span><span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> categoryService<span class="token punctuation">.</span><span class="token function">findCategoryById</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//构建ArticleBodyMapper</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleBodyMapper</span> articleBodyMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleBodyVo</span> <span class="token function">findArticleBodyById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> bodyId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArticleBody</span> articleBody <span class="token operator">=</span> articleBodyMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>bodyId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArticleBodyVo</span> articleBodyVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleBodyVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleBodyVo<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>articleBody<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> articleBodyVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/mapper/ArticleBodyMapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">ArticleBody</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleBodyMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleBody</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/mapper/CategoryMapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Category</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CategoryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/CategoryService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">CategoryVo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CategoryService</span> <span class="token punctuation">{</span>    <span class="token class-name">CategoryVo</span> <span class="token function">findCategoryById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/CategoryServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">CategoryMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Category</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">CategoryService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">CategoryVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">//注入spring </span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CategoryService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryMapper</span> categoryMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CategoryVo</span> <span class="token function">findCategoryById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Category</span> category <span class="token operator">=</span> categoryMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CategoryVo</span> categoryVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//因为category,categoryVo属性一样所以可以使用 BeanUtils.copyProperties</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>categoryVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> categoryVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-5-测试"><a href="#7-2-5-测试" class="headerlink" title="7.2.5 测试"></a>7.2.5 测试</h2><h1 id="7-3-使用线程池-更新阅读次数"><a href="#7-3-使用线程池-更新阅读次数" class="headerlink" title="7.3. 使用线程池 更新阅读次数"></a>7.3. 使用线程池 更新阅读次数</h1><p>//查看完文章了，新增阅读数，有没有问题呢？ </p><p>//查看完文章之后，本应该直接返回数据了，这时候做了一个更新操作，更新时加写锁，阻塞其他的读操作，性能就会比较低（没办法解决，增加阅读数必然要加锁） </p><p>//更新增加了此次接口的耗时（考虑减少耗时）如果一旦更新出问题，不能影响查看操作 想到了一个技术 线程池 可以把更新操作扔到 线程池中去执行和主线程就不相关了  </p><h2 id="7-3-1-线程池配置"><a href="#7-3-1-线程池配置" class="headerlink" title="7.3.1 线程池配置"></a>7.3.1 线程池配置</h2><p>做一个线程池的配置来开启线程池 src/main/java/com/mszlu/blog/config/ThreadPoolConfig.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span><span class="token punctuation">;</span><span class="token comment">//https://www.jianshu.com/p/0b8443b1adc9   关于@Configuration和@Bean的用法和理解</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAsync</span> <span class="token comment">//开启多线程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">asyncServiceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置核心线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置最大线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//配置队列大小</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程活跃时间（秒）</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置默认线程名称</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"码神之路博客项目"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等待所有任务结束后再关闭线程池</span>        executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行初始化</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-1-使用"><a href="#7-3-1-使用" class="headerlink" title="7.3.1 使用"></a>7.3.1 使用</h2><p>src/main/java/com/mszlu/blog/service/ThreadService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">ArticleMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Article</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadService</span> <span class="token punctuation">{</span>    <span class="token comment">//期望此操作在线程池执行不会影响原有主线程</span>    <span class="token comment">//这里线程池不了解可以去看JUC并发编程</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"taskExcutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateArticleViewCount</span><span class="token punctuation">(</span><span class="token class-name">ArticleMapper</span> articleMapper<span class="token punctuation">,</span> <span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> viewCounts <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getViewCounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Article</span> articleupdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleupdate<span class="token punctuation">.</span><span class="token function">setViewCounts</span><span class="token punctuation">(</span>viewCounts<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> updatewrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据id更新</span>        updatewrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getId</span> <span class="token punctuation">,</span>article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置一个为了在多线程的环境下线程安全</span>        <span class="token comment">//改之前再确认这个值有没有被其他线程抢先修改，类似于CAS操作 cas加自旋，加个循环就是cas</span>        updatewrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Article</span> <span class="token operator">::</span><span class="token function">getViewCounts</span><span class="token punctuation">,</span>viewCounts <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// update article set view_count=100 where view_count=99 and id =111</span>        <span class="token comment">//实体类加更新条件</span>        articleMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>articleupdate<span class="token punctuation">,</span>updatewrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">ThreadService</span> threadService<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ArticleVo</span> <span class="token function">findArticleById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Article</span> article <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//线程池</span>    threadService<span class="token punctuation">.</span><span class="token function">updateViewCount</span><span class="token punctuation">(</span>articleMapper<span class="token punctuation">,</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-3-测试"><a href="#7-3-3-测试" class="headerlink" title="7.3.3 测试"></a>7.3.3 测试</h2><p>睡眠 ThredService中的方法 5秒，不会影响主线程的使用，即文章详情会很快的显示出来，不受影响</p><h1 id="Bug修正"><a href="#Bug修正" class="headerlink" title="Bug修正"></a>Bug修正</h1><p>之前Article中的commentCounts，viewCounts，weight 字段为int，会造成更新阅读次数的时候，将其余两个字段设为初始值0 mybatisplus在更新文章阅读次数的时候虽然只设立了articleUpdate.setviewsCounts(viewCounts+1), 但是int默认基本数据类型为0， mybatisplus但凡不是null就会生成到sql语句中进行更新。会出现 <img src="https://img-blog.csdnimg.cn/0c58f5d19f3b47aa845fe69d50472be1.png" alt="在这里插入图片描述">理想中应该是只有views_counts改变但是因为mybatisplus规则所以会出现这个现象 所以将int改为Integer就不会出现这个问题。 src/main/java/com/mszlu/blog/dao/pojo/Article.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">Article_TOP</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">Article_Common</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> commentCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> viewCounts<span class="token punctuation">;</span>    <span class="token comment">/**     * 作者id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> authorId<span class="token punctuation">;</span>    <span class="token comment">/**     * 内容id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> bodyId<span class="token punctuation">;</span>    <span class="token comment">/**     *类别id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">;</span>    <span class="token comment">/**     * 置顶     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> weight<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> createDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-1-评论列表"><a href="#8-1-评论列表" class="headerlink" title="8.1. 评论列表"></a>8.1. 评论列表</h1><p>评论表 id评论id content评论内容 create_date评论时间 article_id评论文章 author_id谁评论的 parent_id盖楼功能对评论的评论进行回复 to_uid给谁评论 level评论的是第几层（1级表示最上层的评论，2表示对评论的评论）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ms_comment<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_date<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>article_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>parent_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>to_uid<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">level</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>article_id<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>article_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/pojo/Comment.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> createDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> articleId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> authorId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> parentId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> toUid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> level<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-1-1-接口说明"><a href="#8-1-1-接口说明" class="headerlink" title="8.1.1 接口说明"></a>8.1.1 接口说明</h2><p>接口url：/comments/article/{id}</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>long</td><td>文章id（路径参数）</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">53</span><span class="token punctuation">,</span>            <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>                <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/static/img/logo.b3a48c0.png"</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"写的好"</span><span class="token punctuation">,</span>            <span class="token property">"childrens"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">54</span><span class="token punctuation">,</span>                    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>                        <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/static/img/logo.b3a48c0.png"</span><span class="token punctuation">,</span>                        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span>                    <span class="token property">"childrens"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token property">"createDate"</span><span class="token operator">:</span> <span class="token string">"1973-11-26 08:52"</span><span class="token punctuation">,</span>                    <span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    <span class="token property">"toUser"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>                        <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/static/img/logo.b3a48c0.png"</span><span class="token punctuation">,</span>                        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"createDate"</span><span class="token operator">:</span> <span class="token string">"1973-11-27 09:53"</span><span class="token punctuation">,</span>            <span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"toUser"</span><span class="token operator">:</span> <span class="token null keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码结构 时序图<img src="https://img-blog.csdnimg.cn/142c81c40e324f758830ae540cb2bd53.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="8-1-2-Controller"><a href="#8-1-2-Controller" class="headerlink" title="8.1.2 Controller"></a>8.1.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/CommentsController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">CommentsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"comments"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentsController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CommentsService</span> commentsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"article/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">comments</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> articleId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> commentsService<span class="token punctuation">.</span><span class="token function">commentsByArticleId</span><span class="token punctuation">(</span>articleId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-1-3-Service"><a href="#8-1-3-Service" class="headerlink" title="8.1.3 Service"></a>8.1.3 Service</h2><p>src/main/java/com/mszlu/blog/service/CommentsService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommentsService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 根据文章id查询所有的评论列表     * @param id     * @return     */</span>    <span class="token class-name">Result</span> <span class="token function">commentsByArticleId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/CommentsServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">CommentMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Comment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">CommentsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">SysUserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">CommentVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">UserVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">DateTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CommentsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CommentMapper</span> commentMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SysUserService</span> sysUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">commentsByArticleId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> articleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/**         * 1. 根据文章id 查询 评论列表 从 comment 表中查询         * 2. 根据作者的id 查询作者的信息         * 3. 判断 如果 level = 1 要去查询它有没有子评论         * 4. 如果有 根据评论id 进行查询 （parent_id）         */</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据文章id进行查询</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Comment</span><span class="token operator">::</span><span class="token function">getArticleId</span><span class="token punctuation">,</span>id <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据层级关系进行查询</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Comment</span><span class="token operator">::</span><span class="token function">getLevel</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span><span class="token punctuation">&gt;</span></span> comments <span class="token operator">=</span> commentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommentVo</span><span class="token punctuation">&gt;</span></span> commentVoList <span class="token operator">=</span> <span class="token function">copyList</span><span class="token punctuation">(</span>comments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>commentVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//对list表中的comment进行判断</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommentVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span><span class="token punctuation">&gt;</span></span> commentList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommentVo</span><span class="token punctuation">&gt;</span></span> commentVoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Comment</span> comment <span class="token operator">:</span> commentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            commentVoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> commentVoList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">CommentVo</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Comment</span> comment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CommentVo</span> commentVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommentVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 相同属性copy</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>comment<span class="token punctuation">,</span>commentVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        commentVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//作者信息</span>        <span class="token class-name">Long</span> authorId <span class="token operator">=</span> comment<span class="token punctuation">.</span><span class="token function">getAuthorId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">findUserVoById</span><span class="token punctuation">(</span>authorId<span class="token punctuation">)</span><span class="token punctuation">;</span>        commentVo<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//子评论</span>        <span class="token class-name">Integer</span> level <span class="token operator">=</span> comment<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> level<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> id <span class="token operator">=</span> comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommentVo</span><span class="token punctuation">&gt;</span></span> commentVoList <span class="token operator">=</span> <span class="token function">findCommentsByParentId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            commentVo<span class="token punctuation">.</span><span class="token function">setChildrens</span><span class="token punctuation">(</span>commentVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//to User 给谁评论</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Long</span> toUid <span class="token operator">=</span> comment<span class="token punctuation">.</span><span class="token function">getToUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserVo</span> toUserVo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">findUserVoById</span><span class="token punctuation">(</span>toUid<span class="token punctuation">)</span><span class="token punctuation">;</span>            commentVo<span class="token punctuation">.</span><span class="token function">setToUser</span><span class="token punctuation">(</span>toUserVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> commentVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommentVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findCommentsByParentId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Comment</span><span class="token operator">::</span><span class="token function">getParentId</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Comment</span><span class="token operator">::</span><span class="token function">getLevel</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span><span class="token punctuation">&gt;</span></span> comments <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">copyList</span><span class="token punctuation">(</span>comments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回的数据： src/main/java/com/mszlu/blog/vo/CommentVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentVo</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">UserVo</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CommentVo</span><span class="token punctuation">&gt;</span></span> childrens<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> level<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">UserVo</span> toUser<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/UserVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在SysUserService中提供 查询用户信息的服务： src/main/java/com/mszlu/blog/service/SysUserService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserVo</span> <span class="token function">findUserVoById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/SysUserServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">UserVo</span> <span class="token function">findUserVoById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span><span class="token string">"/static/img/logo.b3a48c0.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">"码神之路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userVo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-2-评论"><a href="#8-2-评论" class="headerlink" title="8.2. 评论"></a>8.2. 评论</h1><h2 id="8-2-1-接口说明"><a href="#8-2-1-接口说明" class="headerlink" title="8.2.1 接口说明"></a>8.2.1 接口说明</h2><p>接口url：/comments/create/change</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>articleId</td><td>long</td><td>文章id</td></tr><tr><td>content</td><td>string</td><td>评论内容</td></tr><tr><td>parent</td><td>long</td><td>父评论id</td></tr><tr><td>toUserId</td><td>long</td><td>被评论的用户id</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-2-加入到登录拦截器中"><a href="#8-2-2-加入到登录拦截器中" class="headerlink" title="8.2.2 加入到登录拦截器中"></a>8.2.2 加入到登录拦截器中</h2><p>src/main/java/com/mszlu/blog/config/WebMVCConfig.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//拦截test接口，后续实际遇到需要拦截的接口时，在配置为真正的拦截接口</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/comments/create/change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-3-Controller"><a href="#8-2-3-Controller" class="headerlink" title="8.2.3 Controller"></a>8.2.3 Controller</h2><p>代码结构 <img src="https://img-blog.csdnimg.cn/f5cd32c2a4cb44cd89059e0e29a97e9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>构建评论参数对象： src/main/java/com/mszlu/blog/vo/params/CommentParam.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> articleId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> parent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> toUserId<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/controller/CommentsController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create/change"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CommentParam</span> commentParam<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> commentsService<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span>commentParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-4-Service"><a href="#8-2-4-Service" class="headerlink" title="8.2.4 Service"></a>8.2.4 Service</h2><p>src/main/java/com/mszlu/blog/service/CommentsService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Result</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token class-name">CommentParam</span> commentParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/CommentsServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token class-name">CommentParam</span> commentParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//拿到当前用户</span>       <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token class-name">UserThreadLocal</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Comment</span> comment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       comment<span class="token punctuation">.</span><span class="token function">setArticleId</span><span class="token punctuation">(</span>commentParam<span class="token punctuation">.</span><span class="token function">getArticleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       comment<span class="token punctuation">.</span><span class="token function">setAuthorId</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       comment<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>commentParam<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       comment<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Long</span> parent <span class="token operator">=</span> commentParam<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> parent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           comment<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           comment<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//如果是空，parent就是0</span>       comment<span class="token punctuation">.</span><span class="token function">setParentId</span><span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Long</span> toUserId <span class="token operator">=</span> commentParam<span class="token punctuation">.</span><span class="token function">getToUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       comment<span class="token punctuation">.</span><span class="token function">setToUid</span><span class="token punctuation">(</span>toUserId <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> toUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>commentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">//防止前端 精度损失 把id转为string</span><span class="token comment">// 分布式id 比较长，传到前端 会有精度损失，必须转为string类型 进行传输，就不会有问题了</span>    <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>写文章需要 三个接口：</p><ol><li> 获取所有文章类别 </li><li>  获取所有标签  </li><li> 发布文章 </li></ol><h1 id="9-1-所有文章分类"><a href="#9-1-所有文章分类" class="headerlink" title="9.1. 所有文章分类"></a>9.1. 所有文章分类</h1><h2 id="9-1-1-接口说明"><a href="#9-1-1-接口说明" class="headerlink" title="9.1.1 接口说明"></a>9.1.1 接口说明</h2><p>接口url：/categorys</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span>    <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"avatar"</span><span class="token operator">:</span><span class="token string">"/category/front.png"</span><span class="token punctuation">,</span><span class="token property">"categoryName"</span><span class="token operator">:</span><span class="token string">"前端"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"avatar"</span><span class="token operator">:</span><span class="token string">"/category/back.png"</span><span class="token punctuation">,</span><span class="token property">"categoryName"</span><span class="token operator">:</span><span class="token string">"后端"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"avatar"</span><span class="token operator">:</span><span class="token string">"/category/lift.jpg"</span><span class="token punctuation">,</span><span class="token property">"categoryName"</span><span class="token operator">:</span><span class="token string">"生活"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token property">"avatar"</span><span class="token operator">:</span><span class="token string">"/category/database.png"</span><span class="token punctuation">,</span><span class="token property">"categoryName"</span><span class="token operator">:</span><span class="token string">"数据库"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"avatar"</span><span class="token operator">:</span><span class="token string">"/category/language.png"</span><span class="token punctuation">,</span><span class="token property">"categoryName"</span><span class="token operator">:</span><span class="token string">"编程语言"</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-1-2-Controller"><a href="#9-1-2-Controller" class="headerlink" title="9.1.2 Controller"></a>9.1.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/CategoryController.java</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.controller;import com.mszlu.blog.service.CategoryService;import com.mszlu.blog.vo.CategoryVo;import com.mszlu.blog.vo.Result;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("categorys")public class CategoryController {    @Autowired    private CategoryService categoryService;    @GetMapping    public Result listCategory() {        return categoryService.findAll();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-1-3-Service"><a href="#9-1-3-Service" class="headerlink" title="9.1.3 Service"></a>9.1.3 Service</h2><p>src/main/java/com/mszlu/blog/service/impl/CategoryServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//id不一致要重新设立</span>    <span class="token keyword">public</span> <span class="token class-name">CategoryVo</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">CategoryVo</span> categoryVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>categoryVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//id不一致要重新设立</span>        categoryVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> categoryVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">copyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span> categoryList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryVo</span><span class="token punctuation">&gt;</span></span> categoryVoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Category</span> category <span class="token operator">:</span> categoryList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            categoryVoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> categoryVoList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 没有任何参数，所有一个空的LambdaQueryWrapper即可</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span> categories <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>categoryMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//页面交互的对象</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token function">copyList</span><span class="token punctuation">(</span>categories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/460ad8a5fbae409fb8ebe9c7716d1ff9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h1 id="9-2-所有文章标签"><a href="#9-2-所有文章标签" class="headerlink" title="9.2. 所有文章标签"></a>9.2. 所有文章标签</h1><h2 id="9-2-1-接口说明"><a href="#9-2-1-接口说明" class="headerlink" title="9.2.1 接口说明"></a>9.2.1 接口说明</h2><p>接口url：/tags</p><p>请求方式：GET</p><p>请求参数：</p><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"springboot"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"spring"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>            <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"springmvc"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"11"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-2-2-Controller"><a href="#9-2-2-Controller" class="headerlink" title="9.2.2 Controller"></a>9.2.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/TagsController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">TagService</span> tagService<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span>  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">/**   * 查询所有的文章标签   * @return   */</span>      <span class="token keyword">return</span> tagService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-2-3-Service"><a href="#9-2-3-Service" class="headerlink" title="9.2.3 Service"></a>9.2.3 Service</h2><p>src/main/java/com/mszlu/blog/service/TagService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询所有文章标签 * @return */</span><span class="token class-name">Result</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/TagServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tag</span><span class="token punctuation">&gt;</span></span> tags <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tagMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token function">copyList</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/88c1876ff47448fcbf00210b109f0a8b.png" alt="在这里插入图片描述"><h1 id="9-3-发布文章"><a href="#9-3-发布文章" class="headerlink" title="9.3. 发布文章"></a>9.3. 发布文章</h1><h2 id="9-3-1-接口说明"><a href="#9-3-1-接口说明" class="headerlink" title="9.3.1 接口说明"></a>9.3.1 接口说明</h2><pre class="line-numbers language-none"><code class="language-none">请求内容是object（{content: “ww”, contentHtml: “ww↵”}）是因为本身为makedown的编辑器id指的是文章id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/f74eca57127640fba1ce2dcfa038a545.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><p>接口url：/articles/publish</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>string</td><td>文章标题</td></tr><tr><td>id</td><td>long</td><td>文章id（编辑有值）</td></tr><tr><td>body</td><td>object（{content: “ww”, contentHtml: “ww↵”}）</td><td>文章内容</td></tr><tr><td>category</td><td>{id: 2, avatar: “/category/back.png”, categoryName: “后端”}</td><td>文章类别</td></tr><tr><td>summary</td><td>string</td><td>文章概述</td></tr><tr><td>tags</td><td>[{id: 5}, {id: 6}]</td><td>文章标签</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">12232323</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码结构 <img src="https://img-blog.csdnimg.cn/f1f481e5790145008dd510ace8c05cad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="9-3-2-Controller"><a href="#9-3-2-Controller" class="headerlink" title="9.3.2 Controller"></a>9.3.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/ArticleController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">//  @RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；</span>   <span class="token comment">//  而最常用的使用请求体传参的无疑是POST请求了，所以使用@RequestBody接收数据时，一般都用POST方式进行提交。</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"publish"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ArticleParam</span> articleParam<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>articleParam<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要建立参数对象需要用于接收前端传过来的数据 src/main/java/com/mszlu/blog/vo/params/ArticleParam.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">CategoryVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">TagVo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleBodyParam</span> body<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryVo</span> category<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagVo</span><span class="token punctuation">&gt;</span></span> tags<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/params/ArticleBodyParam.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleBodyParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> contentHtml<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-3-3-Service"><a href="#9-3-3-Service" class="headerlink" title="9.3.3 Service"></a>9.3.3 Service</h2><p>src/main/java/com/mszlu/blog/service/ArticleService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 文章发布服务 * @param articleParam * @return */</span><span class="token class-name">Result</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">ArticleParam</span> articleParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">ArticleParam</span> articleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//注意想要拿到数据必须将接口加入拦截器</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token class-name">UserThreadLocal</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 1. 发布文章 目的 构建Article对象         * 2. 作者id  当前的登录用户         * 3. 标签  要将标签加入到 关联列表当中         * 4. body 内容存储 article bodyId         */</span>        <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setAuthorId</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setCategoryId</span><span class="token punctuation">(</span>articleParam<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setCommentCounts</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setSummary</span><span class="token punctuation">(</span>articleParam<span class="token punctuation">.</span><span class="token function">getSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>articleParam<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setViewCounts</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token class-name">Article<span class="token punctuation">.</span>Article_Common</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span><span class="token function">setBodyId</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入之后 会生成一个文章id（因为新建的文章没有文章id所以要insert一下</span>        <span class="token comment">//官网解释："insart后主键会自动'set到实体的ID字段。所以你只需要"getid()就好</span><span class="token comment">//        利用主键自增，mp的insert操作后id值会回到参数对象中</span>        <span class="token comment">//https://blog.csdn.net/HSJ0170/article/details/107982866</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>articleMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//tags</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagVo</span><span class="token punctuation">&gt;</span></span> tags <span class="token operator">=</span> articleParam<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tags <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TagVo</span> tag <span class="token operator">:</span> tags<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ArticleTag</span> articleTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                articleTag<span class="token punctuation">.</span><span class="token function">setArticleId</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                articleTag<span class="token punctuation">.</span><span class="token function">setTagId</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>articleTagMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>articleTag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment">//body</span>        <span class="token class-name">ArticleBody</span> articleBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleBody<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>articleParam<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleBody<span class="token punctuation">.</span><span class="token function">setContentHtml</span><span class="token punctuation">(</span>articleParam<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleBody<span class="token punctuation">.</span><span class="token function">setArticleId</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleBodyMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>articleBody<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入完之后再给一个id</span>        article<span class="token punctuation">.</span><span class="token function">setBodyId</span><span class="token punctuation">(</span>articleBody<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//MybatisPlus中的save方法什么时候执行insert，什么时候执行update</span>        <span class="token comment">// https://www.cxyzjd.com/article/Horse7/103868144</span>       <span class="token comment">//只有当更改数据库时才插入或者更新，一般查询就可以了</span>        articleMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ArticleVo</span> articleVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>articleVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/config/WebMVCConfig.java</p><p>当然登录拦截器中，需要加入发布文章的配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//拦截test接口，后续实际遇到需要拦截的接口时，在配置为真正的拦截接口</span>       registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginInterceptor<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/comments/create/change"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/articles/publish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/mapper/ArticleTagMapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">ArticleTag</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleTagMapper</span>  <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleTag</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/mapper/ArticleBodyMapper.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">ArticleBody</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleBodyMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleBody</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/ArticleVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonSerialize</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>std<span class="token punctuation">.</span></span><span class="token class-name">ToStringSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleVo</span> <span class="token punctuation">{</span><span class="token comment">//一定要记得加 要不然 会出现精度损失</span>    <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> commentCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> viewCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> weight<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleBodyVo</span> body<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagVo</span><span class="token punctuation">&gt;</span></span> tags<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryVo</span> category<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/dao/pojo/ArticleTag.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleTag</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> articleId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> tagId<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-3-4-测试"><a href="#9-3-4-测试" class="headerlink" title="9.3.4 测试"></a>9.3.4 测试</h2><h1 id="9-4-AOP日志"><a href="#9-4-AOP日志" class="headerlink" title="9.4. AOP日志"></a>9.4. AOP日志</h1><p>IOC是spring的两大核心概念之一，IOC给我们提供了一个IOCbean容器，这个容器会帮我们自动去创建对象，不需要我们手动创建，IOC实现创建的通过DI（Dependency Injection 依赖注入），我们可以通过写Java注解代码或者是XML配置方式，把我们想要注入对象所依赖的一些其他的bean，自动的注入进去，他是通过byName或byType类型的方式来帮助我们注入。正是因为有了依赖注入，使得IOC有这非常强大的好处，解耦。</p><p>可以举个例子，JdbcTemplate 或者 SqlSessionFactory 这种bean，如果我们要把他注入到容器里面，他是需要依赖一个数据源的，如果我们把JdbcTemplate 或者 Druid 的数据源强耦合在一起，会导致一个问题，当我们想要使用jdbctemplate必须要使用Druid数据源，那么依赖注入能够帮助我们在Jdbc注入的时候，只需要让他依赖一个DataSource接口，不需要去依赖具体的实现，这样的好处就是，将来我们给容器里面注入一个Druid数据源，他就会自动注入到JdbcTemplate如果我们注入一个其他的也是一样的。比如说c3p0也是一样的，这样的话，JdbcTemplate和数据源完全的解耦了，不强依赖与任何一个数据源，在spring启动的时候，就会把所有的bean全部创建好，这样的话，程序在运行的时候就不需要创建bean了，运行速度会更快，还有IOC管理bean的时候默认是单例的，可以节省时间，提高性能，</p><p>在不改变原有方法基础上对原有方法进行增强 src/main/java/com/mszlu/blog/common/aop/LogAnnotation.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>common<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 日志注解 */</span> <span class="token comment">//ElementType.TYPE代表可以放在类上面  method代表可以放在方法上</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LogAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token keyword">module</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上此注解代表着我们需要对此接口进行日志输出 src/main/java/com/mszlu/blog/controller/ArticleController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token comment">//加上此注解，代表要对此接口记录日志</span><span class="token annotation punctuation">@LogAnnotation</span><span class="token punctuation">(</span><span class="token keyword">module</span> <span class="token operator">=</span> <span class="token string">"文章"</span><span class="token punctuation">,</span>operation <span class="token operator">=</span> <span class="token string">"获取文章列表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">listArticle</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/common/aop/LogAspect.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>common<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">HttpContextUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">IpUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">MethodSignature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * @Author ljm * @Date 2021/10/18 21:01 * @Version 1.0 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//切面 定义了通知和切点的关系</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.mszlu.blog.common.aop.LogAnnotation)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行方法</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行时长(毫秒)</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>        <span class="token comment">//保存日志</span>        <span class="token function">recordLog</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogAnnotation</span> logAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">LogAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====================log start================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"module:{}"</span><span class="token punctuation">,</span>logAnnotation<span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"operation:{}"</span><span class="token punctuation">,</span>logAnnotation<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请求的方法名</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request method:{}"</span><span class="token punctuation">,</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        //请求的参数</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> params <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"params:{}"</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取request 设置IP地址</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpContextUtils</span><span class="token punctuation">.</span><span class="token function">getHttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ip:{}"</span><span class="token punctuation">,</span> <span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"excute time : {} ms"</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=====================log end================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用到的方法类 src/main/java/com/mszlu/blog/utils/HttpContextUtils.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token comment">/** * HttpServletRequest * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpContextUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getHttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/utils/IpUtils.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token comment">/** * 获取Ip * */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取IP地址     * &lt;p&gt;     * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址     * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> unknown <span class="token operator">=</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span> seperator <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> unknown<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> unknown<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> unknown<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"HTTP_CLIENT_IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> unknown<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"HTTP_X_FORWARDED_FOR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">||</span> unknown<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"IpUtils ERROR "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 使用代理，则获取第一个IP地址</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>seperator<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ip <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取ip地址     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpContextUtils</span><span class="token punctuation">.</span><span class="token function">getHttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是 <img src="https://img-blog.csdnimg.cn/0bfd2dceffe4440fb16f43e62351e6cd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>ip地址查询的是</p><img src="https://img-blog.csdnimg.cn/6184e67a3fee4a199cc56bbe69c913e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h1 id="bug修正"><a href="#bug修正" class="headerlink" title="bug修正"></a>bug修正</h1><p>防止拿到的值是null值，因为拿到的是毫秒值，需要对其进行转化，Y表示年，m表示月，对时间进行重写。 <img src="https://img-blog.csdnimg.cn/9faa30c7a13c402c9afad4cc30a55753.png" alt="在这里插入图片描述"></p><p>文章归档：</p><pre class="line-numbers language-none"><code class="language-none">select FROM_UNIXTIME(create_date/1000,'%Y') as year, FROM_UNIXTIME(create_date/1000,'%m') as month,count(*) as count from ms_article group by year,month<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="10-1-文章图片上传"><a href="#10-1-文章图片上传" class="headerlink" title="10.1. 文章图片上传"></a>10.1. 文章图片上传</h1><h2 id="10-1-1-接口说明"><a href="#10-1-1-接口说明" class="headerlink" title="10.1.1 接口说明"></a>10.1.1 接口说明</h2><p>接口url：/upload</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>file</td><td>上传的文件名称</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span><span class="token string">"https://static.mszlu.com/aa.png"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改pom文件引入七牛云的sdk pom.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>qiniu<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>qiniu<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">7.7</span><span class="token number">.0</span><span class="token punctuation">,</span> <span class="token number">7.7</span><span class="token number">.99</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-1-2-Controller"><a href="#10-1-2-Controller" class="headerlink" title="10.1.2 Controller"></a>10.1.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/UploadController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">QiniuUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">QiniuUtils</span> qiniuUtils<span class="token punctuation">;</span>    <span class="token comment">//https://blog.csdn.net/justry_deng/article/details/80855235 MultipartFile介绍</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//原始文件名称 比如说aa.png</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//唯一的文件名称</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span>  UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringAfterLast</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//上传文件上传到那里呢？　七牛云　云服务器</span>        <span class="token comment">//降低我们自身应用服务器的带宽消耗</span>        <span class="token keyword">boolean</span> upload <span class="token operator">=</span> qiniuUtils<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>upload<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">QiniuUtils</span><span class="token punctuation">.</span>url<span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-1-3-使用七牛云"><a href="#10-1-3-使用七牛云" class="headerlink" title="10.1.3 使用七牛云"></a>10.1.3 使用七牛云</h2><p>注意七牛云测试域名 <a href="https://static.mszlu.com/">https://static.mszlu.com/</a> 一个月一回收，记得去修改。 springboot默认只上传1M的图片大小所以修改文件配置 src/main/resources/application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 上传文件总的最大值</span><span class="token attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">20MB</span><span class="token comment"># 单个文件的最大值</span><span class="token attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">2MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/utils/QiniuUtils.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Response</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>storage<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>storage<span class="token punctuation">.</span></span><span class="token class-name">Region</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>storage<span class="token punctuation">.</span></span><span class="token class-name">UploadManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">DefaultPutRet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Auth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QiniuUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"https://static.mszlu.com/"</span><span class="token punctuation">;</span><span class="token comment">//修改以下两个值放到proprietarties中，在密钥管理中获取</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${qiniu.accessKey}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${qiniu.accessSecretKey}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> accessSecretKey<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//构造一个带指定 Region 对象的配置类</span>        <span class="token class-name">Configuration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token class-name">Region</span><span class="token punctuation">.</span><span class="token function">huabei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...其他参数参考类注释</span>        <span class="token class-name">UploadManager</span> uploadManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadManager</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...生成上传凭证，然后准备上传，修改上传名称为自己创立空间的空间名称（是你自己的）</span>        <span class="token class-name">String</span> bucket <span class="token operator">=</span> <span class="token string">"mszlu"</span><span class="token punctuation">;</span>        <span class="token comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> uploadBytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Auth</span> auth <span class="token operator">=</span> <span class="token class-name">Auth</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> accessSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> upToken <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">uploadToken</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Response</span> response <span class="token operator">=</span> uploadManager<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uploadBytes<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> upToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//解析上传成功的结果</span>                <span class="token class-name">DefaultPutRet</span> putRet <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">bodyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DefaultPutRet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-1-4-测试"><a href="#10-1-4-测试" class="headerlink" title="10.1.4 测试"></a>10.1.4 测试</h2><h1 id="10-2-导航-文章分类"><a href="#10-2-导航-文章分类" class="headerlink" title="10.2. 导航-文章分类"></a>10.2. 导航-文章分类</h1><h2 id="10-2-1-查询所有的文章分类"><a href="#10-2-1-查询所有的文章分类" class="headerlink" title="10.2.1 查询所有的文章分类"></a>10.2.1 查询所有的文章分类</h2><h3 id="10-2-1-1-接口说明"><a href="#10-2-1-1-接口说明" class="headerlink" title="10.2.1.1 接口说明"></a>10.2.1.1 接口说明</h3><p>接口url：/categorys/detail</p><p>请求方式：GET</p><p>请求参数：</p><p>|参数名称|参数类型|说明<br>|——<br>|||<br>|||<br>|||</p><p>返回数据：</p><pre class="line-numbers language-none"><code class="language-none">{    "success": true,     "code": 200,     "msg": "success",     "data": [        {            "id": 1,             "avatar": "/static/category/front.png",             "categoryName": "前端",             "description": "前端是什么，大前端"        },         {            "id": 2,             "avatar": "/static/category/back.png",             "categoryName": "后端",             "description": "后端最牛叉"        },         {            "id": 3,             "avatar": "/static/category/lift.jpg",             "categoryName": "生活",             "description": "生活趣事"        },         {            "id": 4,             "avatar": "/static/category/database.png",             "categoryName": "数据库",             "description": "没数据库，啥也不管用"        },         {            "id": 5,             "avatar": "/static/category/language.png",             "categoryName": "编程语言",             "description": "好多语言，该学哪个？"        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/CategoryVo.java</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.vo;import lombok.Data;@Datapublic class CategoryVo {    private Long id;    private String avatar;    private String categoryName;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-1-2-Controller"><a href="#10-2-1-2-Controller" class="headerlink" title="10.2.1.2 Controller"></a>10.2.1.2 Controller</h3><p>src/main/java/com/mszlu/blog/controller/CategoryController.java</p><pre class="line-numbers language-none"><code class="language-none">@GetMapping("detail")    public Result categoriesDetail(){        return categoryService.findAllDetail();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-1-3-Service"><a href="#10-2-1-3-Service" class="headerlink" title="10.2.1.3 Service"></a>10.2.1.3 Service</h3><p>src/main/java/com/mszlu/blog/service/CategoryService.java</p><pre class="line-numbers language-none"><code class="language-none">Result findAllDetail();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/CategoryServiceImpl.java</p><pre class="line-numbers language-none"><code class="language-none">@Override   public Result findAllDetail() {       List&lt;Category&gt; categories = categoryMapper.selectList(new LambdaQueryWrapper&lt;&gt;());       //页面交互的对象       return Result.success(copyList(categories));   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文章分类显示 <img src="https://img-blog.csdnimg.cn/a6140f3851da469f95b0ad3d1946760a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="10-2-2-查询所有的标签"><a href="#10-2-2-查询所有的标签" class="headerlink" title="10.2.2 查询所有的标签"></a>10.2.2 查询所有的标签</h2><h3 id="10-2-2-1-接口说明"><a href="#10-2-2-1-接口说明" class="headerlink" title="10.2.2.1 接口说明"></a>10.2.2.1 接口说明</h3><p>接口url：/tags/detail</p><p>请求方式：GET</p><p>请求参数：</p><p>|参数名称|参数类型|说明<br>|——<br>|||<br>|||<br>|||</p><p>返回数据：</p><pre class="line-numbers language-none"><code class="language-none">{    "success": true,     "code": 200,     "msg": "success",     "data": [        {            "id": 5,             "tagName": "springboot",             "avatar": "/static/tag/java.png"        },         {            "id": 6,             "tagName": "spring",             "avatar": "/static/tag/java.png"        },         {            "id": 7,             "tagName": "springmvc",             "avatar": "/static/tag/java.png"        },         {            "id": 8,             "tagName": "11",             "avatar": "/static/tag/css.png"        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-2-3-Controller"><a href="#10-2-2-3-Controller" class="headerlink" title="10.2.2.3 Controller"></a>10.2.2.3 Controller</h3><p>src/main/java/com/mszlu/blog/vo/TagVo.java</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.vo;import lombok.Data;@Datapublic class TagVo {    private Long id;    private String tagName;    private String avatar;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/controller/TagsController.java</p><pre class="line-numbers language-none"><code class="language-none">@GetMapping("detail")   public Result findAllDetail(){       return tagService.findAllDetail();   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-2-4-Service"><a href="#10-2-2-4-Service" class="headerlink" title="10.2.2.4 Service"></a>10.2.2.4 Service</h3><p>src/main/java/com/mszlu/blog/service/TagService.java</p><pre class="line-numbers language-none"><code class="language-none">Result findAllDetail();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/TagServiceImpl.java</p><pre class="line-numbers language-none"><code class="language-none">@Override   public Result findAllDetail() {       LambdaQueryWrapper&lt;Tag&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();       List&lt;Tag&gt; tags = this.tagMapper.selectList(queryWrapper);       return Result.success(copyList(tags));   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签显示 <img src="https://img-blog.csdnimg.cn/5f25cff9383d4f9ea7e735381802d98f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="10-3-分类文章列表"><a href="#10-3-分类文章列表" class="headerlink" title="10.3. 分类文章列表"></a>10.3. 分类文章列表</h1><h2 id="10-3-1-接口说明"><a href="#10-3-1-接口说明" class="headerlink" title="10.3.1 接口说明"></a>10.3.1 接口说明</h2><p>接口url：/category/detail/{id}</p><p>请求方式：GET</p><p>请求参数：</p><p>|参数名称|参数类型|说明<br>|——<br>|id|分类id|路径参数<br>|||<br>|||</p><p>返回数据：</p><pre class="line-numbers language-none"><code class="language-none">{    "success": true,     "code": 200,     "msg": "success",     "data":         {            "id": 1,             "avatar": "/static/category/front.png",             "categoryName": "前端",             "description": "前端是什么，大前端"        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-3-2-Controller"><a href="#10-3-2-Controller" class="headerlink" title="10.3.2 Controller"></a>10.3.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/CategoryController.java</p><pre class="line-numbers language-none"><code class="language-none">@GetMapping("detail/{id}")  public Result categoriesDetailById(@PathVariable("id") Long id){      return categoryService.categoriesDetailById(id);  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-3-3-Service"><a href="#10-3-3-Service" class="headerlink" title="10.3.3 Service"></a>10.3.3 Service</h2><p>src/main/java/com/mszlu/blog/service/CategoryService.java</p><pre class="line-numbers language-none"><code class="language-none">Result categoryDetailById(Long id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/CategoryServiceImpl.java</p><pre class="line-numbers language-none"><code class="language-none">@Override    public Result categoriesDetailById(Long id) {        Category category = categoryMapper.selectById(id);        //转换为CategoryVo        CategoryVo categoryVo = copy(category);        return Result.success(categoryVo);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成上面这些只能说是可以显示文章分类的图标了 <img src="https://img-blog.csdnimg.cn/8171a442d3544001adc7b1075dc41e3c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>但是如果想显示后端所有的归属内容得在文章查询列表出进行queryWrapper查找，当文章分类标签不是null时，加入文章分类标签这个查询元素进行分类修改。 src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic Result listArticle(PageParams pageParams) {    /**     * 1、分页查询article数据库表     */    Page&lt;Article&gt; page = new Page&lt;&gt;(pageParams.getPage(), pageParams.getPageSize());    LambdaQueryWrapper&lt;Article&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();    //查询文章的参数 加上分类id，判断不为空 加上分类条件      if (pageParams.getCategoryId()!=null) {        //and category_id=#{categoryId}        queryWrapper.eq(Article::getCategoryId,pageParams.getCategoryId());    }    //是否置顶进行排序,        //时间倒序进行排列相当于order by create_data desc    queryWrapper.orderByDesc(Article::getWeight,Article::getCreateDate);    Page&lt;Article&gt; articlePage = articleMapper.selectPage(page, queryWrapper);    //分页查询用法 https://blog.csdn.net/weixin_41010294/article/details/105726879    List&lt;Article&gt; records = articlePage.getRecords();    // 要返回我们定义的vo数据，就是对应的前端数据，不应该只返回现在的数据需要进一步进行处理    List&lt;ArticleVo&gt; articleVoList =copyList(records,true,true);    return Result.success(articleVoList);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/vo/params/PageParams.java</p><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.vo.params;import lombok.Data;@Datapublic class PageParams {    private int page = 1;    private int pageSize = 10;    private Long categoryId;    private Long tagId;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就可以显示所有文章分类的每个标签下的内容了 <img src="https://img-blog.csdnimg.cn/6032d1fdc57e4b47a4e988c3b497909d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="10-4-标签文章列表"><a href="#10-4-标签文章列表" class="headerlink" title="10.4. 标签文章列表"></a>10.4. 标签文章列表</h1><h2 id="10-4-1-接口说明"><a href="#10-4-1-接口说明" class="headerlink" title="10.4.1 接口说明"></a>10.4.1 接口说明</h2><p>接口url：/tags/detail/{id}</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>标签id</td><td>路径参数</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>     <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>     <span class="token property">"data"</span><span class="token operator">:</span>         <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>             <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"springboot"</span><span class="token punctuation">,</span>             <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"/static/tag/java.png"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-4-2-Controller"><a href="#10-4-2-Controller" class="headerlink" title="10.4.2 Controller"></a>10.4.2 Controller</h2><p>src/main/java/com/mszlu/blog/controller/TagsController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"detail/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findADetailById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 查询所有文章标签下所有的文章     * @return     */</span>    <span class="token keyword">return</span> tagService<span class="token punctuation">.</span><span class="token function">findADetailById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-4-3-Service"><a href="#10-4-3-Service" class="headerlink" title="10.4.3 Service"></a>10.4.3 Service</h2><p>src/main/java/com/mszlu/blog/service/TagService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Result</span> <span class="token function">findADetailById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/service/impl/TagServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findDetailById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">Tag</span> tag <span class="token operator">=</span> tagMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TagVo</span> copy <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成上面这些这保证了文章标签显示出来了我们需要重写文章查询接口，保证当遇到标签查询时我们可以做到正确查询文章标签所对应的内容，要不每一个标签查出来的内容都是一样的。 <img src="https://img-blog.csdnimg.cn/dafc073d46054793ab60ce8592e87745.png" alt="在这里插入图片描述"></p><h2 id="10-4-4-修改原有的查询文章接口"><a href="#10-4-4-修改原有的查询文章接口" class="headerlink" title="10.4.4 修改原有的查询文章接口"></a>10.4.4 修改原有的查询文章接口</h2><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加入标签条件查询</span><span class="token comment">//article表中并没有tag字段 一篇文章有多个标签</span><span class="token comment">//articie_tog article_id 1：n tag_id</span><span class="token comment">//我们需要利用一个全新的属于文章标签的queryWrapper将这篇文章的article_Tag查出来，保存到一个list当中。</span><span class="token comment">// 然后再根据queryWrapper的in方法选择我们需要的标签即可。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listArticle</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 1、分页查询article数据库表     */</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//and category_id=#{categoryId}</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getCategoryId</span><span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> articleIdList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getTagId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//加入标签条件查询</span>        <span class="token comment">//article表中并没有tag字段 一篇文章有多个标签</span>        <span class="token comment">//articie_tog article_id 1：n tag_id</span>        <span class="token comment">//我们需要利用一个全新的属于文章标签的queryWrapper将这篇文章的article_Tag查出来，保存到一个list当中。</span>        <span class="token comment">// 然后再根据queryWrapper的in方法选择我们需要的标签即可。</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleTag</span><span class="token punctuation">&gt;</span></span> articleTagLambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleTagLambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ArticleTag</span><span class="token operator">::</span><span class="token function">getTagId</span><span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getTagId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleTag</span><span class="token punctuation">&gt;</span></span> articleTags <span class="token operator">=</span> articleTagMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>articleTagLambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ArticleTag</span> articleTag <span class="token operator">:</span> articleTags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            articleIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>articleTag<span class="token punctuation">.</span><span class="token function">getArticleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>articleTags<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// and id in(1,2,3)</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span>articleIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//是否置顶进行排序,        //时间倒序进行排列相当于order by create_data desc</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">,</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getCreateDate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articlePage <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分页查询用法 https://blog.csdn.net/weixin_41010294/article/details/105726879</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> articlePage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 要返回我们定义的vo数据，就是对应的前端数据，不应该只返回现在的数据需要进一步进行处理</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleVo</span><span class="token punctuation">&gt;</span></span> articleVoList <span class="token operator">=</span><span class="token function">copyList</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>articleVoList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-4-5-测试"><a href="#10-4-5-测试" class="headerlink" title="10.4.5 测试"></a>10.4.5 测试</h2><p>最终的结果如下，每一个标签下都对应着该标签所对应的文章 <img src="https://img-blog.csdnimg.cn/b9d6c7684563474bb1b624313f60ad04.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="11-1-归档文章列表"><a href="#11-1-归档文章列表" class="headerlink" title="11.1. 归档文章列表"></a>11.1. 归档文章列表</h1><h2 id="11-1-1-接口说明"><a href="#11-1-1-接口说明" class="headerlink" title="11.1.1 接口说明"></a>11.1.1 接口说明</h2><p>接口url：/articles</p><p>请求方式：POST</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>year</td><td>string</td><td>年</td></tr><tr><td>month</td><td>string</td><td>月</td></tr></tbody></table><p>返回数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>     <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>     <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>文章列表，数据同之前的文章列表接口<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-1-2-文章列表参数"><a href="#11-1-2-文章列表参数" class="headerlink" title="11.1.2 文章列表参数"></a>11.1.2 文章列表参数</h2><p>src/main/java/com/mszlu/blog/vo/params/PageParams.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>params</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageParams</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> tagId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> year<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> month<span class="token punctuation">;</span>    <span class="token comment">//传递6的话变成06</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-1-3-使用自定义sql-实现文章列表"><a href="#11-1-3-使用自定义sql-实现文章列表" class="headerlink" title="11.1.3 使用自定义sql 实现文章列表"></a>11.1.3 使用自定义sql 实现文章列表</h2><p>src/main/java/com/mszlu/blog/service/impl/ArticleServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">listArticle</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articleIPage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>articleMapper<span class="token punctuation">.</span><span class="token function">listArticle</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getTagId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageParams<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token function">copyList</span><span class="token punctuation">(</span>articleIPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"articleMap"</span> type<span class="token operator">=</span><span class="token string">"com.mszlu.blog.dao.pojo.Article"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"id"</span> property<span class="token operator">=</span><span class="token string">"id"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"author_id"</span> property<span class="token operator">=</span><span class="token string">"authorId"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"comment_counts"</span> property<span class="token operator">=</span><span class="token string">"commentCounts"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"create_date"</span> property<span class="token operator">=</span><span class="token string">"createDate"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"summary"</span> property<span class="token operator">=</span><span class="token string">"summary"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"title"</span> property<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"view_counts"</span> property<span class="token operator">=</span><span class="token string">"viewCounts"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"weight"</span> property<span class="token operator">=</span><span class="token string">"weight"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"body_id"</span> property<span class="token operator">=</span><span class="token string">"bodyId"</span><span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"category_id"</span> property<span class="token operator">=</span><span class="token string">"categoryId"</span><span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> resultMap和resultType区别   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>xushiyu1996818<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">89075069</span><span class="token operator">?</span>spm<span class="token operator">=</span><span class="token number">1001.2101</span><span class="token number">.3001</span><span class="token number">.6650</span><span class="token number">.4</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>utm_medium<span class="token operator">=</span>distribute<span class="token punctuation">.</span>pc_relevant<span class="token punctuation">.</span>none<span class="token operator">-</span>task<span class="token operator">-</span>blog<span class="token operator">-</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">%</span><span class="token number">7</span>ECTRLIST<span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">-</span><span class="token number">4.</span>no_search_link<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>depth_1<span class="token operator">-</span>utm_source<span class="token operator">=</span>distribute<span class="token punctuation">.</span>pc_relevant<span class="token punctuation">.</span>none<span class="token operator">-</span>task<span class="token operator">-</span>blog<span class="token operator">-</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">%</span><span class="token number">7</span>ECTRLIST<span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">-</span><span class="token number">4.</span>no_search_link<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>驼峰命名法   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span><span class="token class-name">A_Java_Dog</span><span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">107006391</span><span class="token operator">?</span>spm<span class="token operator">=</span><span class="token number">1001.2101</span><span class="token number">.3001</span><span class="token number">.6650</span><span class="token number">.6</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>utm_medium<span class="token operator">=</span>distribute<span class="token punctuation">.</span>pc_relevant<span class="token punctuation">.</span>none<span class="token operator">-</span>task<span class="token operator">-</span>blog<span class="token operator">-</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">%</span><span class="token number">7</span>EBlogCommendFromBaidu<span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">-</span><span class="token number">6.</span>no_search_link<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>depth_1<span class="token operator">-</span>utm_source<span class="token operator">=</span>distribute<span class="token punctuation">.</span>pc_relevant<span class="token punctuation">.</span>none<span class="token operator">-</span>task<span class="token operator">-</span>blog<span class="token operator">-</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">%</span><span class="token number">7</span>EBlogCommendFromBaidu<span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">-</span><span class="token number">6.</span>no_search_link<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token class-name">Long</span> categoryId<span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token class-name">Long</span> tagId<span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token class-name">String</span> year<span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token class-name">String</span> month<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis中xml文件用法    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>weixin_43882997<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">85625805</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态sql    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>e309ae5e4a77<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>驼峰命名    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>zoutao<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">82685918</span><span class="token operator">?</span>spm<span class="token operator">=</span><span class="token number">1001.2101</span><span class="token number">.3001</span><span class="token number">.6650</span><span class="token number">.18</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>utm_medium<span class="token operator">=</span>distribute<span class="token punctuation">.</span>pc_relevant<span class="token punctuation">.</span>none<span class="token operator">-</span>task<span class="token operator">-</span>blog<span class="token operator">-</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">%</span><span class="token number">7</span>EBlogCommendFromBaidu<span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">-</span><span class="token number">18.</span>no_search_link<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>depth_1<span class="token operator">-</span>utm_source<span class="token operator">=</span>distribute<span class="token punctuation">.</span>pc_relevant<span class="token punctuation">.</span>none<span class="token operator">-</span>task<span class="token operator">-</span>blog<span class="token operator">-</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">%</span><span class="token number">7</span>EBlogCommendFromBaidu<span class="token operator">%</span><span class="token number">7</span>Edefault<span class="token operator">-</span><span class="token number">18.</span>no_search_link<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"listArticle"</span> resultMap<span class="token operator">=</span><span class="token string">"articleMap"</span><span class="token operator">&gt;</span>        select <span class="token operator">*</span> from ms_article        <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">&gt;</span></span>            <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"categoryId != null"</span><span class="token operator">&gt;</span>                and category_id<span class="token operator">=</span>#<span class="token punctuation">{</span>categoryId<span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"tagId != null"</span><span class="token operator">&gt;</span>                and id in <span class="token punctuation">(</span>select article_id from ms_article_tag where tag_id<span class="token operator">=</span>#<span class="token punctuation">{</span>tagId<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"year != null and year.length&gt;0 and month != null and month.length&gt;0"</span><span class="token operator">&gt;</span>                and <span class="token punctuation">(</span><span class="token function">FROM_UNIXTIME</span><span class="token punctuation">(</span>create_date<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'%Y'</span><span class="token punctuation">)</span> <span class="token operator">=</span>#<span class="token punctuation">{</span>year<span class="token punctuation">}</span> and <span class="token function">FROM_UNIXTIME</span><span class="token punctuation">(</span>create_date<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'%m'</span><span class="token punctuation">)</span><span class="token operator">=</span>#<span class="token punctuation">{</span>month<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">&gt;</span>        order by weight<span class="token punctuation">,</span>create_date desc    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-1-4-测试"><a href="#11-1-4-测试" class="headerlink" title="11.1.4 测试"></a>11.1.4 测试</h2><p>结果如下 <img src="https://img-blog.csdnimg.cn/5d87bddb2e8545bf955e6dcdeb3f3e5e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="11-2-统一缓存处理（优化）"><a href="#11-2-统一缓存处理（优化）" class="headerlink" title="11.2. 统一缓存处理（优化）"></a>11.2. 统一缓存处理（优化）</h1><p>内存的访问速度 远远大于 磁盘的访问速度 （1000倍起）  src/main/java/com/mszlu/blog/common/cache/Cache.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/main/java/com/mszlu/blog/common/cache/CacheAspect.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>digest<span class="token punctuation">.</span></span><span class="token class-name">DigestUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Signature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AliasFor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.mszlu.blog.common.cache.Cache)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Signature</span> signature <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//类名</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//调用的方法名</span>            <span class="token class-name">String</span> methodName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span>pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//参数</span>            <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    params <span class="token operator">+=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//加密 以防出现key过长以及字符转义获取不到的情况</span>                params <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取Cache注解</span>            <span class="token class-name">Cache</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Cache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//缓存过期时间</span>            <span class="token keyword">long</span> expire <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//缓存名称</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//先从redis获取</span>            <span class="token class-name">String</span> redisKey <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"::"</span> <span class="token operator">+</span> className<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"::"</span><span class="token operator">+</span>params<span class="token punctuation">;</span>            <span class="token class-name">String</span> redisValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>redisValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"走了缓存~~~,{},{}"</span><span class="token punctuation">,</span>className<span class="token punctuation">,</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>redisValue<span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Object</span> proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>proceed<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"存入缓存~~~ {},{}"</span><span class="token punctuation">,</span>className<span class="token punctuation">,</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token string">"系统错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"hot"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Cache</span><span class="token punctuation">(</span>expire <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"hot_article"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">hotArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> articleService<span class="token punctuation">.</span><span class="token function">hotArticle</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-3-思考别的优化"><a href="#11-3-思考别的优化" class="headerlink" title="11.3. 思考别的优化"></a>11.3. 思考别的优化</h1><ol><li><font color="blueviolet">文章可以放入es当中</font>，便于后续中文分词搜索。springboot教程有和es的整合</li><li><font color="red"> 评论数据，可以考虑放入mongodb当中 </font>电商系统当中 评论数据放入mongo中1.</li><li> 阅读数和评论数 ，<font color="cornflowerblue">考虑把阅读数和评论数 增加的时候 放入redis incr自增，使用定时任务 定时把数据固话到数据库当中</font></li><li>为了加快访问速度，部署的时候，可以把图片，js，css等放入<font color="orange">七牛云存储中</font>，加快网站访问速度</li><li>做一个后台 <font color="green">用springsecurity 做一个权限系统</font>，==对工作帮助比较大==</li></ol><p>将域名注册，备案，部署相关</p><h1 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h1><h1 id="12-1-搭建项目"><a href="#12-1-搭建项目" class="headerlink" title="12.1. 搭建项目"></a>12.1. 搭建项目</h1><h2 id="12-1-1-新建maven工程-blog-admin"><a href="#12-1-1-新建maven工程-blog-admin" class="headerlink" title="12.1.1 新建maven工程 blog-admin"></a>12.1.1 新建maven工程 blog-admin</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>blog-parent2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mszlu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>blog-admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 排除 默认使用的logback  --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- log4j2 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.76<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.10.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-1-2-配置"><a href="#12-1-2-配置" class="headerlink" title="12.1.2 配置"></a>12.1.2 配置</h2><p>application.properties:</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8889</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">mszlu_admin_blog</span><span class="token comment">#数据库的配置</span><span class="token comment"># datasource</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimeZone=UTC</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment">#mybatis-plus</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span class="token attr-name">mybatis-plus.global-config.db-config.table-prefix</span><span class="token punctuation">=</span><span class="token attr-value">ms_</span><span class="token comment"># 上传文件总的最大值</span><span class="token attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">20MB</span><span class="token comment"># 单个文件的最大值</span><span class="token attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">2MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis-plus配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.mszlu.blog.admin.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment">//分页插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-1-3-启动类"><a href="#12-1-3-启动类" class="headerlink" title="12.1.3 启动类"></a>12.1.3 启动类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JSONField</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AdminApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-1-4-导入前端工程"><a href="#12-1-4-导入前端工程" class="headerlink" title="12.1.4 导入前端工程"></a>12.1.4 导入前端工程</h2><p>放入resources下的static目录中，前端工程在资料中有</p><h2 id="12-1-5-新建表"><a href="#12-1-5-新建表" class="headerlink" title="12.1.5 新建表"></a>12.1.5 新建表</h2><p>后台管理用户表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ms_admin<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>权限表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ms_permission<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>path<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>description<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户和权限的关联表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ms_admin_permission<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>admin_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>permission_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-2-权限管理"><a href="#12-2-权限管理" class="headerlink" title="12.2. 权限管理"></a>12.2. 权限管理</h1><h2 id="12-2-1-Controller"><a href="#12-2-1-Controller" class="headerlink" title="12.2.1 Controller"></a>12.2.1 Controller</h2><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.controller;import com.mszlu.blog.admin.model.params.PageParam;import com.mszlu.blog.admin.pojo.Permission;import com.mszlu.blog.admin.service.PermissionService;import com.mszlu.blog.admin.vo.Result;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("admin")public class AdminController {    @Autowired    private PermissionService permissionService;    @PostMapping("permission/permissionList")    public Result permissionList(@RequestBody PageParam pageParam){        return permissionService.listPermission(pageParam);    }    @PostMapping("permission/add")    public Result add(@RequestBody Permission permission){        return permissionService.add(permission);    }    @PostMapping("permission/update")    public Result update(@RequestBody Permission permission){        return permissionService.update(permission);    }    @GetMapping("permission/delete/{id}")    public Result delete(@PathVariable("id") Long id){        return permissionService.delete(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.model.params;import lombok.Data;@Datapublic class PageParam {    private Integer currentPage;    private Integer pageSize;    private String queryString;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.pojo;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.annotation.TableId;import lombok.Data;@Datapublic class Permission {    @TableId(type = IdType.AUTO)    private Long id;    private String name;    private String path;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-2-2-Service"><a href="#12-2-2-Service" class="headerlink" title="12.2.2 Service"></a>12.2.2 Service</h2><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.service;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.mszlu.blog.admin.mapper.PermissionMapper;import com.mszlu.blog.admin.model.params.PageParam;import com.mszlu.blog.admin.pojo.Permission;import com.mszlu.blog.admin.vo.PageResult;import com.mszlu.blog.admin.vo.Result;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class PermissionService {    @Autowired    private PermissionMapper permissionMapper;    public Result listPermission(PageParam pageParam){        Page&lt;Permission&gt; page = new Page&lt;&gt;(pageParam.getCurrentPage(),pageParam.getPageSize());        LambdaQueryWrapper&lt;Permission&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();        if (StringUtils.isNotBlank(pageParam.getQueryString())) {            queryWrapper.eq(Permission::getName,pageParam.getQueryString());        }        Page&lt;Permission&gt; permissionPage = this.permissionMapper.selectPage(page, queryWrapper);        PageResult&lt;Permission&gt; pageResult = new PageResult&lt;&gt;();        pageResult.setList(permissionPage.getRecords());        pageResult.setTotal(permissionPage.getTotal());        return Result.success(pageResult);    }    public Result add(Permission permission) {        this.permissionMapper.insert(permission);        return Result.success(null);    }    public Result update(Permission permission) {        this.permissionMapper.updateById(permission);        return Result.success(null);    }    public Result delete(Long id) {        this.permissionMapper.deleteById(id);        return Result.success(null);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.mapper;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.mszlu.blog.admin.pojo.Permission;import java.util.List;public interface PermissionMapper extends BaseMapper&lt;Permission&gt; {    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.vo;import lombok.AllArgsConstructor;import lombok.Data;@Data@AllArgsConstructorpublic class Result {    private boolean success;    private int code;    private String msg;    private Object data;    public static Result success(Object data){        return new Result(true,200,"success",data);    }    public static Result fail(int code, String msg){        return new Result(false,code,msg,null);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.vo;import lombok.Data;import java.util.List;@Datapublic class PageResult&lt;T&gt; {    private List&lt;T&gt; list;    private Long total;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-2-3-测试"><a href="#12-2-3-测试" class="headerlink" title="12.2.3 测试"></a>12.2.3 测试</h2><h1 id="12-3-Security集成"><a href="#12-3-Security集成" class="headerlink" title="12.3. Security集成"></a>12.3. Security集成</h1><h2 id="12-3-1-添加依赖"><a href="#12-3-1-添加依赖" class="headerlink" title="12.3.1 添加依赖"></a>12.3.1 添加依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-3-2-配置"><a href="#12-3-2-配置" class="headerlink" title="12.3.2 配置"></a>12.3.2 配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationManagerBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>method<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableGlobalMethodSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">WebSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationFailureHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationSuccessHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>logout<span class="token punctuation">.</span></span><span class="token class-name">LogoutSuccessHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">BCryptPasswordEncoder</span> <span class="token function">bCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//加密策略 MD5 不安全 彩虹表  MD5 加盐</span>        <span class="token class-name">String</span> mszlu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"mszlu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mszlu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> web<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>web<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//开启登录认证</span><span class="token comment">//                .antMatchers("/user/findAll").hasRole("admin") //访问接口需要admin的角色</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/css/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/img/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/js/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/plugins/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"@authService.auth(request,authentication)"</span><span class="token punctuation">)</span> <span class="token comment">//自定义service 来去实现实时的权限认证</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/pages/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span> <span class="token comment">//自定义的登录页面</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token comment">//登录处理接口</span>                <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token comment">//定义登录时的用户名的key 默认为username</span>                <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token comment">//定义登录时的密码key，默认是password</span>                <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/pages/main.html"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">failureUrl</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//通过 不拦截，更加前面配的路径决定，这是指和登录表单相关的接口 都通过</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//退出登录配置</span>                <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span> <span class="token comment">//退出登录接口</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//退出登录的接口放行</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//csrf关闭 如果自定义登录 需要关闭</span>                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sameOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-3-3-登录认证"><a href="#12-3-3-登录认证" class="headerlink" title="12.3.3 登录认证"></a>12.3.3 登录认证</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">AdminMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Admin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityUserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AdminService</span> adminService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"username:{}"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当用户登录的时候，springSecurity 就会将请求 转发到此</span>        <span class="token comment">//根据用户名 查找用户，不存在 抛出异常，存在 将用户名，密码，授权列表 组装成springSecurity的User对象 并返回</span>        <span class="token class-name">Admin</span> adminUser <span class="token operator">=</span> adminService<span class="token punctuation">.</span><span class="token function">findAdminByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adminUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"用户名不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>adminUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//剩下的认证 就由框架帮我们完成</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">AdminMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">PermissionMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Admin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Permission</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AdminMapper</span> adminMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PermissionMapper</span> permissionMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Admin</span> <span class="token function">findAdminByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Admin</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Admin</span> adminUser <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adminUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Permission</span><span class="token punctuation">&gt;</span></span> <span class="token function">findPermissionsByAdminId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> adminId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> permissionMapper<span class="token punctuation">.</span><span class="token function">findPermissionsByAdminId</span><span class="token punctuation">(</span>adminId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Admin</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AdminMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mszlu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Permission</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PermissionMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Permission</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Permission</span><span class="token punctuation">&gt;</span></span> <span class="token function">findPermissionsByAdminId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> adminId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-3-4-权限认证"><a href="#12-3-4-权限认证" class="headerlink" title="12.3.4 权限认证"></a>12.3.4 权限认证</h2><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.service;import com.mszlu.blog.admin.mapper.AdminMapper;import com.mszlu.blog.admin.pojo.Admin;import com.mszlu.blog.admin.pojo.Permission;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Service;import javax.servlet.http.HttpServletRequest;import java.util.Collection;import java.util.List;@Service@Slf4jpublic class AuthService {    @Autowired    private AdminService adminService;    public boolean auth(HttpServletRequest request, Authentication authentication){  //权限认证，请求路径        String requestURI = request.getRequestURI();        log.info("request url:{}", requestURI);        //true代表放行 false 代表拦截        Object principal = authentication.getPrincipal();        if (principal == null || "anonymousUser".equals(principal)){            //未登录            return false;        }        UserDetails userDetails = (UserDetails) principal;        String username = userDetails.getUsername();        Admin admin = adminService.findAdminByUserName(username);        if (admin == null){            return false;        }        if (admin.getId() == 1){            //认为是超级管理员            return true;        }        List&lt;Permission&gt; permissions = adminService.findPermissionsByAdminId(admin.getId());        requestURI = StringUtils.split(requestURI,'?')[0];        for (Permission permission : permissions) {            if (requestURI.equals(permission.getPath())){                log.info("权限通过");                return true;            }        }        return false;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.mszlu.blog.admin.service;import org.springframework.security.core.GrantedAuthority;public class MySimpleGrantedAuthority implements GrantedAuthority {    private String authority;    private String path;    public MySimpleGrantedAuthority(){}    public MySimpleGrantedAuthority(String authority){        this.authority = authority;    }    public MySimpleGrantedAuthority(String authority,String path){        this.authority = authority;        this.path = path;    }    @Override    public String getAuthority() {        return authority;    }    public String getPath() {        return path;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!--MyBatis配置文件--&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.mszlu.blog.admin.mapper.PermissionMapper"&gt;    &lt;select id="findPermissionsByAdminId" parameterType="long" resultType="com.mszlu.blog.admin.pojo.Permission"&gt;        select * from ms_permission where id in (select permission_id from ms_admin_permission where admin_id=#{adminId})    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-4-作业"><a href="#12-4-作业" class="headerlink" title="12.4. 作业"></a>12.4. 作业</h1><p>添加角色，用户拥有多个角色，一个角色拥有多个权限</p><h1 id="13-总结技术亮点"><a href="#13-总结技术亮点" class="headerlink" title="13.总结技术亮点"></a>13.总结技术亮点</h1><p>1、jwt(==json web token==) + redis</p><p><font color="red">token令牌的登录方式，</font>访问认证速度快，session共享，安全性</p><p><font color="blueviolet">redis做了令牌和用户信息的对应管理</font>，</p><blockquote><ol><li><p>进一步增加了安全性  </p></li><li><p>登录用户做了缓存  </p></li><li><p>.灵活控制用户的过期（续期，踢掉线等）</p></li></ol></blockquote><p>2、threadLocal使用了保存用户信息，请求的线程之内，可以随时获取登录的用户，做了线程隔离</p><p>3、在使用完ThreadLocal之后，做了value的删除，防止了内存泄漏（这面试说强引用。弱引用。不是明摆着让面试官间JVM嘛）</p><p>4·、线程安全-update table set value = newValue where id=1 and value=oldValue</p><p>5、线程池应用非常广，面试<font color="cornflowerblue">7个核心参数</font>（对当前的主业务流程无影响的操作，放入线程池执行）</p><p>1.登录，记录日志</p><p>6·权限系统重点内容</p><p>7·统一日志记录，统一缓存处理</p><h1 id="14-前端"><a href="#14-前端" class="headerlink" title="14.前端"></a>14.前端</h1><p>先找到Home.vue,一般这里放主页 views文件夹一般存放页面 components文件夹一般存放vue自定义的组件 一般views用到各个组件</p><p>router文件夹存放路由，通过不同的路径跳转到不同的页面 store一般做存储用的 utils文件夹一般是工具类 request一般是请求 api就是跟后端的一些接口的定义 dist文件夹打包之后产生的静态页面 <img src="https://img-blog.csdnimg.cn/044af807c2074a03ab5400e802d98830.png" alt="在这里插入图片描述"></p><p> 首先看 config目录中的dev.env.js配置后端访问路径 <img src="https://img-blog.csdnimg.cn/9d7bd434bd9c4832a95a6ce15423289f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">部署生产环境 <img src="https://img-blog.csdnimg.cn/88a6c9cb65a84532bcd16fd4f9fcd640.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"> 再看static目录，category是图片路径 <img src="https://img-blog.csdnimg.cn/e74469e082de45bb84247f69a4befd3d.png" alt="在这里插入图片描述"> 在数据库中这样配置 <img src="https://img-blog.csdnimg.cn/60969ea981e6468aac29a7dd878e8044.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"> 再看src目录 <img src="https://img-blog.csdnimg.cn/036a9496a1ef4451aab1671660a2678b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"> api表示后端接口访问的定义，囊括了所有后端的访问接口</p><p>以api文件夹下的article.js为例子</p><pre class="line-numbers language-none"><code class="language-none">import request from '@/request'export function getArticles(query, page) {  return request({    url: '/articles',//访问路径    method: 'post',//访问方式post    //传递参数    data: {      page: page.pageNumber,      pageSize: page.pageSize,      name: page.name,      sort: page.sort,      year: query.year,      month: query.month,      tagId: query.tagId,      categoryId: query.categoryId    }  })}export function getHotArtices() {  return request({    url: '/articles/hot',//接口路径的名称也可以随意更改    method: 'post'//访问方式，想改成get直接修改即可  })}export function getNewArtices() {  return request({    url: '/articles/new',    method: 'post'  })}export function viewArticle(id) {  return request({    url: `/articles/view/${id}`,    method: 'post'  })}export function getArticlesByCategory(id) {  return request({    url: `/articles/category/${id}`,    method: 'post'  })}export function getArticlesByTag(id) {  return request({    url: `/articles/tag/${id}`,    method: 'post'  })}export function publishArticle(article,token) {  return request({    headers: {'Authorization': token},    url: '/articles/publish',    method: 'post',    data: article  })}export function listArchives() {  return request({    url: '/articles/listArchives',    method: 'post'  })}export function getArticleById(id) {  return request({    url: `/articles/${id}`,    method: 'post'  })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在login.js文件中</p><pre class="line-numbers language-none"><code class="language-none">import request from '@/request'export function login(account, password) {  const data = {    account,    password  }  return request({    url: '/login',    method: 'post',    data  })}export function logout(token) {  return request({    headers: {'Authorization': token},//在后端通过headers获取token    url: '/logout',    method: 'get'  })}export function getUserInfo(token) {  return request({    headers: {'Authorization': token},    url: '/users/currentUser',    method: 'get'  })}export function register(account, nickname, password) {  const data = {    account,    nickname,    password  }  return request({    url: '/register',    method: 'post',    data  })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在home.vue文件夹中</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div id="home"&gt;    &lt;el-container&gt;        &lt;base-header :activeIndex="activeIndex"&gt;&lt;/base-header&gt;//头    &lt;router-view class="me-container"/&gt;//容器  &lt;base-footer v-show="footerShow"&gt;&lt;/base-footer&gt;//尾  &lt;/el-container&gt;  &lt;/div&gt;  &lt;/template&gt;&lt;script&gt;//components对应components目录，views对应views目录import BaseFooter from '@/components/BaseFooter'import BaseHeader from '@/views/BaseHeader'export default {  name: 'Home',  data (){  return {  activeIndex: '/',  footerShow:true  }  },  components:{  'base-header':BaseHeader,  'base-footer':BaseFooter  },  beforeRouteEnter (to, from, next){   next(vm =&gt; {    vm.activeIndex = to.path  })  },  beforeRouteUpdate (to, from, next) {  if(to.path == '/'){  this.footerShow = true  }else{  this.footerShow = false  }  this.activeIndex = to.path  next()}}&lt;/script&gt;&lt;style&gt;.me-container{  margin: 100px auto 140px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>components文件夹下的src\components\BaseFooter.vue文件夹</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;el-footer class="me-area"&gt;    &lt;div class="me-footer"&gt;      &lt;p&gt;Designed by        &lt;strong&gt;          &lt;router-link to="/" class="me-login-design-color"&gt;码神之路&lt;/router-link&gt;        &lt;/strong&gt;      &lt;/p&gt;    &lt;/div&gt;  &lt;/el-footer&gt;&lt;/template&gt;&lt;script&gt;  export default {    name: 'BaseFooter',    data() {      return {}    },    methods: {},    mounted() {    }  }&lt;/script&gt;&lt;style&gt;  .el-footer {    min-width: 100%;    box-shadow: 0 -2px 3px hsla(0, 0%, 7%, .1), 0 0 0 1px hsla(0, 0%, 7%, .1);    position: absolute;    bottom: 0;    left: 0;    z-index: 1024;  }  .me-footer {    text-align: center;    line-height: 60px;    font-family: 'Open Sans', sans-serif;    font-size: 18px;  }  .me-login-design-color {    color: #5FB878 !important;  }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应图片最下方 <img src="https://img-blog.csdnimg.cn/b4d8b9ca10c445fa892a4185498ab4f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">src\views\BaseHeader.vue文件头</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;el-header class="me-area"&gt;    &lt;el-row class="me-header"&gt;      &lt;el-col :span="4" class="me-header-left"&gt;        &lt;router-link to="/" class="me-title"&gt;          &lt;img src="../assets/img/logo.png" /&gt;        &lt;/router-link&gt;      &lt;/el-col&gt;      &lt;el-col v-if="!simple" :span="16"&gt;        &lt;el-menu :router=true menu-trigger="click" active-text-color="#5FB878" :default-active="activeIndex"                 mode="horizontal"&gt;          &lt;el-menu-item index="/"&gt;首页&lt;/el-menu-item&gt;          &lt;el-menu-item index="/category/all"&gt;文章分类&lt;/el-menu-item&gt;          &lt;el-menu-item index="/tag/all"&gt;标签&lt;/el-menu-item&gt;          &lt;el-menu-item index="/archives"&gt;文章归档&lt;/el-menu-item&gt;          &lt;el-col :span="4" :offset="4"&gt;            &lt;el-menu-item index="/write"&gt;&lt;i class="el-icon-edit"&gt;&lt;/i&gt;写文章&lt;/el-menu-item&gt;          &lt;/el-col&gt;        &lt;/el-menu&gt;      &lt;/el-col&gt;      &lt;template v-else&gt;        &lt;slot&gt;&lt;/slot&gt;      &lt;/template&gt;      &lt;el-col :span="4"&gt;        &lt;el-menu :router=true menu-trigger="click" mode="horizontal" active-text-color="#5FB878"&gt;          &lt;template v-if="!user.login"&gt;            &lt;el-menu-item index="/login"&gt;              &lt;el-button type="text"&gt;登录&lt;/el-button&gt;            &lt;/el-menu-item&gt;            &lt;el-menu-item index="/register"&gt;              &lt;el-button type="text"&gt;注册&lt;/el-button&gt;            &lt;/el-menu-item&gt;          &lt;/template&gt;          &lt;template v-else&gt;            &lt;el-submenu index&gt;              &lt;template slot="title"&gt;                &lt;img class="me-header-picture" :src="user.avatar"/&gt;//头像获取              &lt;/template&gt;              &lt;el-menu-item index @click="logout"&gt;&lt;i class="el-icon-back"&gt;&lt;/i&gt;退出&lt;/el-menu-item&gt;            &lt;/el-submenu&gt;          &lt;/template&gt;        &lt;/el-menu&gt;      &lt;/el-col&gt;    &lt;/el-row&gt;  &lt;/el-header&gt;&lt;/template&gt;&lt;script&gt;  export default {    name: 'BaseHeader',    props: {      activeIndex: String,      simple: {        type: Boolean,        default: false      }    },    data() {      return {}    },    computed: {      user() {        let login = this.$store.state.account.length != 0        let avatar = this.$store.state.avatar        return {          login, avatar        }      }    },    methods: {      logout() {        let that = this        this.$store.dispatch('logout').then(() =&gt; {          this.$router.push({path: '/'})        }).catch((error) =&gt; {          if (error !== 'error') {            that.$message({message: error, type: 'error', showClose: true});          }        })      }    }  }&lt;/script&gt;&lt;style&gt;  .el-header {    position: fixed;    z-index: 1024;    min-width: 100%;    box-shadow: 0 2px 3px hsla(0, 0%, 7%, .1), 0 0 0 1px hsla(0, 0%, 7%, .1);  }  .me-title {    margin-top: 10px;    font-size: 24px;  }  .me-header-left {    margin-top: 10px;  }  .me-title img {    max-height: 2.4rem;    max-width: 100%;  }  .me-header-picture {    width: 36px;    height: 36px;    border: 1px solid #ddd;    border-radius: 50%;    vertical-align: middle;    background-color: #5fb878;  }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应图片最上方 <img src="https://img-blog.csdnimg.cn/096a5883f6fa4c76b033b07edf2ee97a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"> BaseHeader.vue中的logout本质上调用store文件夹下的index.js文件 <img src="https://img-blog.csdnimg.cn/551ffd8306064756b3aea8629c615481.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGptXzk5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/03/hello-world/"/>
      <url>/2022/01/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM 学习笔记（三）类加载与字节码技术&amp;内存模型</title>
      <link href="/2022/01/03/JVM%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%8A%80%E6%9C%AF&amp;%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/01/03/JVM%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%8A%80%E6%9C%AF&amp;%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-学习笔记（三）类加载与字节码技术-amp-内存模型"><a href="#JVM-学习笔记（三）类加载与字节码技术-amp-内存模型" class="headerlink" title="JVM 学习笔记（三）类加载与字节码技术&amp;内存模型"></a>JVM 学习笔记（三）类加载与字节码技术&amp;内存模型</h1><h1 id="四、类加载与字节码技术"><a href="#四、类加载与字节码技术" class="headerlink" title="四、类加载与字节码技术"></a>四、类加载与字节码技术</h1><img src="https://img-blog.csdnimg.cn/20210210200506952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="1、类文件结构"><a href="#1、类文件结构" class="headerlink" title="1、类文件结构"></a>1、类文件结构</h2><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202112141036027.png" alt="image-20211214103606934"></p><p>通过<code> javac 类名.java</code> 编译 java 文件后，会生成一个<code>xxx.class</code>的文件！ 以下是字节码文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0000000 ca fe ba be 00 00 00 <span class="token number">34</span> 00 <span class="token number">23</span> 0a 00 06 00 <span class="token number">15</span> 09 0000020 00 <span class="token number">16</span> 00 <span class="token number">17</span> 08 00 <span class="token number">18</span> 0a 00 <span class="token number">19</span> 00 1a 07 00 1b 07 0000040 00 1c 01 00 06 3c <span class="token number">69</span> 6e <span class="token number">69</span> <span class="token number">74</span> 3e 01 00 03 <span class="token number">28</span> <span class="token number">29</span> 0000060 <span class="token number">56</span> 01 00 04 <span class="token number">43</span> 6f <span class="token number">64</span> <span class="token number">65</span> 01 00 0f 4c <span class="token number">69</span> 6e <span class="token number">65</span> 4e 0000100 <span class="token number">75</span> 6d <span class="token number">62</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">54</span> <span class="token number">61</span> <span class="token number">62</span> 6c <span class="token number">65</span> 01 00 <span class="token number">12</span> 4c 6f <span class="token number">63</span> 0000120 <span class="token number">61</span> 6c <span class="token number">56</span> <span class="token number">61</span> <span class="token number">72</span> <span class="token number">69</span> <span class="token number">61</span> <span class="token number">62</span> 6c <span class="token number">65</span> <span class="token number">54</span> <span class="token number">61</span> <span class="token number">62</span> 6c <span class="token number">65</span> 01 0000140 00 04 <span class="token number">74</span> <span class="token number">68</span> <span class="token number">69</span> <span class="token number">73</span> 01 00 1d 4c <span class="token number">63</span> 6e 2f <span class="token number">69</span> <span class="token number">74</span> <span class="token number">63</span> 0000160 <span class="token number">61</span> <span class="token number">73</span> <span class="token number">74</span> 2f 6a <span class="token number">76</span> 6d 2f <span class="token number">74</span> <span class="token number">35</span> 2f <span class="token number">48</span> <span class="token number">65</span> 6c 6c 6f 0000200 <span class="token number">57</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span> 3b 01 00 04 6d <span class="token number">61</span> <span class="token number">69</span> 6e 01 00 <span class="token number">16</span> 0000220 <span class="token number">28</span> 5b 4c 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> 0000240 <span class="token number">69</span> 6e <span class="token number">67</span> 3b <span class="token number">29</span> <span class="token number">56</span> 01 00 04 <span class="token number">61</span> <span class="token number">72</span> <span class="token number">67</span> <span class="token number">73</span> 01 00 <span class="token number">13</span> 0000260 5b 4c 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">69</span> 0000300 6e <span class="token number">67</span> 3b 01 00 <span class="token number">10</span> 4d <span class="token number">65</span> <span class="token number">74</span> <span class="token number">68</span> 6f <span class="token number">64</span> <span class="token number">50</span> <span class="token number">61</span> <span class="token number">72</span> <span class="token number">61</span> 0000320 6d <span class="token number">65</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">73</span> 01 00 0a <span class="token number">53</span> 6f <span class="token number">75</span> <span class="token number">72</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">46</span> 0000340 <span class="token number">69</span> 6c <span class="token number">65</span> 01 00 0f <span class="token number">48</span> <span class="token number">65</span> 6c 6c 6f <span class="token number">57</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span>0000360 2e 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 0c 00 07 00 08 07 00 1d 0c 00 1e 0000400 00 1f 01 00 0b <span class="token number">68</span> <span class="token number">65</span> 6c 6c 6f <span class="token number">20</span> <span class="token number">77</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span> 0000420 07 00 <span class="token number">20</span> 0c 00 <span class="token number">21</span> 00 <span class="token number">22</span> 01 00 1b <span class="token number">63</span> 6e 2f <span class="token number">69</span> <span class="token number">74</span> 0000440 <span class="token number">63</span> <span class="token number">61</span> <span class="token number">73</span> <span class="token number">74</span> 2f 6a <span class="token number">76</span> 6d 2f <span class="token number">74</span> <span class="token number">35</span> 2f <span class="token number">48</span> <span class="token number">65</span> 6c 6c 0000460 6f <span class="token number">57</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span> 01 00 <span class="token number">10</span> 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 0000500 6e <span class="token number">67</span> 2f 4f <span class="token number">62</span> 6a <span class="token number">65</span> <span class="token number">63</span> <span class="token number">74</span> 01 00 <span class="token number">10</span> 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 0000520 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> 6d 01 00 03 6f 0000540 <span class="token number">75</span> <span class="token number">74</span> 01 00 <span class="token number">15</span> 4c 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f <span class="token number">69</span> 6f 2f <span class="token number">50</span> <span class="token number">72</span> 0000560 <span class="token number">69</span> 6e <span class="token number">74</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">61</span> 6d 3b 01 00 <span class="token number">13</span> 6a <span class="token number">61</span> <span class="token number">76</span> 0000600 <span class="token number">61</span> 2f <span class="token number">69</span> 6f 2f <span class="token number">50</span> <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">74</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">61</span> 6d 0000620 01 00 07 <span class="token number">70</span> <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">74</span> 6c 6e 01 00 <span class="token number">15</span> <span class="token number">28</span> 4c 6a 0000640 <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">67</span> 3b 0000660 <span class="token number">29</span> <span class="token number">56</span> 00 <span class="token number">21</span> 00 05 00 06 00 00 00 00 00 02 00 01 0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 0001000 0f 00 02 00 09 00 00 00 <span class="token number">37</span> 00 02 00 01 00 00 00 0001020 09 b2 00 02 <span class="token number">12</span> 03 b6 00 04 b1 00 00 00 02 00 0a 0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b 0001060 00 00 00 0c 00 01 00 00 00 09 00 <span class="token number">10</span> 00 <span class="token number">11</span> 00 00 0001100 00 <span class="token number">12</span> 00 00 00 05 01 00 <span class="token number">10</span> 00 00 00 01 00 <span class="token number">13</span> 00 0001120 00 00 02 00 <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==根据 JVM 规范，类文件结构如下：==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">classFile<span class="token punctuation">{</span>    u4    magic<span class="token comment">//魔数</span>    u2             minor_version<span class="token punctuation">;</span>    <span class="token comment">//小版本号</span>    u2             major_version<span class="token punctuation">;</span>    <span class="token comment">//主版本号</span>    u2             constant_pool_count<span class="token punctuation">;</span>    <span class="token comment">//常量池信息</span>    cp_info        constant_pool<span class="token punctuation">[</span>constant_pool_count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//~</span>    u2             access_flags<span class="token punctuation">;</span>    <span class="token comment">// 返回修饰</span>    u2             this_class<span class="token punctuation">;</span>    <span class="token comment">//类</span>    u2             super_class<span class="token punctuation">;</span>   <span class="token comment">//父类</span>    u2             interfaces_count<span class="token punctuation">;</span>    <span class="token comment">//接口信息</span>    u2             interfaces<span class="token punctuation">[</span>interfaces_count<span class="token punctuation">]</span><span class="token punctuation">;</span>       u2             fields_count<span class="token punctuation">;</span>    <span class="token comment">//变量信息</span>    field_info     fields<span class="token punctuation">[</span>fields_count<span class="token punctuation">]</span><span class="token punctuation">;</span>       u2             methods_count<span class="token punctuation">;</span>    <span class="token comment">//方法信息</span>    method_info    methods<span class="token punctuation">[</span>methods_count<span class="token punctuation">]</span><span class="token punctuation">;</span>        u2             attributes_count<span class="token punctuation">;</span>    <span class="token comment">//类附加属性信息</span>    attribute_info attributes<span class="token punctuation">[</span>attributes_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1）魔数"><a href="#1）魔数" class="headerlink" title="1）魔数"></a>1）魔数</h3><p><code>u4 magic </code>对应字节码文件的 0~3 个字节 0000000 <font color="red">ca fe ba be</font> 00 00 00 34 00 23 0a 00 06 00 15 09 </p><p><code>ca fe ba be</code> ：意思是 <code>.class 文件</code>，不同的东西有不同的魔数，比如 jpg、png 图片等！</p><h3 id="2）版本"><a href="#2）版本" class="headerlink" title="2）版本"></a>2）版本</h3><p><code>u2 minor_version</code>; <code>u2 major_version</code>; 0000000 ca fe ba be<font color="red"> 00 00 00 34</font> 00 23 0a 00 06 00 15 09 00 00 <font color="cblue">00 34：34H（16进制） = 52（10进制），代表JDK8</font></p><h3 id="3）常量池"><a href="#3）常量池" class="headerlink" title="3）常量池"></a>3）常量池</h3><blockquote><p>常量池长度</p></blockquote><p>0000000 ca fe ba be 00 00 00 34<font color="red"> 00 23</font> 0a 00 06 00 15 09</p><blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202112141042631.png" alt="image-20211214104257555"></p></blockquote><p>0000000 ca fe ba be 00 00 00 34 00 23<font color="red"> 0a 00 06 00 15</font> 09</p><blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202112141043236.png" alt="image-20211214104329168"></p></blockquote><p>0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 <font color="red">09</font></p><p><strong>… 参考文档</strong> </p><h2 id="2、字节码指令"><a href="#2、字节码指令" class="headerlink" title="2、字节码指令"></a>2、字节码指令</h2><p>可参考： </p><h3 id="1）javap-工具"><a href="#1）javap-工具" class="headerlink" title="1）javap 工具"></a>1）javap 工具</h3><p>Java 中提供了 javap 工具来<font color="cblue">反编译 class 文件</font></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">javap -v D:Demo.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2）图解方法执行流程"><a href="#2）图解方法执行流程" class="headerlink" title="2）图解方法执行流程"></a>2）图解方法执行流程</h3><p><strong>代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3_1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>==常量池载入运行时常量池==</strong> 常量池也属于方法区，只不过这里单独提出来了</p><blockquote><p><code>short</code>范围内的值<font color="red">与字节码指令存储在一起</font>,但超出<code>short</code>范围内的值<font color="cblue">存储在常量池中</font></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210210230332114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> ==<strong>方法字节码载入方法区</strong>== </p><p>（stack=2，locals=4） </p><p>对应操作数栈(<font color="blue">栈帧中的蓝色水槽</font>)有 <code>2 </code>个空间（每个空间 <code>4 个字节</code>），局部变量表(<font color="blue">栈帧中的绿色水槽</font>)中有 <code>4 个槽位</code>。 <img src="https://img-blog.csdnimg.cn/20210210230419340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong>执行引擎开始执行字节码</strong> </p><p><strong><code>bipush 10</code></strong></p><ul><li><p>将一个 byte 压入操作数栈（其长度<font color="cblue">会补齐 4 个字节</font>），类似的指令还有 </p></li><li><p><code> sipush</code> 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</p></li><li><p><code>ldc</code> 将一个 int 压入操作数栈</p></li><li><p><code> ldc2_w</code> 将一个 long 压入操作数栈（<strong>分两次压入</strong>，因为<font color="cblue"> long 是 8 个字节</font>）</p></li><li><p>这里==小的数字都是和字节码指令存在一起，<strong>超过 short 范围的数字存入了常量池</strong>==</p><img src="https://img-blog.csdnimg.cn/20210210230611776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <p><strong><code>istore 1</code></strong> </p><p>将操作数栈栈顶元素弹出，放入局部变量表的 <code>slot 1</code> 中 对应代码中的 <code>a = 10 </code><img src="https://img-blog.csdnimg.cn/20210210230717611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>ldc #3</code></strong> </p><p>读取运行时常量池中<code> #3</code> ，即 32768 (超过 short 最大值范围的数会被放到<font color="blue">运行时常量池中</font>)，将其加载到操作数栈中 注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的。 <img src="https://img-blog.csdnimg.cn/20210210230918171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>istore 2</code></strong> 将操作数栈中的元素弹出，放到局部变量表的<code>2</code>号位置 </p><p><img src="https://img-blog.csdnimg.cn/20210210231005919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <strong><code>iload1</code> <code> iload2</code></strong> 将局部变量表中 <code>1 号</code>位置和 <code>2 号</code>位置的元素放入<font color="orange">操作数栈</font>中。因为只能在操作数栈中执行运算操作 <img src="https://img-blog.csdnimg.cn/20210210231211695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>iadd</code></strong> </p><p>将操作数栈中的两个元素弹出栈并相加，结果在压入操作数栈中。 <img src="https://img-blog.csdnimg.cn/20210210231236404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>istore 3</code></strong> 将操作数栈中的元素弹出，放入局部变量表的<code>3号</code>位置。 <img src="https://img-blog.csdnimg.cn/20210210231319967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>getstatic #4</code></strong> 在运行时常量池中找到 <code>#4</code> ，发现是一个对象，在堆内存中找到该对象，并将其<font color="red">引用</font>放入操作数栈中 <img src="https://img-blog.csdnimg.cn/20210210231759663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210210231827339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>iload 3</code></strong> 将局部变量表中 <code>3 号</code>位置的元素压入操作数栈中。 <img src="https://img-blog.csdnimg.cn/20210210232008706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>invokevirtual #5</code></strong> 找到常量池 <code>#5</code> 项，定位到方法区 <code>java/io/PrintStream.println:(I)V </code>方法 生成新的栈帧（分配 <code>locals</code>、<code>stack</code>等） 传递参数，执行新栈帧中的字节码 <img src="https://img-blog.csdnimg.cn/20210210232148931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>执行完毕，弹出栈帧 清除 main 操作数栈内容 <img src="https://img-blog.csdnimg.cn/20210210232228908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong><code>return</code></strong> 完成 main 方法调用，弹出 main 栈帧，程序结束</p></li></ul><h3 id="3）通过字节码指令分析问题"><a href="#3）通过字节码指令分析问题" class="headerlink" title="3）通过字节码指令分析问题"></a>3）通过字节码指令分析问题</h3><p>代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_11_ByteCodeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么最终的 x 结果为 0 呢？ 通过分析字节码指令即可知晓</p><pre class="line-numbers language-none"><code class="language-none">Code:     stack=2, locals=3, args_size=1// 操作数栈分配2个空间，局部变量表分配 3 个空间        0: iconst_0// 准备一个常数 0        1: istore_1// 将常数 0 放入局部变量表的 1 号槽位 i = 0        2: iconst_0// 准备一个常数 0        3: istore_2// 将常数 0 放入局部变量的 2 号槽位 x = 0        4: iload_1// 将局部变量表 1 号槽位的数放入操作数栈中        5: bipush        10// 将数字 10 放入操作数栈中，此时操作数栈中有 2 个数        7: if_icmpge     21// 比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到 21 。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空       10: iload_2// 将局部变量 2 号槽位的数放入操作数栈中，放入的值是 0        11: iinc          2, 1// 将局部变量 2 号槽位的数加 1 ，自增后，槽位中的值为 1        14: istore_2//将操作数栈中的数放入到局部变量表的 2 号槽位，2 号槽位的值又变为了0       15: iinc          1, 1 // 1 号槽位的值自增 1        18: goto          4 // 跳转到第4条指令       21: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;       24: iload_2       25: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V       28: return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）构造方法"><a href="#4）构造方法" class="headerlink" title="4）构造方法"></a>4）构造方法</h3><blockquote><p><span class="github-emoji"><span>🏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>两种</p><ul><li><code>clinit()v</code></li><li><code>init()V</code></li></ul></blockquote><p>==<strong>clinit()V</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_12_clinitTest</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会按==从上至下的顺序==，<font color="red">收集所有 static 静态代码块和静态成员赋值的代码，合并为一个特殊的方法 </font> <code>clinit()V</code>：</p><pre class="line-numbers language-none"><code class="language-none">stack=1, locals=0, args_size=0         0: bipush        10         2: putstatic     #3                  // Field i:I         5: bipush        20         7: putstatic     #3                  // Field i:I        10: bipush        30        12: putstatic     #3                  // Field i:I        15: return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==<strong>init()V</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_13_InitTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"s1"</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>        b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token string">"s2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Code_13_InitTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Code_13_InitTest</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Code_13_InitTest</span><span class="token punctuation">(</span><span class="token string">"s3"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 30</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会按==从上至下的顺序==，<font color="red">收集所有 {} 代码块和成员变量赋值的代码，形成新的构造方法</font>，<font color="cblue">但原始构造方法内的代码总是在后.</font></p><pre class="line-numbers language-none"><code class="language-none">Code:     stack=2, locals=3, args_size=3        0: aload_0        1: invokespecial #1                  // Method java/lang/Object.&lt;init&gt;":()V        4: aload_0        5: ldc           #2                  // String s1        7: putfield      #3                  // Field a:Ljava/lang/String;       10: aload_0       11: bipush        20       13: putfield      #4                  // Field b:I       16: aload_0       17: bipush        10       19: putfield      #4                  // Field b:I       22: aload_0       23: ldc           #5                  // String s2       25: putfield      #3                  // Field a:Ljava/lang/String;       // 原始构造方法在最后执行       28: aload_0       29: aload_1       30: putfield      #3                  // Field a:Ljava/lang/String;       33: aload_0       34: iload_2       35: putfield      #4                  // Field b:I       38: return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5）方法调用"><a href="#5）方法调用" class="headerlink" title="5）方法调用"></a>5）方法调用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_14_MethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Code_14_MethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Code_14_MethodTest</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Code_14_MethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Code_14_MethodTest</span><span class="token punctuation">.</span><span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="cblue">不同方法在调用时，对应的虚拟机指令有所区别</font></p><ul><li>==私有==、==构造==、==被 final 修饰的方法==，在调用时都使用<code> invokespecial</code> 指令- </li><li>==普通成员方法==在调用时，使用<code>invokevirtual</code>指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定</li><li>==静态方法==在调用时使用 <code>invokestatic </code>指令<pre class="line-numbers language-none"><code class="language-none">Code:      stack=2, locals=2, args_size=1         0: new           #2                  //         3: dup   // 复制一份对象地址压入操作数栈中         4: invokespecial #3                  // Method &lt;init&gt;":()V         7: astore_1         8: aload_1         9: invokespecial #4                  // Method test1:()V        12: aload_1        13: invokespecial #5                  // Method test2:()V        16: aload_1        17: invokevirtual #6                  // Method test3:()V        20: invokestatic  #7                  // Method test4:()V        23: return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>new</code> 是创建【对象】，给对象分配堆内存，执行成功会将【对象引用】压入操作数栈</li><li> <code>dup</code> 是赋值操作数栈栈顶的内容，本例即为【对象引用】，为什么需要两份引用呢，一个是要配合 <code>invokespecial </code>调用该对象的构造方法<code>“init”: ()V</code>（会消耗掉栈顶一个引用），另一个要 配合 astore_1 赋值给局部变量- </li><li>==终方法（ﬁnal），私有方法（private），构造方法==都是由 <code>invokespecial </code>指令来调用，属于静态绑定</li><li>==普通成员==方法是由<code>invokevirtual</code>调用，属于动态绑定，即支持多态 成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】<h3 id="6）多态原理"><a href="#6）多态原理" class="headerlink" title="6）多态原理"></a>6）多态原理</h3></li></ul><p>因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用<code>invokevirtual</code>指令 在执行 invokevirtual 指令时，经历了以下几个步骤</p><ul><li>先通过栈帧中<font color="red">对象的引用找到对象</font></li><li><font color="cblue">分析对象头</font>，<font color="cblue">找到对象实际的 Class</font></li><li>Class 结构中有<font color="blue"> vtable</font></li><li>查询 vtable <font color="orange">找到方法的具体地址</font></li><li><font color="cyan">执行方法的字节码</font><h3 id="7）异常处理"><a href="#7）异常处理" class="headerlink" title="7）异常处理"></a>7）异常处理</h3></li></ul><p>==<strong>try-catch</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_15_TryCatchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应字节码指令</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">Code<span class="token punctuation">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>        <span class="token number">0</span><span class="token punctuation">:</span> iconst_0        <span class="token number">1</span><span class="token punctuation">:</span> istore_1        <span class="token number">2</span><span class="token punctuation">:</span> bipush        <span class="token number">10</span>        <span class="token number">4</span><span class="token punctuation">:</span> istore_1        <span class="token number">5</span><span class="token punctuation">:</span> goto          <span class="token number">12</span>        <span class="token number">8</span><span class="token punctuation">:</span> astore_2        <span class="token number">9</span><span class="token punctuation">:</span> bipush        <span class="token number">20</span>       <span class="token number">11</span><span class="token punctuation">:</span> istore_1       <span class="token number">12</span><span class="token punctuation">:</span> <span class="token keyword">return</span>     <span class="token comment">//多出来一个异常表</span>     Exception table<span class="token punctuation">:</span>        <span class="token keyword">from</span>    to  target type            <span class="token number">2</span>     <span class="token number">5</span>     <span class="token number">8</span>   Class java<span class="token operator">/</span>lang<span class="token operator">/</span>Exception<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>可以看到多出来一个 Exception table 的结构，<code>[from, to) </code>是<font color="red">前闭后开</font>（也就是检测 2~4 行）的检测范围，一旦这个范围内的字节码执行出现异常，<font color="cblue">则通过 type 匹配异常类型</font>，如果一致，进入 target 所指示行号</p></li><li><p><code>8</code>行的字节码指令 <code>astore_2 </code>是将异常对象引用存入局部变量表的<code> 2 号</code>位置（为<code>e</code>）</p><p>==<strong>多个 single-catch</strong>==</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_16_MultipleCatchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码</p><pre class="line-numbers language-none"><code class="language-none">Code:     stack=1, locals=3, args_size=1        0: iconst_0        1: istore_1        2: bipush        10        4: istore_1        5: goto          19        8: astore_2        9: bipush        20       11: istore_1       12: goto          19       15: astore_2       16: bipush        30       18: istore_1       19: return     Exception table:        from    to  target type            2     5     8   Class java/lang/ArithmeticException            2     5    15   Class java/lang/Exception<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>因为异常出现时，只能进入 <code>Exception table </code>中一个分支，所以局部变量表<font color="blue"> slot 2 位置被共用</font></p><p>==<strong>finally</strong>==</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_17_FinallyTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应字节码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>        <span class="token number">0</span><span class="token operator">:</span> iconst_0        <span class="token number">1</span><span class="token operator">:</span> istore_1        <span class="token comment">// try块</span>        <span class="token number">2</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">4</span><span class="token operator">:</span> istore_1        <span class="token comment">// try块执行完后，会执行finally    </span>        <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">30</span>        <span class="token number">7</span><span class="token operator">:</span> istore_1        <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">27</span>       <span class="token comment">// catch块     </span>       <span class="token number">11</span><span class="token operator">:</span> astore_2 <span class="token comment">// 异常信息放入局部变量表的2号槽位</span>       <span class="token number">12</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">14</span><span class="token operator">:</span> istore_1       <span class="token comment">// catch块执行完后，会执行finally        </span>       <span class="token number">15</span><span class="token operator">:</span> bipush        <span class="token number">30</span>       <span class="token number">17</span><span class="token operator">:</span> istore_1       <span class="token number">18</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">27</span>       <span class="token comment">// 出现异常，但未被 Exception 捕获，会抛出其他异常，这时也需要执行 finally 块中的代码   </span>       <span class="token number">21</span><span class="token operator">:</span> astore_3       <span class="token number">22</span><span class="token operator">:</span> bipush        <span class="token number">30</span>       <span class="token number">24</span><span class="token operator">:</span> istore_1       <span class="token number">25</span><span class="token operator">:</span> aload_3       <span class="token number">26</span><span class="token operator">:</span> athrow  <span class="token comment">// 抛出异常</span>       <span class="token number">27</span><span class="token operator">:</span> <span class="token keyword">return</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">2</span>     <span class="token number">5</span>    <span class="token number">11</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>            <span class="token number">2</span>     <span class="token number">5</span>    <span class="token number">21</span>   any           <span class="token number">11</span>    <span class="token number">15</span>    <span class="token number">21</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 ﬁnally 中的代码被复制了 <code>3 份</code>，分别放入<font color="red"> try 流程</font>，<font color="cblue">catch 流程</font>以及<font color="blue"> catch 剩余的异常类型流程</font> </p><p>注意：虽然从字节码指令看来，每个块中都有 finally 块，<font color="red">但是 finally 块中的代码只会被执行一次</font></p><p><strong>finally 中的 return</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_18_FinallyReturnTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Code_18_FinallyReturnTest</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 结果为 20</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应字节码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>        <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">2</span><span class="token operator">:</span> istore_0        <span class="token number">3</span><span class="token operator">:</span> iload_0        <span class="token number">4</span><span class="token operator">:</span> istore_1  <span class="token comment">// 暂存返回值</span>        <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">20</span>        <span class="token number">7</span><span class="token operator">:</span> istore_0        <span class="token number">8</span><span class="token operator">:</span> iload_0        <span class="token number">9</span><span class="token operator">:</span> ireturn<span class="token comment">// ireturn 会返回操作数栈顶的整型值 20</span>       <span class="token comment">// 如果出现异常，还是会执行finally 块中的内容，没有抛出异常</span>       <span class="token number">10</span><span class="token operator">:</span> astore_2       <span class="token number">11</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">13</span><span class="token operator">:</span> istore_0       <span class="token number">14</span><span class="token operator">:</span> iload_0       <span class="token number">15</span><span class="token operator">:</span> ireturn<span class="token comment">// 这里没有 athrow 了，也就是如果在 finally 块中如果有返回操作的话，且 try 块中出现异常，会吞掉异常！</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">0</span>     <span class="token number">5</span>    <span class="token number">10</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>由于 ﬁnally 中的 ireturn 被插入了所有可能的流程，因此返回结果肯定以==ﬁnally的为准==- </p></li><li><p>至于字节码中第<code> 2 行</code>，似乎没啥用，且留个伏笔，看下个例子- </p></li><li><p>跟上例中的 ﬁnally 相比，发现没有 <code>athrow</code> 了，这告诉我们：如果在<code>ﬁnally</code>中出现了 <code>return</code>，<font color="blue">会吞掉异常</font>- ==所以不要在finally中进行返回操作== <span class="github-emoji"><span>☢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>☢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>☢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>☢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>☢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><strong>被吞掉的异常</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//  这里应该会抛出异常</span>         i <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会发现打印结果为 <font color="red">20 </font>，并未抛出异常</p><p><strong>finally 不带 return</strong></p><pre class="line-numbers language-none"><code class="language-none">public static int test() {int i = 10;try {return i;} finally {i = 20;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>对应字节码</p><pre class="line-numbers language-none"><code class="language-none">Code:     stack=1, locals=3, args_size=0        0: bipush        10        2: istore_0 // 赋值给i 10        3: iload_0// 加载到操作数栈顶        4: istore_1 // 加载到局部变量表的1号位置        5: bipush        20        7: istore_0 // 赋值给i 20        8: iload_1 // 加载局部变量表1号位置的数10到操作数栈        9: ireturn // 返回操作数栈顶元素 10       10: astore_2       11: bipush        20       13: istore_0       14: aload_2 // 加载异常       15: athrow // 抛出异常     Exception table:        from    to  target type            3     5    10   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8）Synchronized"><a href="#8）Synchronized" class="headerlink" title="8）Synchronized"></a>8）Synchronized</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_19_SyncTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应字节码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class java/lang/Object</span>         <span class="token number">3</span><span class="token operator">:</span> dup <span class="token comment">// 复制一份栈顶，然后压入栈中。用于函数消耗</span>         <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&lt;init&gt;":()V</span>         <span class="token number">7</span><span class="token operator">:</span> astore_1 <span class="token comment">// 将栈顶的对象地址方法 局部变量表中 1 中</span>         <span class="token number">8</span><span class="token operator">:</span> aload_1 <span class="token comment">// 加载到操作数栈</span>         <span class="token number">9</span><span class="token operator">:</span> dup     <span class="token comment">// 复制一份，放到操作数栈，用于加锁时消耗</span>        <span class="token number">10</span><span class="token operator">:</span> astor_2     <span class="token comment">// 将操作数栈顶元素弹出，暂存到局部变量表的 2 号槽位。这时操作数栈中有一份对象的引用</span>        <span class="token number">11</span><span class="token operator">:</span> monitorenter <span class="token comment">// 加锁</span>        <span class="token number">12</span><span class="token operator">:</span> getstatic     #<span class="token number">3</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>        <span class="token number">15</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String ok</span>        <span class="token number">17</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>        <span class="token number">20</span><span class="token operator">:</span> aload_2 <span class="token comment">// 加载对象到栈顶</span>        <span class="token number">21</span><span class="token operator">:</span> monitorexit <span class="token comment">// 释放锁</span>        <span class="token number">22</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">30</span>        <span class="token comment">// 异常情况的解决方案 释放锁！</span>        <span class="token number">25</span><span class="token operator">:</span> astore_3        <span class="token number">26</span><span class="token operator">:</span> aload_2        <span class="token number">27</span><span class="token operator">:</span> monitorexit        <span class="token number">28</span><span class="token operator">:</span> aload_3        <span class="token number">29</span><span class="token operator">:</span> athrow        <span class="token number">30</span><span class="token operator">:</span> <span class="token keyword">return</span>        <span class="token comment">// 异常表！</span>      <span class="token class-name">Exception</span> table<span class="token operator">:</span>         from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">12</span>    <span class="token number">22</span>    <span class="token number">25</span>   any            <span class="token number">25</span>    <span class="token number">28</span>    <span class="token number">25</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、编译期处理"><a href="#3、编译期处理" class="headerlink" title="3、编译期处理"></a>3、编译期处理</h2><p>所谓的 <strong>语法糖<span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></strong> ，其实就是指 java 编译器把<code> .java 源码</code>编译为<code> .class 字节码</code>的过程中，<font color="blue">自动生成和转换的一些代码</font>，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利 </p><p><strong>注意</strong>，以下代码的分析，借助了 <code>javap </code>工具，<code>idea 的反编译功能</code>，idea 插件<code>jclasslib</code>等工具。另外， 编译器转换的<strong>结果直接就是 class 字节码</strong>，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，<font color="red">并不是编译器还会转换出中间的 java 源码，切记。</font></p><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="1）默认构造器"><a href="#1）默认构造器" class="headerlink" title="1）默认构造器"></a>1）默认构造器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过编译期优化后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy1</span> <span class="token punctuation">{</span>   <span class="token comment">// 这个无参构造器是java编译器帮我们加上的</span>   <span class="token keyword">public</span> <span class="token class-name">Candy1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 即调用父类 Object 的无参构造方法，即调用 java/lang/Object." &lt;init&gt;":()V</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="2）自动拆装箱"><a href="#2）自动拆装箱" class="headerlink" title="2）自动拆装箱"></a>2）自动拆装箱</h3><p><font color="cblue">基本类型和其包装类型的相互转换过程，称为拆装箱</font> 在 JDK 5 以后，它们的转换可以在编译期自动完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy2</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换过程如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy2</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 基本类型赋值给包装类型，称为装箱</span>      <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 包装类型赋值给基本类型，称谓拆箱</span>      <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="3）泛型集合取值"><a href="#3）泛型集合取值" class="headerlink" title="3）泛型集合取值"></a>3）泛型集合取值</h3><p>泛型也是在 JDK 5 开始加入的特性，<font color="cblue">但 java 在编译泛型代码后会执行泛型擦除的动作</font>，即泛型信息在编译为字节码之后就丢失了，实际的类型都当做了 Object 类型来处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy3</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span>      <span class="token class-name">Integer</span> x <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应字节码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>    stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class java/util/ArrayList</span>       <span class="token number">3</span><span class="token operator">:</span> dup       <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment">// Method java/util/ArrayList.&lt;init&gt;":()V</span>       <span class="token number">7</span><span class="token operator">:</span> astore_1       <span class="token number">8</span><span class="token operator">:</span> aload_1       <span class="token number">9</span><span class="token operator">:</span> bipush        <span class="token number">10</span>      <span class="token number">11</span><span class="token operator">:</span> invokestatic  #<span class="token number">4</span>                  <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>      <span class="token comment">// 这里进行了泛型擦除，实际调用的是add(Objcet o)</span>      <span class="token number">14</span><span class="token operator">:</span> invokeinterface #<span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span>            <span class="token comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span>      <span class="token number">19</span><span class="token operator">:</span> pop      <span class="token number">20</span><span class="token operator">:</span> aload_1      <span class="token number">21</span><span class="token operator">:</span> iconst_0      <span class="token comment">// 这里也进行了泛型擦除，实际调用的是get(Object o)   </span>      <span class="token number">22</span><span class="token operator">:</span> invokeinterface #<span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">2</span>            <span class="token comment">// InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span><span class="token comment">// 这里进行了类型转换，将 Object 转换成了 Integer</span>      <span class="token number">27</span><span class="token operator">:</span> checkcast     #<span class="token number">7</span>                  <span class="token comment">// class java/lang/Integer</span>      <span class="token number">30</span><span class="token operator">:</span> astore_2      <span class="token number">31</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="cblue">所以调用 get 函数取值时，有一个类型转换的操作。</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="blue">如果要将返回结果赋值给一个 int 类型的变量，则还有自动拆箱的操</font>作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用反射可以得到，参数的类型以及泛型类型。泛型反射代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1. 拿到方法</span>    <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">Code_20_ReflectTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 得到泛型参数的类型信息</span>    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 3. 判断参数类型是否，带泛型的类型。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ParameterizedType</span> parameterizedType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> type<span class="token punctuation">;</span>            <span class="token comment">// 4. 得到原始类型</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始类型 - "</span> <span class="token operator">+</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5. 拿到泛型类型</span>            <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"泛型参数[%d] - %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">原始类型 - interface java.util.List泛型参数[0] - class java.lang.String原始类型 - interface java.util.Map泛型参数[0] - class java.lang.Integer泛型参数[1] - class java.lang.Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="4）可变参数"><a href="#4）可变参数" class="headerlink" title="4）可变参数"></a>4）可变参数</h3><p>可变参数也是 JDK 5 开始加入的新特性： 例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy4</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 将 args 赋值给 arr ，可以看出 String... 实际就是 String[]  </span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> args<span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可变参数 <code>String… args</code> 其实是一个 <code>String[] args</code> ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy4</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Candy4</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> args<span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果调用的是 <code>foo()</code> ，即未传递参数时，等价代码为 foo(new String[]{}) ，<font color="blue">创建了一个空数组，而不是直接传递的 null .</font></p><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="5）foreach-循环"><a href="#5）foreach-循环" class="headerlink" title="5）foreach 循环"></a>5）foreach 循环</h3><p>仍是 JDK 5 开始引入的语法糖，数组的循环：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy5</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 数组赋初值的简化写法也是一种语法糖。</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会帮我们转换为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Candy5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是集合使用 foreach</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集合要使用 foreach ，<font color="red">需要该集合类实现了 Iterable 接口</font>，因为集合的遍历需要用到迭代器<code> Iterator</code>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Candy5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获得该集合的迭代器</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">Integer</span> x <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="6）switch-字符串"><a href="#6）switch-字符串" class="headerlink" title="6）switch 字符串"></a>6）switch 字符串</h3><p>从 JDK 7 开始，switch 可以作用于字符串和枚举类，这个功能其实也是语法糖，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cnady6</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token string">"hello"</span> <span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token string">"world"</span> <span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编译器中执行的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy6</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Candy6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// 通过字符串的 hashCode + value 来判断是否匹配</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// hello 的 hashCode</span>         <span class="token keyword">case</span> <span class="token number">99162322</span> <span class="token operator">:</span>            <span class="token comment">// 再次比较，因为字符串的 hashCode 有可能相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token comment">// world 的 hashCode</span>         <span class="token keyword">case</span> <span class="token number">11331880</span> <span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 用第二个 switch 在进行输出判断</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过程说明：<br>在编译期间，单个的 ==switch 被分为了两个== </p><p><span class="github-emoji"><span>🍨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>第一个用来匹配字符串，并给 x 赋值字符串的匹配用到了字符串的<code>hashCode</code> ，还用到了<code> equals</code> 方法-</p><p><span class="github-emoji"><span>🍨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>使用 hashCode 是为了==提高比较效率==，使用 equals 是==防止有 hashCode 冲突==（如 BM 和 C .）</p><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="7）switch-枚举"><a href="#7）switch-枚举" class="headerlink" title="7）switch 枚举"></a>7）switch 枚举</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> SEX <span class="token punctuation">{</span>   MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy7</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">SEX</span> sex <span class="token operator">=</span> SEX<span class="token punctuation">.</span>MALE<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> MALE<span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> FEMALE<span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器中执行的代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> SEX <span class="token punctuation">{</span>   MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy7</span> <span class="token punctuation">{</span>   <span class="token comment">/**         * 定义一个合成类（仅 jvm 使用，对我们不可见）         * 用来映射枚举的 ordinal 与数组元素的关系         * 枚举的 ordinal 表示枚举对象的序号，从 0 开始         * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1         */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> $MAP <span class="token punctuation">{</span>      <span class="token comment">// 数组大小即为枚举元素个数，里面存放了 case 用于比较的数字</span>      <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>         <span class="token comment">// ordinal 即枚举元素对应所在的位置，MALE 为 0 ，FEMALE 为 1</span>         map<span class="token punctuation">[</span>SEX<span class="token punctuation">.</span>MALE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         map<span class="token punctuation">[</span>SEX<span class="token punctuation">.</span>FEMALE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">SEX</span> sex <span class="token operator">=</span> SEX<span class="token punctuation">.</span>MALE<span class="token punctuation">;</span>      <span class="token comment">// 将对应位置枚举元素的值赋给 x ，用于 case 操作</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> $MAP<span class="token punctuation">.</span>map<span class="token punctuation">[</span>sex<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="8）枚举类"><a href="#8）枚举类" class="headerlink" title="8）枚举类"></a>8）枚举类</h3><p>JDK 7 新增了枚举类，以前面的性别枚举为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> SEX <span class="token punctuation">{</span>   MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转换后的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sex</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sex</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token comment">// 对应枚举类中的元素</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span> MALE<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span> FEMALE<span class="token punctuation">;</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> $VALUES<span class="token punctuation">;</span>       <span class="token keyword">static</span> <span class="token punctuation">{</span>           <span class="token comment">// 调用构造函数，传入枚举元素的值及 ordinal</span>    MALE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token string">"MALE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FEMALE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token string">"FEMALE"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           $VALUES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 调用父类中的方法</span>    <span class="token keyword">private</span> <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> ordinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> $VALUES<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Sex</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Sex</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="9）try-with-resources"><a href="#9）try-with-resources" class="headerlink" title="9）try-with-resources"></a>9）try-with-resources</h3><p>JDK 7 开始新增了<font color="cblue">对需要关闭的资源处理的特殊语法</font>，‘try-with-resources’</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>资源变量 <span class="token operator">=</span> 创建资源对象<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中资源对象<font color="red">需要实现</font> <code>AutoCloseable </code>接口，例如`` InputStream<code>、</code>OutputStream<code> 、</code> Connection<code>、</code>Statement<code> 、</code> ResultSet<code>等接口都实现了</code>AutoCloseable<code>，使用</code>try-with- resources<code>可以不用写</code>finally `语句块，<font color="blue">编译器会帮助生成关闭资源代码</font>，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy9</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会被转换为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy9</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">Candy9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Throwable</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// t 是我们代码出现的异常 </span>                t <span class="token operator">=</span> e1<span class="token punctuation">;</span>                 <span class="token keyword">throw</span> e1<span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 判断了资源不为空 </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">// 如果我们代码有异常</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token keyword">try</span> <span class="token punctuation">{</span>                            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment">// 如果 close 出现异常，作为被压制异常添加</span>                            t<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                         <span class="token comment">// 如果我们代码没有异常，close 出现的异常就是最后 catch 块中的 e </span>                        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要设计一个<font color="red"> addSuppressed(Throwable e) （添加被压制异常）的方法呢</font>？是==为了防止异常信息的丢失==（想想 try-with-resources 生成的 fianlly 中如果抛出了异常）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MyResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyResource</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"close 异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArithmeticException</span><span class="token operator">:</span> <span class="token operator">/</span> by zero at <span class="token class-name"><span class="token namespace">test<span class="token punctuation">.</span></span>Test6</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Test6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> close 异常 at <span class="token class-name"><span class="token namespace">test<span class="token punctuation">.</span></span>MyResource</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Test6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">test<span class="token punctuation">.</span></span>Test6</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Test6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="10）方法重写时的桥接方法"><a href="#10）方法重写时的桥接方法" class="headerlink" title="10）方法重写时的桥接方法"></a>10）方法重写时的桥接方法</h3><p>我们都知道，方法重写时对返回值分两种情况： </p><p><span class="github-emoji"><span>🌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>父子类的<font color="cblue">返回值完全一致 </font></p><p><span class="github-emoji"><span>🌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><font color="red">子类返回值可以</font>是<font color="blue">父类返回值</font>的<font color="orange">子类</font>（比较绕口，见下面的例子）<code>Integer</code>是<code>Number</code>的子类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">Number</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token comment">// 子类 m 方法的返回值是 Integer 是父类 m 方法返回值 Number 的子类 </span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于子类，java 编译器会做如下处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// 此方法才是真正重写了父类 public Number m() 方法 </span><span class="token keyword">public</span> synthetic bridge <span class="token class-name">Number</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 调用 public Integer m() </span><span class="token keyword">return</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中桥接方法比较特殊，仅对 java 虚拟机可见，并且与原来的 public Integer m() 没有命名冲突，可以 用下面反射代码来验证：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ali<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>B</span><span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Number</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ali<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>B</span><span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="11）匿名内部类"><a href="#11）匿名内部类" class="headerlink" title="11）匿名内部类"></a>11）匿名内部类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy10</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换后的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy10</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 用额外创建的类来创建匿名内部类对象</span>      <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Candy10</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 创建了一个额外的类，实现了 Runnable 接口</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Candy10</span>$<span class="token number">1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Candy10</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用<font color="red">局部变量的匿名内部类</font>，源代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy11</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok:"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换后代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 额外生成的类 </span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Candy11</span>$<span class="token number">1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> val$x<span class="token punctuation">;</span> <span class="token class-name">Candy11</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val$x <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val$x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy11</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Candy11</span>$<span class="token function">1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这同时解释了为什么匿名内部类引用局部变量时，==局部变量必须是 final 的==：</p><p>因为在创建 Candy11$1 对象时，将 x 的值赋值给了 Candy11$1 对象的 值后，如果不是 final 声明的 x 值发生了改变，<font color="blue">匿名内部类则值不一致。</font></p><h2 id="4、类加载阶段"><a href="#4、类加载阶段" class="headerlink" title="4、类加载阶段"></a>4、类加载阶段</h2><h3 id="1）加载"><a href="#1）加载" class="headerlink" title="1）加载"></a>1）加载</h3><p>将类的字节码载入<font color="red">方法区</font>（<font color="cblue">1.8后为元空间，在本地内存中</font>）中，内部采用<code>C++ 的 instanceKlass 描述 java 类</code>，它的重要 <code>ﬁeld </code>有：</p><ul><li><p><code>_java_mirror</code> 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用-</p></li><li><p><code>_super</code> 即父类- </p></li><li><p> <code>_ﬁelds</code> 即成员变量- </p></li><li><p><code>_methods</code> 即方法- </p></li><li><p><code>_constants</code> 即常量池-</p></li><li><p><code>_class_loader</code> 即类加载器- </p></li><li><p><code>_vtable</code> 虚方法表-</p></li><li><p><code>_itable</code> 接口方法</p></li></ul><p><strong>注意</strong></p><ul><li>instanceKlass 这样的【元数据】是存储在方法区（1.8 后的元空间内），但 _java_mirror 是存储在堆中- 可以通过前面介绍的 HSDB 工具查看</li></ul><h3 id="2）连接"><a href="#2）连接" class="headerlink" title="2）连接"></a>2）连接</h3><p><strong>验证</strong> 验证类是否符合 JVM规范，安全性检查 用 UE 等支持二进制的编辑器修改 HelloWorld.class 的魔数，在控制台运行 <strong>准备</strong> 为 static 变量分配空间，设置默认值</p><ul><li>static 变量在 JDK 7 之前存储于 instanceKlass 末尾，从 JDK 7 开始，存储于 _java_mirror 末尾- static 变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成- 如果 static 变量是 final 的基本类型，以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成- 如果 static 变量是 final 的，但属于引用类型，那么赋值也会在初始化阶段完成将常量池中的符号引用解析为直接引用<pre class="line-numbers language-none"><code class="language-none">public class Code_22_AnalysisTest {    public static void main(String[] args) throws ClassNotFoundException, IOException {        ClassLoader classLoader = Code_22_AnalysisTest.class.getClassLoader();        Class&lt;?&gt; c = classLoader.loadClass("cn.ali.jvm.test.C");        // new C();        System.in.read();    }}class C {    D d = new D();}class D {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3）初始化"><a href="#3）初始化" class="headerlink" title="3）初始化"></a>3）初始化</h3><h4 id="clinit-v-方法"><a href="#clinit-v-方法" class="headerlink" title="clinit()v 方法"></a>clinit()v 方法</h4><p>初始化即调用 clinit()V ，虚拟机会保证这个类的『构造方法』的线程安全</p><h4 id="发生的时机"><a href="#发生的时机" class="headerlink" title="发生的时机"></a>发生的时机</h4><p>概括得说，类初始化是【懒惰的】</p><ul><li>main 方法所在的类，总会被首先初始化- 首次访问这个类的静态变量或静态方法时- 子类初始化，如果父类还没初始化，会引发- 子类访问父类的静态变量，只会触发父类的初始化- Class.forName- new 会导致初始化<br>不会导致类初始化的情况</li><li>访问类的 static final 静态常量（基本类型和字符串）不会触发初始化- 类对象.class 不会触发初始化- 创建该类的数组不会触发初始化</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202112141603590.png" alt="image-20211214160336478"></p><pre class="line-numbers language-none"><code class="language-none">public class Load1 {    static {        System.out.println("main init");    }    public static void main(String[] args) throws ClassNotFoundException {        // 1. 静态常量（基本类型和字符串）不会触发初始化//         System.out.println(B.b);        // 2. 类对象.class 不会触发初始化//         System.out.println(B.class);        // 3. 创建该类的数组不会触发初始化//         System.out.println(new B[0]);        // 4. 不会初始化类 B，但会加载 B、A//         ClassLoader cl = Thread.currentThread().getContextClassLoader();//         cl.loadClass("cn.ali.jvm.test.classload.B");        // 5. 不会初始化类 B，但会加载 B、A//         ClassLoader c2 = Thread.currentThread().getContextClassLoader();//         Class.forName("cn.ali.jvm.test.classload.B", false, c2);        // 1. 首次访问这个类的静态变量或静态方法时//         System.out.println(A.a);        // 2. 子类初始化，如果父类还没初始化，会引发//         System.out.println(B.c);        // 3. 子类访问父类静态变量，只触发父类初始化//         System.out.println(B.a);        // 4. 会初始化类 B，并先初始化类 A//         Class.forName("cn.ali.jvm.test.classload.B");    }}class A {    static int a = 0;    static {        System.out.println("a init");    }}class B extends A {    final static double b = 5.0;    static boolean c = false;    static {        System.out.println("b init");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）练习"><a href="#4）练习" class="headerlink" title="4）练习"></a>4）练习</h3><p>从字节码分析，使用 a，b，c 这三个常量是否会导致 E 初始化</p><pre class="line-numbers language-none"><code class="language-none">public class Load2 {    public static void main(String[] args) {        System.out.println(E.a);        System.out.println(E.b);        // 会导致 E 类初始化，因为 Integer 是包装类        System.out.println(E.c);    }}class E {    public static final int a = 10;    public static final String b = "hello";    public static final Integer c = 20;    static {        System.out.println("E clinit");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>典型应用 - 完成懒惰初始化单例模式</p><pre class="line-numbers language-none"><code class="language-none">public class Singleton {    private Singleton() { }     // 内部类中保存单例    private static class LazyHolder {         static final Singleton INSTANCE = new Singleton();     }    // 第一次调用 getInstance 方法，才会导致内部类加载和初始化其静态成员     public static Singleton getInstance() {         return LazyHolder.INSTANCE;     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的实现特点是：</p><ul><li>懒惰实例化- 初始化时的线程安全是有保障的<h2 id="5、类加载器"><a href="#5、类加载器" class="headerlink" title="5、类加载器"></a>5、类加载器</h2></li></ul><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段 对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个 Java 虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等！ 以JDK 8为例</p><p>|名称|加载的类|说明<br>|——<br>|Bootstrap ClassLoader（启动类加载器）|JAVA_HOME/jre/lib|无法直接访问<br>|Extension ClassLoader(拓展类加载器)|JAVA_HOME/jre/lib/ext|上级为Bootstrap，显示为null<br>|Application ClassLoader(应用程序类加载器)|classpath|上级为Extension<br>|自定义类加载器|自定义|上级为Application</p><h3 id="1）启动类的加载器"><a href="#1）启动类的加载器" class="headerlink" title="1）启动类的加载器"></a>1）启动类的加载器</h3><p>可通过在控制台输入指令，使得类被启动类加器加载</p><h3 id="2）扩展类的加载器"><a href="#2）扩展类的加载器" class="headerlink" title="2）扩展类的加载器"></a>2）扩展类的加载器</h3><p>如果 classpath 和 JAVA_HOME/jre/lib/ext 下有同名类，加载时会使用拓展类加载器加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载。</p><h3 id="3）双亲委派模式"><a href="#3）双亲委派模式" class="headerlink" title="3）双亲委派模式"></a>3）双亲委派模式</h3><p>双亲委派模式，即调用类加载器ClassLoader 的 loadClass 方法时，查找类的规则。 loadClass源码</p><pre class="line-numbers language-none"><code class="language-none">protected Class&lt;?&gt; loadClass(String name, boolean resolve)    throws ClassNotFoundException{    synchronized (getClassLoadingLock(name)) {        // 首先查找该类是否已经被该类加载器加载过了        Class&lt;?&gt; c = findLoadedClass(name);        // 如果没有被加载过        if (c == null) {            long t0 = System.nanoTime();            try {                // 看是否被它的上级加载器加载过了 Extension 的上级是Bootstarp，但它显示为null                if (parent != null) {                    c = parent.loadClass(name, false);                } else {                    // 看是否被启动类加载器加载过                    c = findBootstrapClassOrNull(name);                }            } catch (ClassNotFoundException e) {                // ClassNotFoundException thrown if class not found                // from the non-null parent class loader                //捕获异常，但不做任何处理            }            if (c == null) {                // 如果还是没有找到，先让拓展类加载器调用 findClass 方法去找到该类，如果还是没找到，就抛出异常                // 然后让应用类加载器去找 classpath 下找该类                long t1 = System.nanoTime();                c = findClass(name);                // 记录时间                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);                sun.misc.PerfCounter.getFindClasses().increment();            }        }        if (resolve) {            resolveClass(c);        }        return c;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）自定义类加载器"><a href="#4）自定义类加载器" class="headerlink" title="4）自定义类加载器"></a>4）自定义类加载器</h3><p><strong>使用场景</strong></p><ul><li>想加载非 classpath 随意路径中的类文件- 通过接口来使用实现，希望解耦时，常用在框架设计- 这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器</li></ul><p><strong>步骤</strong></p><ul><li>继承 ClassLoader 父类- 要遵从双亲委派机制，重写 ﬁndClass 方法 不是重写 loadClass 方法，否则不会走双亲委派机制- 读取类文件的字节码- 调用父类的 deﬁneClass 方法来加载类- 使用者调用该类加载器的 loadClass 方法<br><strong>破坏双亲委派模式</strong></li><li>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代 <ul>- 建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法- 如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式- 这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等## 6、运行期优化</ul><h3 id="1）即时编译"><a href="#1）即时编译" class="headerlink" title="1）即时编译"></a>1）即时编译</h3><p><strong>分层编译</strong> JVM 将执行状态分成了 5 个层次：</p><ul><li>0层：解释执行，用解释器将字节码翻译为机器码- 1层：使用 C1 即时编译器编译执行（不带 proﬁling）- 2层：使用 C1 即时编译器编译执行（带基本的profiling）- 3层：使用 C1 即时编译器编译执行（带完全的profiling）- 4层：使用 C2 即时编译器编译执行<br>proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等</li></ul><p>即时编译器（JIT）与解释器的区别</p></li><li>解释器   <ul>- 将字节码解释为机器码，下次即使遇到相同的字节码，仍会执行重复的解释- 是将字节码解释为针对所有平台都通用的机器码- 将一些字节码编译为机器码，并存入 Code Cache，下次遇到相同的代码，直接执行，无需再编译- 根据平台类型，生成平台特定的机器码对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 执行效率上简单比较一下 Interpreter &lt; C1 &lt; C2，总的目标是发现热点代码（hotspot名称的由 来），并优化这些热点代码。 **逃逸分析** 逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术<p>逃逸分析的 JVM 参数如下：</p><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis- 关闭逃逸分析：-XX:-DoEscapeAnalysis- 显示分析结果：-XX:+PrintEscapeAnalysis<br>逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态，可以不用额外加这个参数</li></ul><p>对象逃逸状态</p><p>全局逃逸（GlobalEscape）</p><li>即一个对象的作用范围逃出了当前方法或者当前线程，有以下几种场景：   <ul>- 对象是一个静态变量- 对象是一个已经发生逃逸的对象- 对象作为当前方法的返回值参数逃逸（ArgEscape）- 即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的没有逃逸- 即方法中的对象没有发生逃逸**逃逸分析优化** 针对上面第三点，当一个对象没有逃逸时，可以得到以下几个虚拟机的优化<p><strong>锁消除</strong> 我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁 例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作 锁消除的 JVM 参数如下：</p><ul><li>开启锁消除：-XX:+EliminateLocks- 关闭锁消除：-XX:-EliminateLocks<br>锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上</li></ul><p><strong>标量替换</strong> 首先要明白标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象 对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能 标量替换的 JVM 参数如下：</p><ul><li>开启标量替换：-XX:+EliminateAllocations- 关闭标量替换：-XX:-EliminateAllocations- 显示标量替换详情：-XX:+PrintEliminateAllocations<br>标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上</li></ul><p><strong>栈上分配</strong> 当对象没有发生逃逸时，该对象就可以通过标量替换分解成成员标量分配在栈内存中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能</p><p><strong>方法内联</strong> <strong>内联函数</strong> 内联函数就是在程序编译时，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体来直接进行替换</p><p><strong>JVM内联函数</strong> C++ 是否为内联函数由自己决定，Java 由编译器决定。Java 不支持直接声明为内联函数的，如果想让他内联，你只能够向编译器提出请求: 关键字 final 修饰 用来指明那个函数是希望被 JVM 内联的，如</p><pre class="line-numbers language-none"><code class="language-none">public final void doSomething() {          // to do something  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总的来说，一般的函数都不会被当做内联函数，只有声明了final后，编译器才会考虑是不是要把你的函数变成内联函数</p><p>JVM内建有许多运行时优化。首先短方法更利于JVM推断。流程更明显，作用域更短，副作用也更明显。如果是长方法JVM可能直接就跪了。</p><p>第二个原因则更重要：方法内联</p><p>如果JVM监测到一些小方法被频繁的执行，它会把方法的调用替换成方法体本身，如：</p><pre class="line-numbers language-none"><code class="language-none">private int add4(int x1, int x2, int x3, int x4) { //这里调用了add2方法        return add2(x1, x2) + add2(x3, x4);      }      private int add2(int x1, int x2) {          return x1 + x2;      }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法调用被替换后</p><pre class="line-numbers language-none"><code class="language-none">private int add4(int x1, int x2, int x3, int x4) {      //被替换为了方法本身        return x1 + x2 + x3 + x4;      }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）反射优化"><a href="#2）反射优化" class="headerlink" title="2）反射优化"></a>2）反射优化</h3><pre class="line-numbers language-none"><code class="language-none">public class Reflect1 {   public static void foo() {      System.out.println("foo...");   }   public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {      Method foo = Demo3.class.getMethod("foo");      for(int i = 0; i&lt;=16; i++) {         foo.invoke(null);      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现 invoke 方法源码</p><pre class="line-numbers language-none"><code class="language-none">@CallerSensitivepublic Object invoke(Object obj, Object... args)    throws IllegalAccessException, IllegalArgumentException,       InvocationTargetException{    if (!override) {        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {            Class&lt;?&gt; caller = Reflection.getCallerClass();            checkAccess(caller, clazz, obj, modifiers);        }    }    //MethodAccessor是一个接口，有3个实现类，其中有一个是抽象类    MethodAccessor ma = methodAccessor;             // read volatile    if (ma == null) {        ma = acquireMethodAccessor();    }    return ma.invoke(obj, args);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210211225135924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 会由 DelegatingMehodAccessorImpl 去调用 NativeMethodAccessorImpl NativeMethodAccessorImpl 源码</p><pre class="line-numbers language-none"><code class="language-none">class NativeMethodAccessorImpl extends MethodAccessorImpl {    private final Method method;    private DelegatingMethodAccessorImpl parent;    private int numInvocations;    NativeMethodAccessorImpl(Method var1) {        this.method = var1;    }//每次进行反射调用，会让numInvocation与ReflectionFactory.inflationThreshold的值（15）进行比较，并使使得numInvocation的值加一//如果numInvocation&gt;ReflectionFactory.inflationThreshold，则会调用本地方法invoke0方法    public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException {        if (++this.numInvocations &gt; ReflectionFactory.inflationThreshold() &amp;&amp; !ReflectUtil.isVMAnonymousClass(this.method.getDeclaringClass())) {            MethodAccessorImpl var3 = (MethodAccessorImpl)(new MethodAccessorGenerator()).generateMethod(this.method.getDeclaringClass(), this.method.getName(), this.method.getParameterTypes(), this.method.getReturnType(), this.method.getExceptionTypes(), this.method.getModifiers());            this.parent.setDelegate(var3);        }        return invoke0(this.method, var1, var2);    }    void setParent(DelegatingMethodAccessorImpl var1) {        this.parent = var1;    }    private static native Object invoke0(Method var0, Object var1, Object[] var2);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//ReflectionFactory.inflationThreshold()方法的返回值private static int inflationThreshold = 15;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>一开始if条件不满足，就会调用本地方法 invoke0</li><li>随着 numInvocation 的增大，当它大于 ReflectionFactory.inflationThreshold 的值 16 时，就会本地方法访问器替换为一个运行时动态生成的访问器，来提高效率 <ul>- 这时会从反射调用变为正常调用，即直接调用 Reflect1.foo()<img src="https://img-blog.csdnimg.cn/20210211225248176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></ul><p>阿里开源工具：arthas-boot</p><h1 id="五、内存模型"><a href="#五、内存模型" class="headerlink" title="五、内存模型"></a>五、内存模型</h1></li></ul></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 学习笔记（一）内存结构</title>
      <link href="/2022/01/03/JVM%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
      <url>/2022/01/03/JVM%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-学习笔记（一）内存结构"><a href="#JVM-学习笔记（一）内存结构" class="headerlink" title="JVM 学习笔记（一）内存结构"></a>JVM 学习笔记（一）内存结构</h1><p>学习笔记如下，本笔记观看视频，</p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1、什么是-JVM-？"><a href="#1、什么是-JVM-？" class="headerlink" title="1、什么是 JVM ？"></a>1、什么是 JVM ？</h2><p>1）定义 Java Virtual Machine ，Java 程序的<strong>运行环境</strong>（Java 二进制字节码的运行环境）。 2）好处</p><ul><li>一次编译，处处执行- 自动的内存管理，垃圾回收机制- 数组下标越界检查<br>3）比较 JVM、JRE、JDK 的关系如下图所示 <img src="https://img-blog.csdnimg.cn/20210207154634171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="2、学习-JVM-有什么用？"><a href="#2、学习-JVM-有什么用？" class="headerlink" title="2、学习 JVM 有什么用？"></a>2、学习 JVM 有什么用？</h2><ul><li>面试必备- 中高级程序员必备- 想走的长远，就需要懂原理，比如：自动装箱、自动拆箱是怎么实现的，反射是怎么实现的，垃圾回收机制是怎么回事等待，JVM 是必须掌握的。<h2 id="3、常见的-JVM"><a href="#3、常见的-JVM" class="headerlink" title="3、常见的 JVM"></a>3、常见的 JVM</h2></li></ul><p><img src="https://img-blog.csdnimg.cn/20210207155653261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 我们主要学习的是 HotSpot 版本的虚拟机。</p><h2 id="4、学习路线"><a href="#4、学习路线" class="headerlink" title="4、学习路线"></a>4、学习路线</h2><p><img src="https://img-blog.csdnimg.cn/20210207155820178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> ClassLoader：Java 代码编译成二进制后，会经过类加载器，这样才能加载到 JVM 中运行。 Method Area：类是放在方法区中。 Heap：类的实例对象。 当类调用方法时，会用到 JVM Stack、PC Register、本地方法栈。 方法执行时的每行代码是有执行引擎中的解释器逐行执行，方法中的热点代码频繁调用的方法，由 JIT 编译器优化后执行，GC 会对堆中不用的对象进行回收。需要和操作系统打交道就需要使用到本地方法接口。</p><h1 id="二、内存结构"><a href="#二、内存结构" class="headerlink" title="二、内存结构"></a>二、内存结构</h1><h2 id="1、程序计数器"><a href="#1、程序计数器" class="headerlink" title="1、程序计数器"></a>1、程序计数器</h2><h3 id="1）定义"><a href="#1）定义" class="headerlink" title="1）定义"></a>1）定义</h3><p>Program Counter Register 程序计数器（寄存器） 作用：是记录下一条 jvm 指令的执行地址行号。 特点：</p><ul><li>是线程私有的- 不会存在内存溢出<h3 id="2）作用"><a href="#2）作用" class="headerlink" title="2）作用"></a>2）作用</h3></li></ul><pre class="line-numbers language-none"><code class="language-none">0: getstatic #20 // PrintStream out = System.out; 3: astore_1 // -- 4: aload_1 // out.println(1); 5: iconst_1 // -- 6: invokevirtual #26 // -- 9: aload_1 // out.println(2); 10: iconst_2 // -- 11: invokevirtual #26 // -- 14: aload_1 // out.println(3); 15: iconst_3 // -- 16: invokevirtual #26 // -- 19: aload_1 // out.println(4); 20: iconst_4 // -- 21: invokevirtual #26 // -- 24: aload_1 // out.println(5); 25: iconst_5 // -- 26: invokevirtual #26 // -- 29: return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解释器会解释指令为机器码交给 cpu 执行，程序计数器会记录下一条指令的地址行号，这样下一次解释器会从程序计数器拿到指令然后进行解释执行。- 多线程的环境下，如果两个线程发生了上下文切换，那么程序计数器会记录线程下一行指令的地址行号，以便于接着往下执行。<h2 id="2、虚拟机栈"><a href="#2、虚拟机栈" class="headerlink" title="2、虚拟机栈"></a>2、虚拟机栈</h2></li></ul><h3 id="1）定义-1"><a href="#1）定义-1" class="headerlink" title="1）定义"></a>1）定义</h3><ul><li>每个线程运行需要的内存空间，称为虚拟机栈- 每个栈由多个栈帧（Frame）组成，对应着每次调用方法时所占用的内存- 每个线程只能有一个活动栈帧，对应着当前正在执行的方法<br>问题辨析：</li></ul><ol><li>垃圾回收是否涉及栈内存？ 不会。栈内存是方法调用产生的，方法调用结束后会弹出栈。1. 栈内存分配越大越好吗？ 不是。因为物理内存是一定的，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。</li><li>方法呢的局部变量是否线程安全 </li><li>如果方法内部的变量没有逃离方法的作用访问，它是线程安全的1. 如果是局部变量引用了对象，并逃离了方法的访问，那就要考虑线程安全问题。 </li><h3 id="2）栈内存溢出"><a href="#2）栈内存溢出" class="headerlink" title="2）栈内存溢出"></a>2）栈内存溢出</h3></ol><p>栈帧过大、过多、或者第三方类库操作，都有可能造成栈内存溢出 java.lang.stackOverflowError ，使用 -Xss256k 指定栈内存大小！</p><h3 id="3）线程运行诊断"><a href="#3）线程运行诊断" class="headerlink" title="3）线程运行诊断"></a>3）线程运行诊断</h3><p>案例一：cpu 占用过多 解决方法：Linux 环境下运行某些程序的时候，可能导致 CPU 的占用过高，这时需要定位占用 CPU 过高的线程</p><ul><li>top 命令，查看是哪个进程占用 CPU 过高- ps H -eo pid, tid（线程id）, %cpu | grep 刚才通过 top 查到的进程号 通过 ps 命令进一步查看是哪个线程占用 CPU 过高- jstack 进程 id 通过查看进程中的线程的 nid ，刚才通过 ps 命令看到的 tid 来对比定位，注意 jstack 查找出的线程 id 是 16 进制的，需要转换。<h2 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h2></li></ul><p>一些带有 native 关键字的方法就是需要 JAVA 去调用本地的C或者C++方法，因为 JAVA 有时候没法直接和操作系统底层交互，所以需要用到本地方法栈，服务于带 native 关键字的方法。</p><h2 id="4、堆"><a href="#4、堆" class="headerlink" title="4、堆"></a>4、堆</h2><h3 id="1）定义-2"><a href="#1）定义-2" class="headerlink" title="1）定义"></a>1）定义</h3><p>Heap 堆</p><ul><li>通过new关键字创建的对象都会被放在堆内存<br>特点</li><li>它是线程共享，堆内存中的对象都需要考虑线程安全问题- 有垃圾回收机制<h3 id="2）堆内存溢出"><a href="#2）堆内存溢出" class="headerlink" title="2）堆内存溢出"></a>2）堆内存溢出</h3></li></ul><p>java.lang.OutofMemoryError ：java heap space. 堆内存溢出 可以使用 -Xmx8m 来指定堆内存大小。</p><h3 id="3）堆内存诊断"><a href="#3）堆内存诊断" class="headerlink" title="3）堆内存诊断"></a>3）堆内存诊断</h3><ol><li>jps 工具 查看当前系统中有哪些 java 进程1. jmap 工具 查看堆内存占用情况 jmap - heap 进程id1. jconsole 工具 图形界面的，多功能的监测工具，可以连续监测1. jvisualvm 工具<h2 id="5、方法区"><a href="#5、方法区" class="headerlink" title="5、方法区"></a>5、方法区</h2></li></ol><h3 id="1）定义-3"><a href="#1）定义-3" class="headerlink" title="1）定义"></a>1）定义</h3><p>Java 虚拟机有一个在所有<font color="cblue"> Java 虚拟机线程之间共享的方法区域</font>。方法区域类似于用于传统语言的编译代码的存储区域，或者类似于操作系统进程中的“文本”段。它存储每个类的结构，例如<code>运行时常量池</code>、<code>字段</code>和<code>方法数据</code>，以及<code>方法</code>和<code>构造函数</code>的代码，包括特殊方法，用于类和实例初始化以及接口初始化方法区域是在虚拟机启动时创建的。尽管方法区域在逻辑上是堆的一部分，但简单的实现可能不会选择垃圾收集或压缩它。此规范不强制指定方法区的位置或用于管理已编译代码的策略。方法区域可以具有固定的大小，或者可以根据计算的需要进行扩展，并且如果不需要更大的方法区域，则可以收缩。方法区域的内存不需要是连续的！</p><h3 id="2）组成"><a href="#2）组成" class="headerlink" title="2）组成"></a>2）组成</h3><p>Hotspot 虚拟机 jdk1.6 1.7 1.8 内存结构图 <img src="https://img-blog.csdnimg.cn/20210208112903305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3）方法区内存溢出"><a href="#3）方法区内存溢出" class="headerlink" title="3）方法区内存溢出"></a>3）方法区内存溢出</h3><li>1.8 之前会导致永久代内存溢出   <ul>- 使用 -XX:MaxPermSize=8m 指定永久代内存大小- 使用 -XX:MaxMetaspaceSize=8m 指定元空间大小### 4）运行时常量池<p>二进制字节码包含（类的基本信息，常量池，类方法定义，包含了虚拟机的指令） 首先看看常量池是什么，编译如下代码：</p><pre class="line-numbers language-none"><code class="language-none">public class Test {    public static void main(String[] args) {        System.out.println("Hello World!");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用 javap -v Test.class 命令反编译查看结果。 <img src="https://img-blog.csdnimg.cn/20210208124448238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 每条指令都会对应常量池表中一个地址，常量池表中的地址可能对应着一个类名、方法名、参数类型等信息。 <img src="https://img-blog.csdnimg.cn/20210208124525875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <strong>常量池</strong>： 就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息 <strong>运行时常量池</strong>： 常量池是 *.class 文件中的，当该类被加载以后，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</p><h3 id="5）StringTable"><a href="#5）StringTable" class="headerlink" title="5）StringTable"></a>5）StringTable</h3><ul><li>常量池中的字符串仅是符号，只有在被用到时才会转化为对象- 利用串池的机制，来避免重复创建字符串对象- 字符串变量拼接的原理是StringBuilder- 字符串常量拼接的原理是编译器优化- 可以使用intern方法，主动将串池中还没有的字符串对象放入串池中</li></ul><p><strong>intern方法 1.8</strong> 调用字符串对象的 intern 方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，则放入成功- 如果有该字符串对象，则放入失败 无论放入是否成功，都会返回串池中的字符串对象<br>注意：此时如果调用 intern 方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象</li></ul><p>例1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// "a" "b" 被放入串池中，str 则存在于堆内存之中</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 str 的 intern 方法，这时串池中没有 "ab" ，则会将该字符串对象放入到串池中，此时堆内存与串池中的 "ab" 是同一个对象</span><span class="token class-name">String</span> st2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 给 str3 赋值，因为此时串池中已有 "ab" ，则直接将串池中的内容返回</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token comment">// 因为堆内存与串池中的 "ab" 是同一个对象，所以以下两条语句打印的都为 true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> st2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 此处创建字符串对象 "ab" ，因为串池中还没有 "ab" ，所以将其放入串池中</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token comment">// "a" "b" 被放入串池中，str 则存在于堆内存之中</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此时因为在创建 str3 时，"ab" 已存在与串池中，所以放入失败，但是会返回串池中的 "ab" </span><span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6）StringTable-的位置"><a href="#6）StringTable-的位置" class="headerlink" title="6）StringTable 的位置"></a>6）StringTable 的位置</h3><p>jdk<code>1.6</code> StringTable 位置是在<code>永久代</code>中，</p><p><code>1.8</code> StringTable 位置是在<code>堆</code>中。 </p><h3 id="7）StringTable-垃圾回收"><a href="#7）StringTable-垃圾回收" class="headerlink" title="7）StringTable 垃圾回收"></a>7）StringTable 垃圾回收</h3><p><code>-Xmx10m</code> 指定堆内存大小<code>-XX:+PrintStringTableStatistics</code>打印字符串常量池信息 </p><p><code>-XX:+PrintGCDetails -verbose:gc</code> 打印 gc 的次数，耗费时间等信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 演示 StringTable 垃圾回收 * -Xmx10m -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_05_StringTableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// j = 100, j = 10000</span>                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8）StringTable-性能调优"><a href="#8）StringTable-性能调优" class="headerlink" title="8）StringTable 性能调优"></a>8）StringTable 性能调优</h3><ul><li>因为<code>StringTable</code>是由==HashTable==实现的，所以可以适当增加HashTable<font color="blueviolet">桶的个数</font>，来减少字符串放入串池所需要的时间<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// -XX:StringTableSize=桶个数（最少设置为 1009 以上）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>考虑是否需要将字符串对象入池 可以通过 intern 方法减少重复入池<h2 id="6、直接内存"><a href="#6、直接内存" class="headerlink" title="6、直接内存"></a>6、直接内存</h2></li></ul><h3 id="1）定义-4"><a href="#1）定义-4" class="headerlink" title="1）定义"></a>1）定义</h3><p>Direct Memory</p><ul><li>常见于 <code>NIO </code>操作时，用于<font color="red">数据缓冲区</font>- </li><li><font color="blueviolet">分配回收成本较高，但读写性能高- </font></li><li><font color="orange">不受 JVM 内存回收管理</font><h3 id="2）使用直接内存的好处"><a href="#2）使用直接内存的好处" class="headerlink" title="2）使用直接内存的好处"></a>2）使用直接内存的好处</h3></li></ul><p>文件读写流程： <img src="https://img-blog.csdnimg.cn/20210208180041113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <font color="red">因为 java 不能直接操作文件管理，需要切换到内核态，使用本地方法进行操作，然后读取磁盘文件，会在系统内存中创建一个缓冲区，将数据读到系统缓冲区， 然后在将系统缓冲区数据，复制到 java 堆内存中。</font><font color="cornflowerblue">缺点是数据存储了两份，在系统内存中有一份，java 堆中有一份，造成了不必要的复制。</font>font&gt;</p><p><strong>使用了 DirectBuffer 文件读取流程</strong> <img src="https://img-blog.csdnimg.cn/20210208181022863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 直接内存是操作系统和 Java 代码都可以访问的一块区域，无需将代码从系统内存复制到 Java 堆内存，从而提高了效率。</p><h3 id="3）直接内存回收原理"><a href="#3）直接内存回收原理" class="headerlink" title="3）直接内存回收原理"></a>3）直接内存回收原理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_06_DirectMemoryTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> _1GB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span><span class="token comment">//        method();</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 演示 直接内存 是被 unsafe 创建与回收</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> base <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1GB<span class="token punctuation">)</span><span class="token punctuation">;</span>        unsafe<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span>_1GB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unsafe<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 演示 直接内存被 释放</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>_1GB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分配完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始释放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        byteBuffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动 gc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">直接内存的回收不是通过 JVM 的垃圾回收来释放的</font>，而是通过<code>unsafe.freeMemory</code> 来手动释放。 </p><p>第一步：allocateDirect 的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ByteBuffer</span> <span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectByteBuffer</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>底层是创建了一个 DirectByteBuffer 对象。 第二步：DirectByteBuffer 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DirectByteBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// package-private</span>       <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cap<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> pa <span class="token operator">=</span> VM<span class="token punctuation">.</span><span class="token function">isDirectMemoryPageAligned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ps <span class="token operator">=</span> <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">pageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>cap <span class="token operator">+</span> <span class="token punctuation">(</span>pa <span class="token operator">?</span> ps <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">reserveMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        base <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 申请内存</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">unreserveMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    unsafe<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token punctuation">(</span>base <span class="token operator">%</span> ps <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Round up to page boundary</span>        address <span class="token operator">=</span> base <span class="token operator">+</span> ps <span class="token operator">-</span> <span class="token punctuation">(</span>base <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token punctuation">(</span>ps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        address <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cleaner <span class="token operator">=</span> <span class="token class-name">Cleaner</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Deallocator</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过虚引用，来实现直接内存的释放，this为虚引用的实际对象, 第二个参数是一个回调，实现了 runnable 接口，run 方法中通过 unsafe 释放内存。</span>    att <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里调用了一个 Cleaner 的 create 方法，且后台线程还会对虚引用的对象监测，如果虚引用的实际对象（这里是 DirectByteBuffer ）被回收以后，就会调用 Cleaner 的 clean 方法，来清除直接内存中占用的内存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment">// 都用函数的 run 方法, 释放内存</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>thunk<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Void</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                           <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Cleaner terminated abnormally"</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到关键的一行代码， this.thunk.run()，thunk 是 Runnable 对象。run 方法就是回调 Deallocator 中的 run 方法，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// Paranoia</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">// 释放内存</span>          unsafe<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>          address <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">unreserveMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>直接内存的回收机制总结</strong></p><ul><li>使用了 Unsafe 类来完成直接内存的分配回收，回收需要主动调用freeMemory 方法- ByteBuffer 的实现内部使用了 Cleaner（虚引用）来检测 ByteBuffer 。一旦ByteBuffer 被垃圾回收，那么会由 ReferenceHandler（守护线程） 来调用 Cleaner 的 clean 方法调用 freeMemory 来释放内存</li></ul><p><strong>注意：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * -XX:+DisableExplicitGC 显示的     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>_1GB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分配完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始释放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        byteBuffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动 gc 失效</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般用 jvm 调优时，会加上下面的参数：<code>-XX:+DisableExplicitGC</code>  // ==禁用显式的 GC==</p><p>意思就是禁止我们手动的 GC，比如手动 System.gc() 无效，它是一种 full gc，会回收新生代、老年代，会造成程序执行的时间比较长。所以我们就通过 unsafe 对象调用 freeMemory 的方式释放内存。</p></ul></li>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3</title>
      <link href="/2022/01/03/MyBatis3/"/>
      <url>/2022/01/03/MyBatis3/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis3"><a href="#MyBatis3" class="headerlink" title="MyBatis3"></a>MyBatis3</h2><h3 id="MyBatis介绍"><a href="#MyBatis介绍" class="headerlink" title="MyBatis介绍"></a>MyBatis介绍</h3><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p><ol><li>JDBC(java data base connection)java数据库连接</li></ol><blockquote><p>优点:</p><p>运行期快捷 , 高效</p><p>缺点:</p><p>编辑器代码量大 , 繁琐异常操作 , 不支持数据库跨平台</p></blockquote><p>jdbc核心API:</p><ul><li>DriverManager   连接数据库</li><li>Connection         连接数据可的抽象</li><li>Statment             执行SQL</li><li>ResultsSet           数据结果集</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111091818348.png" alt="image-20211109181845206"></p><ol start="2"><li>DBUtils</li></ol><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111091819196.png" alt="image-20211109181929076"></p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111091820327.png" alt="image-20211109182041120" style="zoom:200%;"><ol start="4"><li>JDBC Template</li></ol><ul><li><p>优点:运行期高效 , 内嵌spring框架中 , 支持基于AOP的声明式事务</p></li><li><p>缺点:必须与Spring框架结合在一起 , 不支持数据库跨平台,默认没有缓存.</p></li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>object relational mapping对象关系映射</p><blockquote><p> 对象关系映射（Object Relational Mapping，简称ORM）模式<font color="cblue">是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术</font>。简单的说，==ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中==。</p></blockquote><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p>优秀的持久层框架(<strong>ORM</strong>) , 支持自定义SQL ,,存储过程 , 以及高级映射.</p><p>可以通过==简单的xml==或==注解==来配置和映射<strong>原始类型,接口,和java POJO</strong>(plain old java objects 普通老式java对象)为数据库中的记录</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111091841677.png" alt="image-20211109184150578"></p><h3 id="数据源和连接池的区别"><a href="#数据源和连接池的区别" class="headerlink" title="数据源和连接池的区别"></a>数据源和连接池的区别</h3><p>数据源:</p><blockquote><p>所谓数据源也就是==数据的来源==。它存储了所有建立数据库连接需要的信息。是提供某种所需要数据的器件或原始媒体。在数据源中存储了所有建立数据库连接的信息。就像通过指定文件名称可以在文件系统中找到文件一样，通过提供正确的数据源名称，你可以找到相应的数据库连接算是对数据库的一个抽象映射，==即一个数据源对应一个数据库==。==一个数据库也可以创建多个数据源==</p></blockquote><p>有以下属性:</p><ul><li><strong>databaseName</strong> String数据库名称，即数据库的SID。</li><li><strong>dataSourceName</strong> String数据源接口实现类的名称。</li><li><strong>description</strong> String 对数据源的描述。</li><li><strong>networkProtocol</strong> String 和服务器通讯使用的网络协议名。</li><li><strong>password</strong> String 用户登录密码。</li><li><strong>portNumber</strong>数据库服务器使用的端口。</li><li><strong>serverName</strong> String数据库服务器名称。</li><li><strong>user</strong> String 用户登录名。</li></ul><p>==如果数据是水，数据库就是水库，数据源就是连接水库的管道，终端用户看到的数据集是管道里流出来的水。==</p><p>连接池:</p><blockquote><p>==连接池是创建和管理一个连接的缓冲池的技术==，这些连接准备好被任何需要它们的线程使用。当一个线程需要用JDBC对一个数据库操作时，将从池中请求一个连接。当这个连接使用完毕后，将返回到连接池中，等待为其他的线程服务。</p></blockquote><p>比如java<strong>利用</strong>数据源创建某个数据库的多个连接，将连接保存不关闭（这就叫缓存），这个缓冲区就叫连接池，每次需要于数据库连接时，直接从连接池中取得连接就行。用完还回连接池，但是连接并没关闭。</p><p>**==maven编译之后会将java和resources文件合并成一级生成到classpath中去==**所以为了保证xxxMapper接口和xxxMapper.xml保持相同位置需要在resources中配置与java相同的路径,最后结果是:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111110959719.png" alt="image-20211111095947634"></p><h3 id="快速搭建MyBatis项目并实现CRUD"><a href="#快速搭建MyBatis项目并实现CRUD" class="headerlink" title="快速搭建MyBatis项目并实现CRUD"></a>快速搭建MyBatis项目并实现CRUD</h3><p>确保Emp类对应的是Mysql数据库中的table</p><ul><li>id:主键,自增</li><li>username:用户名</li></ul><ol><li>创建maven项目</li><li>导入依赖</li></ol><p>文件目录结构:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111111102258.png" alt="image-20211111110227161"></p><p>基本配置</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mybatis核心依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--数据库连接器驱动--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--环境配置，连接的数据库，这里使用的是MySQL--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--指定事务管理的类型，这里简单使用Java的JDBC的提交和回滚设置--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--dataSource 指连接源配置，POOLED是JDBC连接对象的数据源连接池的实现--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123123<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--这是告诉Mybatis去哪找持久化类的映射文件，对于在src下的文件直接写文件名，     如果在某包下，则要写明路径,如：com/mybatistest/config/User.xml--&gt;</span>        <span class="token comment">&lt;!--&lt;mapper resource="EmpMapper.xml"/&gt;--&gt;</span>        <span class="token comment">&lt;!--接口绑定需要使用class--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>  &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;</code>==value值来自于这里==</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111111411296.png" alt="image-20211111141127214"></p><h4 id="EmpMapper-xml"><a href="#EmpMapper-xml" class="headerlink" title="EmpMapper.xml"></a>EmpMapper.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--// 根据id来查询Emp实体--&gt;</span>    <span class="token comment">&lt;!--resultType接收类型--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select *        from Emp        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertEmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        INSERT INTO `mybatis`.`emp` (`username`)        VALUES (#{username});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE EMP        SET username=#{username}        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        delete        from emp        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Emp实体类"><a href="#Emp实体类" class="headerlink" title="Emp实体类"></a>Emp实体类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Emp{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EmpMapper接口"><a href="#EmpMapper接口" class="headerlink" title="EmpMapper接口"></a>EmpMapper接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmpMapper</span> <span class="token punctuation">{</span>    <span class="token comment">// 根据id来查询Emp实体</span>    <span class="token comment">// 注意需要更改EmpMapper.xml中的namespace为类的完全限定名</span>    <span class="token class-name">Emp</span> <span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//插入</span>    <span class="token class-name">Integer</span> <span class="token function">insertEmp</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新</span>    <span class="token class-name">Integer</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除</span>    <span class="token class-name">Integer</span> <span class="token function">deleteEmp</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 基于注解的方式:@Select("select * from emp where id = #{id}")</span>    <span class="token comment">//  Emp selectEmp(Integer id);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试类MyBatisTest"><a href="#测试类MyBatisTest" class="headerlink" title="测试类MyBatisTest"></a>测试类MyBatisTest</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>tests</span><span class="token punctuation">;</span><span class="token comment">/** * MyBatis搭建步骤: * 0.提前拥有数据库和表 * 1.添加pom依赖: mybatis的核心依赖 和 数据库对应版本的驱动jar包 * 2.添加mybatis全局配置文件(直接复制) * 3.修改全局配置文件中的 数据源配置信息 * 4.添加数据库表对应的POJO对象(相当于实体类) * 5.添加对应的XxxMapper.xml （里面维护了所有的sql） *   修改namespace： *      如果是statementID的方式没有特殊的要求 *      如果是基于接口绑定的方式，必须要等于接口的完整限定名 *   修改对应的id(唯一)， resultType对应返回的类型（如果是pojo就需要指定完整限定名） * 6.修改mybatis的全局配置文件：修改Mapper */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从xml中构建SqlSessionFactory</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 基于statementID的方式去执行(老版本,不推荐)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 参数之一是statementID,通过EmpMapper.xml中来获得</span>            <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.jt.pojo.EmpMapper.selectEmp"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 基于接口绑定的方式(利用xml的方式最为推荐!)     * 1.新建数据访问层的接口：POJOMapper     * 2.添加mapper中对应操作的方法     *      -方法名要和mapper中对应的操作的节点的id要一致     *      -返回类型要和mapper中对应的resultType要一致     *      -mapper中对应的操作的节点的参数必须要在方法的参数中声明     * 3.mapper.xml中的namespace必须要和接口的完整限定名要一致     * 4.修改mybatis全局配置文件中的mappers，采用接口绑定的方式：     *      &lt;mappers&gt;     *          &lt;mapper class="com.jt.mapper.EmpMapper"/&gt;     *      &lt;/mappers&gt;     * 5.一定要将mapper.xml和接口放在同一级目录中,只需要在resources中新建和接口     * 同样结构的文件夹就可以了,最后会将java和resources合并到一起     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Emp</span> emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 基于注解的方式(看起来简单,但是不推荐,因为复杂的SQL语句不好写!)     * 在对应的方法上协商对应的注解     * eg:@Select("select * from emp where id = #{id}")     * 注意:     *      注解可以和xml共用,但是不能同时存在方法对应的xml的id     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Emp</span> emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试类MyBatisCRUD"><a href="#测试类MyBatisCRUD" class="headerlink" title="测试类MyBatisCRUD"></a>测试类MyBatisCRUD</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>tests</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisCRUD</span> <span class="token punctuation">{</span>    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从xml中构建SqlSessionFactory</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Emp</span> emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// openSession()方法中可以添加一个boolean值用于开启自动提交!</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"叙述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Integer</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insertEmp</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//手动提交</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 更新     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// openSession()方法中可以添加一个boolean值用于开启自动提交!</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"更改后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Integer</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">updateEmp</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//手动提交</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// openSession()方法中可以添加一个boolean值用于开启自动提交!</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Integer</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//手动提交</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h3><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111111437930.png" alt="image-20211111143714833"></p><p>日志门面:==SLF4j==(集成日志框架的一个抽象层)</p><p>日志实现:==Log4j2== 或 ==Logback==</p><p>如何在mybatis中实现(采用**==SLF4j+Logback==**)?</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局配置文件详解"><a href="#全局配置文件详解" class="headerlink" title="全局配置文件详解"></a>全局配置文件详解</h3><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111112125467.png" alt="image-20211111212504363"></p><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--注意：classpath（resources）下需要文件db.properties来设置数据库信息        mysql.driver=com.mysql.cj.jdbc.Driver        mysql.url=jdbc:mysql://localhost:3306/mybatis        mysql.username=root        mysql.password=123123--&gt;</span><span class="token comment">&lt;!--就是DOCTYPE后面对应的根节点--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置外部属性资源文件，通过${xxx}引用--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--环境配置，连接的数据库，这里使用的是MySQL        可以多个环境 default可以用id设置选则那个environment    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置数据库环境 id指定当前数据库环境的唯一标识,会被父节点所设置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--指定事务管理的类型，这里简单使用Java的JDBC的提交和回滚设置                type= JDBC      :使用JDBC的事务管理                    =MANAGED    :不使用事务            --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--dataSource 指连接数据源配置，POOLED是JDBC连接对象的数据源连接池的实现                type=POOLED     :使用连接池                    UNPOOLED    :不适用连接池                    JNDI        :在Tomcat中使用            --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--设置映射器 4种方式        1.&lt;mapper resource  :设置Mapper.xml,适用于根据statementId进行操作        2.&lt;mapper class     :设置Mapper接口,适用接口绑定方式        3.&lt;mapper url       :设置磁盘的绝对路径        4.&lt;package          :根据包设置Mapper接口 （常用）    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--这是告诉Mybatis去哪找持久化类的映射文件，对于在src下的文件直接写文件名，     如果在某包下，则要写明路径,如：com/mybatistest/config/User.xml--&gt;</span>        <span class="token comment">&lt;!--&lt;mapper resource="EmpMapper.xml"/&gt;--&gt;</span>        <span class="token comment">&lt;!--接口绑定需要使用class--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--根据包设置包下面的所有Mapper接口--&gt;</span>        <span class="token comment">&lt;!--&lt;package name=""/&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111112202609.png" alt="image-20211111220238457"></p><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p><h4 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注意 如果使用logback作为日志实现层    则需要在resources目录下新建文件    logback.xml文件,内容大概如下    这是约定大于配置的原则!!!!!!!!!!!!    文件名:logback.xml--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--appender 追加器 指示日志以哪种方式进行输出!        name    取个名字        class   不同的实现类会输出到不同的地方                -ch.qos.logback.core.FileAppender   :输出到文件                -ch.qos.logback.core.ConsoleAppender:输出到控制台    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{100} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--控制更细粒度的日志级别,根据包or类--&gt;</span>    <span class="token comment">&lt;!--&lt;logger name="" level="debug"/&gt;--&gt;</span>    <span class="token comment">&lt;!--控制所有的日志级别        trace        debug        info        warn        error    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--将当前日志级别输出到那个追加器上面--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    在java文件中这样使用:    Logger LOGGER = LoggerFactory.getLogger(this.getClass());--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EmpMapper-xml-1"><a href="#EmpMapper-xml-1" class="headerlink" title="EmpMapper.xml"></a>EmpMapper.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--命名空间是 数据库访问层 接口 的 完全限定名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.pojo.Emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT * FROM EMP WHERE id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">mysql.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">mysql.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span><span class="token attr-name">mysql.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">mysql.password</span><span class="token punctuation">=</span><span class="token attr-value">123123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper中的Select元素的属性"><a href="#Mapper中的Select元素的属性" class="headerlink" title="Mapper中的Select元素的属性"></a>Mapper中的Select元素的属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>parameterType</code></td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>flushCache</code></td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td><code>useCache</code></td><td>将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td><code>resultSetType</code></td><td>FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td></tr><tr><td><code>resultSets</code></td><td>这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td></tr></tbody></table><h4 id="Mapper中Insert-Update-Delete-元素的属性"><a href="#Mapper中Insert-Update-Delete-元素的属性" class="headerlink" title="Mapper中Insert, Update, Delete 元素的属性"></a>Mapper中Insert, Update, Delete 元素的属性</h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>parameterMap</code></td><td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>useGeneratedKeys</code></td><td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="left"><code>keyProperty</code></td><td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>keyColumn</code></td><td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>databaseId</code></td><td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr></tbody></table><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111122214713.png" alt="image-20211112221409579"></p><h3 id="参数-返回结果处理"><a href="#参数-返回结果处理" class="headerlink" title="参数-返回结果处理"></a>参数-返回结果处理</h3><p>默认情况下，使用 <code>#{}</code> 参数语法时，MyBatis 会创建 <code>PreparedStatement</code> 参数占位符，==并通过占位符安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法==，不过有时你就是想直接在 SQL 语句中直接插入一个不转义的字符串。 比如 ORDER BY 子句，这时候你可以：</p><h4 id="解决数据库中字段名字与JavaBean字段不匹配的问题"><a href="#解决数据库中字段名字与JavaBean字段不匹配的问题" class="headerlink" title="解决数据库中字段名字与JavaBean字段不匹配的问题"></a>解决数据库中字段名字与JavaBean字段不匹配的问题</h4><p>mybatis-config文件!</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--可以将下划线命名的数据库列映射到java对象的驼峰式命名属性--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111131000922.png" alt="image-20211113100026811"></p><h4 id="参数如何配置"><a href="#参数如何配置" class="headerlink" title="参数如何配置"></a>参数如何配置</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--命名空间是 数据库访问层 接口 的 完全限定名    默认情况下时随意填写，但是采用接口绑定的方式就必须要输入对应的接口的完整限定名    &lt;select id="xxx" resultType="Emp"&gt;resultType后面需要是POJO的完整限定名    如果在config文件中加入了&lt;typeAliases&gt; 可以使用简短的别名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--获取参数的方式:        1.#{}(推荐) :会将参数编译成`?`            -会经过JDBC当中的PreparedStatement的预编译,根据不同的数据类型来编译成             对应的数据库所对应的数据            -能够有效的防止SQL注入            -特殊方式（自带很多内置属性,但通常不会去使用!）        2.${} :参数编译成字符串拼接的方式 "id="+1            -不会进行预编译,直接将输入进来的数据拼接在SQL中            -存在SQL注入的风险            -特殊用法:                1.调试的时候可以临时使用,因为控制台的输出是完整的SQL语句!                2.可以实现:动态表 动态列 动态SQL(前提是一定保证数据安全性)    --&gt;</span>    <span class="token comment">&lt;!--参数传递的处理：        1.单个参数: SelectEmp(Integer id);            mybatis不会有什么强制的要求#{输入任何字符获取参数}        2.多个参数: Emp SelectEmp(Integer id, String username);            mybatis会进行封装,会将传进来的参数封装成Map;            一个值对应两个map项:                -id        ==&gt; {key:arg0 , value:id的值} {key:param1 , value:id的值}                -username  ==&gt; {key:arg1 , value:un的值} {key:param2 , value:un的值}            所以可以使用#{arg0} #{param1} #{arg1} #{param2}            除了使用这种没有意义的参数名还可以使用注解!!!            设置参数的别名@Param("xxx"),当使用了@Param只能使用#{xxx}或者#{paramX}         3.JavaBean参数:            单个参数:Emp selectEmp(Emp emp);                -可以直接使用属性名                emp.id == #{id}                emp.username == #{username}            多个参数:Emp selectEmp(Integer num , Emp emp);                num ==&gt; @Param 或者 #{param1}(只记住param就最好忘记arg)                emp ==&gt; 必须加上对象名 #{param2.id} 或者 @Param("emp") #{emp.id}         4.集合或者数组            Emp selectEmp(List&lt;String&gt; usernames);            如果是list,MyBatis会自动封装为map:            {key:"list" , value :usernames}                要获得usernames.get(0) ==&gt; #{list[0]}            如果是数组,MyBatis会自动封装成map:            {key:"array" , value :usernames}         5.map参数            和javabean的参数传递一样            一般情况下:                请求进来的参数和POJO对应,就用POJO                请求进来的参数没有和POJO对应 , 就用map                请求进来的参数 没有和POJO对应,但使用频率很高,就用TO DTO(就是单独为这些参数创建的javaBean)    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT `emp`.`id`,        `emp`.`user_name`        FROM `mybatis`.`emp` WHERE user_name=#{list[0]} or user_name=#{list[1]};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回结果如何配置"><a href="#返回结果如何配置" class="headerlink" title="返回结果如何配置"></a>返回结果如何配置</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--根据id查询      返回类型设置:        如果返回一行数据,就用POJO接收,或者map        如果返回多行数据,就可以使用List&lt;pojo&gt; List&lt;map&gt;            resultType指定List中泛型类型就可以(pojo map ....)        基础类型或者包装类型直接指定别名就行--&gt;</span><span class="token comment">&lt;!--1.声明resultMap自定义结果集 resultType 和 resultMap 只能使用一个    id 唯一标识,需要和resultMap进行对应    type 需要映射的pojo对象,可以设置别名    autoMapping 自动映射,默认为true ,只要字段名和属性名遵循映射规则就可以自动映射,但是不建议        哪怕属性名,和字段名一一对应也要显示的配置映射    extends 如果多个resultMap有重复的映射,可以声明父resultMap,将公共的映射提取出来,可以减少        子resultMap的映射冗余--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_map<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--主键必须使用id节点,对底层的存储有性能作用,可读性也高        column 需要映射的数据库字段名        property 需要映射的pojo属性名    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_date<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cjsj<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--2.使用resultMap关联 自定义结果集的id--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span>  <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    SELECT `emp`.`id`,    `emp`.`user_name`,    `emp`.`create_date`    FROM `mybatis`.`emp` WHERE id=#{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h3><p><strong>懒加载</strong>(全局模式)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启延迟加载,之后的所有分步查询都是懒加载,默认是立即加载,--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--开启后,使用pojo中任意属性都会启用立即加载延迟查询(贪心),默认是false--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--设置对象的那些方法调用会立即加载延迟查询 默认equals,clone,hashCode,toStrin--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashCode<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>懒加载</strong>(单独配置)</p><p>xxxxxxx</p><p>==懒加载没啥用!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!==</p><p> <img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111132058179.png" alt="image-20211113205810068"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--嵌套结果:一对多 查询部门及所有员工--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDeptAndEmpsMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_date<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createDate<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p> 最有用 最实用的MyBatis特性!</p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111140945832.png" alt="image-20211114094545726" style="zoom:150%;"><p>html特殊转义表:</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111140956680.png" alt="image-20211114095633608"></p><h4 id="if-choose-foreach-set-bind-SQL片段-OGNL"><a href="#if-choose-foreach-set-bind-SQL片段-OGNL" class="headerlink" title="if choose foreach set bind SQL片段 OGNL"></a>if choose foreach set bind SQL片段 OGNL</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--查询Emp 根据id username , 创建的开始时间 , 结束时间 , 部门id        如果在编写SQL过程中出现特殊字符报错:1.进行转义 2.使用cdata &lt;![CDATA[&lt;=]]&gt;    --&gt;</span>    <span class="token comment">&lt;!--        使用动态SQL:        1.实现动态条件SQL        &lt;if&gt;标签            test 支持OGNL表达式          问题: and需要动态拼接的问题(只有一个条件的情况就不需要and,如果多个条件就必须用and/or来拼接)                解决:1.(加一个dummy节点) 'where 1= 1' 后面的条件都加上and/or就行                    2.使用&lt;where&gt;标签                    3.使用&lt;trim&gt;标签         &lt;where&gt;标签            一般会在加载动态条件中配合使用,在有条件情况下会自动在所有条件的前面加上where关键字,            还会去掉所有条件前面的AND.OR         &lt;trim&gt;标签            功能比较灵活,广泛,他可以用来实现where节点的功能            prefix在所有包含的SQL前面加上指定的字符串            prefixOverrides 在所有包含的SQL前面去除指定的字符串            suffix.............            suffixOverrides.........    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select *        from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id!=null and id!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                id = #{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName!=null and userName!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and user_name = #{userName}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beginDate!=null and beginDate!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and create_date &gt;= #{beginDate}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>endDate!=null and endDate!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and create_date <span class="token cdata">&lt;![CDATA[&lt;=]]&gt;</span> #{endDate}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId!=null and deptId!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and dept_id = #{deptId}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--&amp;#45;&amp;#45;and create_date &amp;lt;= #{endDate}--&gt;</span>    <span class="token comment">&lt;!--根据部门名称查询所有员工        choose where otherwise 组合    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryEmp2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName==<span class="token punctuation">'</span>经理<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    dept_id=1                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName==<span class="token punctuation">'</span>普通员工<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    dept_id=2                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>                    dept_id=#{id}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--foreach 循环        实现in范围查询 使用${}可以实现但有SQL注入风险        collection 需要循环的集合的参数名字        item 每次循环使用的接受变量        separator 分隔符设置(每次循环在结尾添加什么分隔符,会自动去除最后一个结尾的分隔符)        open 循环开始添加的字符串        index 循环下标的变量    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryEmp3<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usernames<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name in (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                #{username}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        &lt;set 用在update语句上面        会自动加上set关键字        会自动去除最后一个更新字段的','    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName!=null and userName!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                user_name=#{userName},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createDate!=null and createDate!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                create_date = #{createDate},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptId!=null and deptId!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                dept_id = #{deptId}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--实现模糊查询 like '%xx%'        * 可以使用mysql的字符串拼接:            1.空格拼接            2.CONCAT函数        * 可以拼接好在传进来        * 使用bind在Mapper映射文件上下文声明一个变量&lt;bind&gt;    --&gt;</span>    <span class="token comment">&lt;!--&lt;bind&gt; 在mapper映射文件上下文声明一个变量            name 变量名称            value 值(支持OGNL表达式)    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryEmp4<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + username + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>columns<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>        where user_name like #{_username}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--循环逐条插入!性能不高--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into emp (user_name, create_date, dept_id)        values (#{userName}, #{createDate}, #{deptId})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--批量插入!--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into emp (user_name , create_date , dept_id)        values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            (#{emp.userName},#{emp.createDate},#{emp.deptId})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--        sql片段:        解决SQL中重复的代码冗余 ,可以提取出来放在sql片段中        用&lt;include refid="selectEmp"/&gt;来获取        1.定义SQL片段 id:唯一标识        2.在SQL中引用SQL片段            &lt;refid 需要引用的SQL片段的id            &lt;property 声明变量,就可以在SQL片段中动态调用!让不同的SQL调用同一个片段达到不同目的                name:变量名                value:变量值                一般情况下使用${}在SQL片段中引用,一旦引用,必需保证每个include都声明了该变量    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select *        from emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select ${columns}        from emp    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list|array|map key<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    参数值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>foreach 标签主要有以下属性，说明如下。</p><ul><li><p>item：表示集合中每一个元素进行迭代时的别名。</p></li><li><p>index：指定一个名字，表示在迭代过程中每次迭代到的位置。</p></li><li><p>open：表示该语句以什么开始（既然是 in 条件语句，所以必然以<code>(</code>开始）。</p></li><li><p>separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以<code>,</code>作为分隔符）。</p></li><li><p>close：表示该语句以什么结束（既然是 in 条件语句，所以必然以<code>)</code>开始）。</p></li><li><p>如果传入的是单参数且参数类型是一个 List，==collection 属性值为 list==。</p></li><li><p>如果传入的是单参数且参数类型是一个 array 数组，==collection 的属性值为 array==。</p></li><li><p>如果传入的参数是多个，需要把它们封装成一个 Map，当然单参数也可以封装成 Map。Map 的 key 是参数名，==collection 属性值是传入的 List 或 array 对象在自己封装的 Map 中的 key==。</p></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。 为了使它更加强大而且易于配置</p><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  一级缓存 *  特性: *      1.默认开启,也可以在配置文件中通过设置localCacheScope=STATEMENT来关闭 *      2.作用域是基于sqlSession(默认),一次数据库操会话 *      3.缓存默认实现类PerpetualCache,使用map进行存储的 *          key ==&gt; hashcode + sqlId + sql + environmentsID *      4.查询完进行存储 * *  失效情况: *      1.不同的sqlSession会使以及缓存失效 *      2.同一个sqlSession,但是查询语句不同 *      3.同一个sqlSession,查询语句一样,期间执行增删改操作! *      4.同一个sqlSession,查询语句一样,期间手动清除缓存 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">DeptMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DeptMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dept</span> dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> depts <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectDept</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行增删改,缓存也失效</span>        <span class="token class-name">EmpMapper</span> empMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        empMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"啦啦啦!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sqlSession.clearCache();</span>        <span class="token class-name">Dept</span> dept1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> depts2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectDept</span><span class="token punctuation">(</span>dept1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>depts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     *  二级缓存:     *  特性:     *      1.默认开启,但没有实现!     *      2.作用域:基于全局范围,应用级别     *      3.缓存默认实现类PerpetualCache,使用map进行存储的     *          (二级缓存上面还有一层map[命名空间:二级map])     *         key ==&gt; hashcode + sqlId + sql + environmentsID     *      4.事务提交的时候(sqlSession关闭)存储     *      5.先从二级缓存获取 在向一级缓存获取     *     *   实现(乱用会OOM!):     *      1.开启默认缓存(setting中设置cacheEnabled)     *      2.在需要用到二级缓存的映射文件(xxxMapper.xml)中加入&lt;cache&gt;&lt;/cache&gt;     *          基于Mapper映射文件来实现缓存的,基于Mapper映射文件的命名空间来存储的     *      3.在需要用到二级缓存的javaBean实现序列化!     *          配置成功就会出现缓存命中率,同一个sqlID,从缓存中拿出的次数 / 查询总次数     *     *    失效:     *      1.同一个命名空间进行了增删改,会导致二级缓存失效     *          (不推荐)如果不想失效:可以将SQL(xxxMapper.xml中的sql)的flushCache 设置为false     *          但是要慎重,涉及数据脏读问题,除非保证查询的数据永远不会执行增删改     *      2.让查询不缓存数据到二级缓存中useCache=false     *         xxxMapper.xml     *         &lt;select id="selectDept" resultType="Dept" useCache="false"&gt;     *      3.如果希望其他mapper映射文件的命名空间执行了增删改 清空另外的命名空间就可以设置:     *         xxxMapper.xml     *         &lt;cache-ref namespace="com.jt.mapper.DeptMapper"/&gt;     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">DeptMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DeptMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Dept</span> dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dept<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> depts <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectDept</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行增删改,缓存也失效</span>            <span class="token class-name">EmpMapper</span> empMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            empMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"啦啦啦!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// sqlSession.clearCache();</span>            <span class="token class-name">Dept</span> dept1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dept1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> depts2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectDept</span><span class="token punctuation">(</span>dept1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>depts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整合第三方缓存-redis"><a href="#整合第三方缓存-redis" class="headerlink" title="整合第三方缓存-redis"></a>整合第三方缓存-redis</h4><p>DeptMapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--type:配置第三方缓存redis--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.caches.redis.RedisCache<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>//引入maven后的cache实现类    ............................<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-beta2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆向工程-amp-分页插件"><a href="#逆向工程-amp-分页插件" class="headerlink" title="逆向工程&amp;分页插件"></a>逆向工程&amp;分页插件</h3><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></p><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--分页插件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis-config.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--注册分页插件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--helperDialect(可省略),设置当前数据库的方言,默认检查当前使用的数据库--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helperDialect<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在需要执行分页查询的上面调用PageHelper.startPage设置 当前页和 数据量</span>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在查询完成后封装成PageInfo 因为pageinfo中的属性非常实用</span>        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//page 传到request域中 来使用</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mybatis插件原理-未学习"><a href="#mybatis插件原理-未学习" class="headerlink" title="mybatis插件原理(未学习)"></a>mybatis插件原理(未学习)</h4><ul><li>动态代理</li><li>责任链设计模式</li></ul><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><blockquote><ul><li>==Executor== (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>==ParameterHandler== (getParameterObject, setParameters)</li><li>==ResultSetHandler== (handleResultSets, handleOutputParameters)</li><li>==StatementHandler== (prepare, parameterize, batch, update, query)</li></ul></blockquote><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111161650545.png" alt="image-20211116165039395"></p><h4 id="逆向工程-代码生成器"><a href="#逆向工程-代码生成器" class="headerlink" title="逆向工程(代码生成器)"></a>逆向工程(代码生成器)</h4><p><a href="http://mybatis.org/generator/">http://mybatis.org/generator/</a></p><p>generatorConfig.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--如果需要使用command的方式生成需要配置数据库驱动的jar包,需要配置classPathEntry--&gt;</span>    <span class="token comment">&lt;!--&lt;classPathEntry location=""/&gt;--&gt;</span>    <span class="token comment">&lt;!--context上下文 配置生成规则        id:随意        targetRuntime:生成策略            MyBatis3DynamicSql:默认的 , 会生成 动态生成sql的方式(没有xml)            MyBatis3:生成通用的查询,可以指定动态where条件            MyBatis3Simple:最简单的只生成简单的CRUD(一般场景下推荐使用)    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simple<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--设置是否生成注释 true不生成 注意:如果不生成注释,代码将不会进行合并--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置数据源--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxxx<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--pojo            javaModelGenerator:java实体生成规则(POJO)            targetPackage:生成到那个包下            targetProject:生成到当前文件的那个相对路径下        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--mapper xml映射文件            sqlMapGenerator:Mapper.xml映射文件生成规则            targetPackage:生成到那个包下            targetProject:生成到当前文件的那个相对路径下        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--mapper接口            type:指定生成方式                ANNOTATEDMAPPER:注解方式                XMLMAPPER:接口绑定方式 要配置&lt;sqlMapGenerator        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jt.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--配置那些表需要进行代码生成                tableName:表名                domainObjectName:pojo类名                mapperName:对应mapper接口的类名 和 mapper.xml文件名        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span> <span class="token attr-name">mapperName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmpMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span> <span class="token attr-name">mapperName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成所有mybaits相关文件的java代码!!!!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> configFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"generatorConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ConfigurationParser</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Configuration</span> config <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DefaultShellCallback</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyBatisGenerator</span> myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>    myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 学习笔记（二）垃圾回收</title>
      <link href="/2022/01/03/JVM%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2022/01/03/JVM%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-学习笔记（二）垃圾回收"><a href="#JVM-学习笔记（二）垃圾回收" class="headerlink" title="JVM 学习笔记（二）垃圾回收"></a>JVM 学习笔记（二）垃圾回收</h1><h1 id="三、垃圾回收"><a href="#三、垃圾回收" class="headerlink" title="三、垃圾回收"></a>三、垃圾回收</h1><h2 id="1、如何判断对象可以回收"><a href="#1、如何判断对象可以回收" class="headerlink" title="1、如何判断对象可以回收"></a>1、如何判断对象可以回收</h2><h3 id="1）引用计数法"><a href="#1）引用计数法" class="headerlink" title="1）引用计数法"></a>1）引用计数法</h3><p><font color="blueviolet">当一个对象被引用时，就当引用对象的值加一，当值为 0 时，就表示该对象不被引用，可以被垃圾收集器回收。</font> 这个引用计数法听起来不错，但是有一个<font color="red">弊端</font>，如下图所示，==循环引用==时，两个对象的计数都为1，导致两个对象都无法被释放。<img src="https://img-blog.csdnimg.cn/20210208191757858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2）可达性分析算法"><a href="#2）可达性分析算法" class="headerlink" title="2）可达性分析算法"></a>2）可达性分析算法</h3><p>类比学习=&gt;<span class="github-emoji"><span>🍇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><font color="blue">葡萄的根所连接的葡萄就是不能被回收的对象</font></p><ul><li>JVM 中的垃圾回收器通过==可达性分析==来探索<font color="blueviolet">所有存活的对象</font>- </li><li>扫描==堆==中的对象，看能否沿着 ==GC Root== 对象为起点的引用链找到该对象，如果找不到，则表示可以回收可以作为 GC Root(<font color="orange">肯定不能被当成垃圾进行回收的对象</font>) 的对象 </li><li><ul><li><span class="github-emoji"><span>👧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><code>虚拟机栈</code>（栈帧中的本地变量表）中引用的对象。- </li><li><span class="github-emoji"><span>🎲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><code>方法区中类静态属性</code>引用的对象</li><li><span class="github-emoji"><span>🗡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><code>方法区中常量</code>引用的对象- 例如字符串常量池里的引用!</li><li><span class="github-emoji"><span>🌊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><code>本地方法栈中 JNI</code>（即一般说的Native方法）引用的对象</li><li><span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><code>被同步锁(synchronized)持有的对象等</code><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>对于以上代码，可以使用如下命令将堆内存信息转储成一个文件，然后使用 Eclipse Memory Analyzer 工具进行分析。 第一步： 使用 jps 命令，查看程序的进程 <img src="https://img-blog.csdnimg.cn/20210209111015399.png" alt="在这里插入图片描述"> 第二步： <img src="https://img-blog.csdnimg.cn/20210209111229838.png" alt="在这里插入图片描述"> 使用 jmap -dump:format=b,live,file=1.bin 16104 命令转储文件 dump：转储文件 format=b：二进制文件 file：文件名 16104：进程的id 第三步：打开 Eclipse Memory Analyzer 对 1.bin 文件进行分析。 <img src="https://img-blog.csdnimg.cn/20210209111656952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 分析的 gc root，找到了 ArrayList 对象，然后将 list 置为null，再次转储，那么 list 对象就会被回收。</p><h3 id="3）四种引用"><a href="#3）四种引用" class="headerlink" title="3）四种引用"></a>3）四种引用</h3><img src="https://img-blog.csdnimg.cn/20210209113952135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><p>==软引用和弱引用也是对象如果想对它们做处理需要使用到队列来找到他们!==</p><ol><li>==强引用== <font color="red">只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收</font></li><li>==软引用==（SoftReference） 仅有软引用引用该对象时，<font color="blueviolet">在垃圾回收后，内存仍不足时会再次触发垃圾回收，回收软引用对象 可以配合引用队列来释放软引用自身</font></li><li> ==弱引用==（WeakReference） 仅有弱引用引用该对象时，在垃圾回收时，<font color="cblue">无论内存是否充足，都会回收弱引用对象 可以配合引用队列来释放弱引用自身</font></li><li>==虚引用==（PhantomReference） <font color="orange">必须配合引用队列使用</font>，主要配合 ByteBuffer 使用，被引用对象回收时，会将虚引用入队， 由 Reference Handler 线程调用虚引用相关方法释放直接内存,目的就是<font color="orange">能在对象被回收时收到一个系统通知</font></li><li> ==终结器引用==（FinalReference） <font color="blue">无需手动编码</font>，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队（被引用对象暂时没有被回收），再由<code> Finalizer 线程</code>通过终结器引用找到被引用对象并调用它的 <code>finalize </code>方法，第二次 GC 时才能回收被引用对象。</li></ol><p><strong>演示软引用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 演示 软引用 * -Xmx20m -XX:+PrintGCDetails -verbose:gc */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_08_SoftReferenceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> _4MB <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 设置 -Xmx20m , 演示堆内存不足,</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4MB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 演示 软引用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4MB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"循环结束："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ref <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>method1 方法解析： </p><blockquote><p>首先会设置一个堆内存的大小为<code> 20m</code>，然后运行<code>mehtod1</code>方法，会抛异常，<code>堆内存不足</code>，因为 mehtod1 中的 list 都是<code>强引用</code>。 </p></blockquote><img src="https://img-blog.csdnimg.cn/20210209125537878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <p>method2 方法解析：</p><blockquote><p> 在 list 集合中存放了 <code>软引用对象</code>，<font color="red">当内存不足时，会触发 full gc</font>，将软引用的对象回收。细节如图： </p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210209130334776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 上面的代码中，<font color="blue">当软引用引用的对象被回收了</font>，==但是软引用还存在==，所以，<font color="blue">一般软引用需要搭配一个引用队列一起使用</font>。 修改 method2 如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 演示 软引用 搭配引用队列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 引用队列</span>        <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 关联了引用队列，当软引用所关联的 byte[] 被回收时，软引用自己会加入到 queue 中去</span>            <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4MB<span class="token punctuation">]</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 从队列中获取无用的 软引用对象，并移除</span>        <span class="token class-name">Reference</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>poll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>poll<span class="token punctuation">)</span><span class="token punctuation">;</span>            poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ref <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/20210209140627985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <p><strong>弱引用演示</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_09_WeakReferenceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        method1();</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> _4MB <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment">// 演示 弱引用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4MB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>weakReference<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> wake <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>wake<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 演示 弱引用搭配 引用队列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4MB<span class="token punctuation">]</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>weakReference<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> wake <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>wake<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reference</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>poll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>poll<span class="token punctuation">)</span><span class="token punctuation">;</span>            poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> wake <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>wake<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、垃圾回收算法"><a href="#2、垃圾回收算法" class="headerlink" title="2、垃圾回收算法"></a>2、垃圾回收算法</h2><h3 id="1）标记清除"><a href="#1）标记清除" class="headerlink" title="1）标记清除"></a>1）标记清除</h3><p><code>Mark Sweep</code> </p><ul><li><p>==速度较快但会产生内存碎片== </p><p><font color="cblue">清除的过程是逻辑上的清除,实际上是将内存起始地址保存下来,用于后面的对象的分配</font></p><img src="https://img-blog.csdnimg.cn/20210209142921425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">### 2）标记整理</li></ul><p><code>Mark Compact</code></p><ul><li>==速度慢-但没有内存碎片== <img src="https://img-blog.csdnimg.cn/20210209143504936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="3）复制"><a href="#3）复制" class="headerlink" title="3）复制"></a>3）复制</h3></li></ul><p><code>Copy</code></p><ul><li>==不会有内存碎片-但需要占用两倍内存空间== <img src="https://img-blog.csdnimg.cn/20210209144026784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="4）分代垃圾回收"><a href="#4）分代垃圾回收" class="headerlink" title="4）分代垃圾回收"></a>4）分代垃圾回收</h3><h2 id="3、分代垃圾回收"><a href="#3、分代垃圾回收" class="headerlink" title="3、分代垃圾回收"></a>3、分代垃圾回收</h2><img src="https://img-blog.csdnimg.cn/20210209161407621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">- <font color="red">新创建的对象</font>首先分配在 `eden` 区- - <font color="cblue">新生代空间不足时</font>，触发 `minor gc `，`eden` 区 和` from` 区存活的对象使用 ==copy== 复制到 to 中，存活的对象==年龄加一==，然后交换 `from` `to`- `minor gc` 会引发 `stop the world`，<font color="blue">暂停其他线程(对象地址发生改变)，等垃圾回收结束后，恢复用户线程运行</font>- <font color="orange">当幸存区对象的寿命超过阈值时，会晋升到老年代</font>，最大的寿命是 `15（4bit`）-  当老年代空间不足时，会先触发` minor gc`，如果空间仍然不足，那么就触发` full fc` ，停止的时间更长！### 1）相关 JVM 参数<table><thead><tr><th align="center">含义</th><th align="center">参数</th></tr></thead><tbody><tr><td align="center">堆初始大小</td><td align="center">-Xms</td></tr><tr><td align="center">堆最大大小</td><td align="center">-Xmx 或 -XX:MaxHeapSize=size</td></tr><tr><td align="center">新生代大小</td><td align="center">-Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size )</td></tr><tr><td align="center">幸存区比例（动态）</td><td align="center">-XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy</td></tr><tr><td align="center">幸存区比例</td><td align="center">-XX:SurvivorRatio=ratio</td></tr><tr><td align="center">晋升阈值</td><td align="center">-XX:MaxTenuringThreshold=threshold</td></tr><tr><td align="center">晋升详情</td><td align="center">-XX:+PrintTenuringDistribution</td></tr><tr><td align="center">GC详情</td><td align="center">-XX:+PrintGCDetails -verbose:gc</td></tr><tr><td align="center">FullGC 前 MinorGC</td><td align="center">-XX:+ScavengeBeforeFullGC</td></tr></tbody></table><h3 id="2）GC-分析"><a href="#2）GC-分析" class="headerlink" title="2）GC 分析"></a>2）GC 分析</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code_10_GCTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _512KB <span class="token operator">=</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _6MB <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _7MB <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _8MB <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment">// -Xms20m -Xmx20m -Xmn10m -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_6MB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_512KB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_6MB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_512KB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_6MB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码，给 list 分配内存，来观察 新生代和老年代的情况，什么时候触发 <code>minor gc</code>，什么时候触发 <code>full gc</code> 等情况，使用前需要设置<code> jvm 参数</code>。</p><p><span class="github-emoji"><span>📦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>如果<font color="cblue">子线程出现内存溢出的问</font>题,<font color="blue">不会导致主线程结束</font></p><h2 id="4、垃圾回收器"><a href="#4、垃圾回收器" class="headerlink" title="4、垃圾回收器"></a>4、垃圾回收器</h2><blockquote><p><span class="github-emoji"><span>🏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>垃圾回收器分类</p><ul><li>串行垃圾回收器</li><li>吞吐量优先的垃圾回收器</li><li>响应时间优先的垃圾回收器</li><li>G1收集器</li></ul></blockquote><p><strong>相关概念：</strong></p><ul><li><p>并行收集：<font color="blue">指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态</font>。</p></li><li><p>并发收集：<font color="orange">指用户线程与垃圾收集线程同时工作</font>（不一定是并行的可能会交替执行）。<font color="orange">用户程序在继续运行，而垃圾收集程序运行在另一个 CPU 上</font>- </p></li><li><p>吞吐量：即 CP 总消耗时间的比值</p><p>（<code>吞吐量</code> = <code>运行用户代码时间</code> / <strong>(</strong> <code>运行用户代码时间</code> <strong>+</strong> <code>垃圾收集时间</code> **)**），也就是。例如：虚拟机共运行 100 分钟，垃圾收集器花掉 1 分钟，那么吞吐量就是 99% 。</p><h3 id="1）串行"><a href="#1）串行" class="headerlink" title="1）串行"></a>1）串行</h3></li><li><p><code>单线程</code></p></li><li><p><code>堆内存较少</code>，适合个人电脑</p><img src="https://img-blog.csdnimg.cn/20210210092812153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-XX:+UseSerialGC<span class="token operator">=</span>serial + serialOld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安全点</strong>：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象 因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入阻塞状态</p><p><strong>Serial 收集器</strong> Serial 收集器是最基本的、发展历史最悠久的收集器 <strong>特点</strong>：单线程、简单高效（与其他收集器的单线程相比），采用复制算法。对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）！</p><p><strong>ParNew 收集器</strong> ParNew 收集器其实就是 Serial 收集器的多线程版本 <strong>特点</strong>：多线程、ParNew 收集器默认开启的收集线程数与CPU的数量相同，在 CPU 非常多的环境中，可以使用 -XX:ParallelGCThreads 参数来限制垃圾收集的线程数。和 Serial 收集器一样存在 Stop The World 问题</p><p><strong>Serial Old 收集器</strong> Serial Old 是 Serial 收集器的老年代版本 <strong>特点</strong>：同样是单线程收集器，采用标记-整理算法</p><h3 id="2）吞吐量优先"><a href="#2）吞吐量优先" class="headerlink" title="2）吞吐量优先"></a>2）吞吐量优先</h3><ul><li><code>多线程</code></li><li><code>堆内存较大</code>，</li></ul><blockquote><p>多核 cpu- <font color="blue">让单位时间内，STW 的时间最短</font> 0.2 0.2 = 0.4</p></blockquote><img src="https://img-blog.csdnimg.cn/20210210094915306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-XX:+UseParallelGC ~ -XX:+UsePrallerOldGC-XX:+UseAdaptiveSizePolicy-XX:GCTimeRatio<span class="token operator">=</span>ratio // <span class="token number">1</span>/<span class="token punctuation">(</span><span class="token number">1</span>+radio<span class="token punctuation">)</span>-XX:MaxGCPauseMillis<span class="token operator">=</span>ms // 200ms-XX:ParallelGCThreads<span class="token operator">=</span>n // 线程数 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Parallel Scavenge 收集器</strong> 与吞吐量关系密切，故也称为吞吐量优先收集器 <strong>特点</strong>：属于新生代收集器也是采用复制算法的收集器（用到了新生代的幸存区），又是并行的多线程收集器（与 ParNew 收集器类似）</p><p>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与 ParNew 收集器最重要的一个区别）</p><p>GC自适应调节策略： Parallel Scavenge 收集器可设置 -XX:+UseAdptiveSizePolicy 参数。 当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRation）、 晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为 GC 的自适应调节策略。</p><p>Parallel Scavenge 收集器使用两个参数控制吞吐量：</p><ul><li>XX:MaxGCPauseMillis=ms 控制最大的垃圾收集停顿时间（默认200ms）- XX:GCTimeRatio=rario 直接设置吞吐量的大小</li></ul><p><strong>Parallel Old 收集器</strong> 是 Parallel Scavenge 收集器的老年代版本 <strong>特点</strong>：多线程，采用标记-整理算法（老年代没有幸存区）</p><h3 id="3）响应时间优先"><a href="#3）响应时间优先" class="headerlink" title="3）响应时间优先"></a>3）响应时间优先</h3><ul><li><code>多线程 </code></li><li><code>堆内存较大</code></li></ul><blockquote><p> 多核 cpu- <font color="cblue">尽可能让 STW 的单次时间最短</font> 0.1 0.1 0.1 0.1 0.1 = 0.5</p></blockquote><img src="https://img-blog.csdnimg.cn/20210210104030390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-XX:+UseConcMarkSweepGC ~ -XX:+UseParNewGC ~ SerialOld-XX:ParallelGCThreads<span class="token operator">=</span>n ~ -XX:ConcGCThreads<span class="token operator">=</span>threads-XX:CMSInitiatingOccupancyFraction<span class="token operator">=</span>percent-XX:+CMSScavengeBeforeRemark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CMS 收集器</strong><code> Concurrent Mark Sweep</code>，一种以获取最短回收停顿时间为目标的<strong>老年代收集器</strong> <strong>特点</strong>：基于标记-清除算法实现。并发收集、低停顿，但是会产生内存碎片 <strong>应用场景</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如 web 程序、b/s 服务 <strong>CMS 收集器的运行过程分为下列4步：</strong> <strong>初始标记</strong>：标记 GC Roots 能直接到的对象。速度很快但是仍存在 Stop The World 问题。 <strong>并发标记</strong>：进行 GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行。 <strong>重新标记</strong>：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在 Stop The World 问题 <strong>并发清除</strong>：对标记的对象进行清除回收，清除的过程中，可能任然会有新的垃圾产生，这些垃圾就叫浮动垃圾，如果当用户需要存入一个很大的对象时，新生代放不下去，老年代由于浮动垃圾过多，就会退化为 serial Old 收集器，将老年代垃圾进行标记-整理，当然这也是很耗费时间的！</p><p>CMS 收集器的内存回收过程是与用户线程一起并发执行的，可以搭配 ParNew 收集器（多线程，新生代，复制算法）与 Serial Old 收集器（单线程，老年代，标记-整理算法）使用。</p><h3 id="4）G1-收集器"><a href="#4）G1-收集器" class="headerlink" title="4）G1 收集器"></a>4）G1 收集器</h3><p><font color="cblue">取代之前的cms收集器</font></p><p><strong>定义：</strong><code> Garbage First</code> <strong>适用场景：</strong></p><ul><li>==同时注重吞吐量和低延迟==（响应时间）</li><li>==超大堆内存==（内存大的），会将堆内存<font color="blue">划分为多个大小相等的区域</font></li><li>==整体上==是<font color="blue">标记-整理</font>算法，<font color="blue">两个区域之间是复制算法</font></li><li><strong>相关参数：</strong> JDK8 并不是默认开启的，所需要参数开启</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-XX:+UseG1GC-XX:G1HeapRegionSize<span class="token operator">=</span>size-XX:MaxGCPauseMillis<span class="token operator">=</span>time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="G1-垃圾回收阶段"><a href="#G1-垃圾回收阶段" class="headerlink" title="G1 垃圾回收阶段"></a>G1 垃圾回收阶段</h4><p><img src="https://img-blog.csdnimg.cn/20210210114932887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <code>Young Collection</code>：对新生代垃圾收集 </p><p><code>Young Collection</code> + <code>Concurrent Mark</code>：如果老年代内存到达一定的阈值了，新生代垃圾收集同时会执行一些并发的标记。</p><p> <code>Mixed Collection</code>：会对新生代 + 老年代 + 幸存区等进行混合收集，然后收集结束，会重新进入新生代收集。</p><h4 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h4><p><strong>新生代存在 STW：</strong> 分代是按对象的生命周期划分，分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间！ <code>E：eden</code>，<code>S：幸存区</code>，<code>O：老年代</code> 新生代收集会产生 STW ！ <img src="https://img-blog.csdnimg.cn/20210210122339138.gif" alt="在这里插入图片描述"></p><h4 id="Young-Collection-CM"><a href="#Young-Collection-CM" class="headerlink" title="Young Collection + CM"></a>Young Collection + CM</h4><ul><li><p>在 Young GC 时会进行 GC Root 的初始化标记 </p></li><li><p>老年代占用堆空间比例达到阈值时，进行并发标记（不会STW），由下面的 JVM 参数决定 -<code>XX:InitiatingHeapOccupancyPercent=percent （默认45%） </code><img src="https://img-blog.csdnimg.cn/20210210122601873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h4 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h4><p>会对 E S O 进行<strong>全面的回收</strong></p><ul><li><p>最终标记会 STW</p></li><li><p>拷贝存活会 STW</p><p><code>-XX:MaxGCPauseMills=xxms </code>用于指定最长的停顿时间！</p><p> <font color="red">问：</font><font color="red">为什么有的老年代被拷贝了，有的没拷贝？</font> <font color="cblue">因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会回收最有价值的老年代（回收后，能够得到更多内存） </font><img src="https://img-blog.csdnimg.cn/20210210144216170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h4 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h4><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202112140955153.png" alt="image-20211214095522016"></p><p>G1 在老年代内存不足时（老年代所占内存超过<code>阈值</code>） </p><p><font color="red">如果垃圾产生速度慢于垃圾回收速度</font>，==不会触发 Full GC==，还是并发地进行清理</p><p><font color="cblue">如果垃圾产生速度快于垃圾回收速度</font>，==便会触发 Full GC==，然后退化成 serial Old 收集器串行的收集，就会导致停顿的时候长。</p><h4 id="Young-Collection-跨代引用"><a href="#Young-Collection-跨代引用" class="headerlink" title="Young Collection 跨代引用"></a>Young Collection 跨代引用</h4><ul><li>新生代回收的跨代引用（老年代引用新生代）问题 <img src="https://img-blog.csdnimg.cn/20210210154730275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><code>卡表 </code>与 <code>Remembered Set </code>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<br> 脏卡：O 被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡<h4 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h4></li></ul><p>重新标记阶段 ==在垃圾回收时，收集器处理对象的过程中==</p><ul><li><code>黑色</code>：已被处理，需要保留的</li><li><code>灰色</code>：正在处理中的</li><li><code>白色</code>：还未处理的 <img src="https://img-blog.csdnimg.cn/20210210161204728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是在并发标记过程中，有可能 A 被处理了以后未引用 C ，但该处理过程还未结束，在处理过程结束之前 A 引用了 C ，这时就会用到 remark 。 过程如下</li><li>之前 C 未被引用，这时 A 引用了 C ，就会给 C 加一个==写屏障==，写屏障的指令会被执行，将 C 放入一个队列当中，并将 C 变为 处理中状态- 在并发标记阶段结束以后，重新标记阶段会 STW ，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它，由灰色变成黑色。<br><img src="https://img-blog.csdnimg.cn/20210210161559793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210210161527103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="JDK-8u20-字符串去重"><a href="#JDK-8u20-字符串去重" class="headerlink" title="JDK 8u20 字符串去重"></a>JDK 8u20 字符串去重</h4><p>过程</p><ul><li>将所有新分配的字符串（底层是 char[] ）放入一个队列- 当新生代回收时，G1 并发检查是否有重复的字符串- 如果字符串的值一样，就让他们引用同一个字符串对象注意，其与 String.intern() 的区别 <ul>- String.intern() 关注的是字符串对象- 字符串去重关注的是 char[]- 在 JVM 内部，使用了不同的字符串标优点与缺点<li>节省了大量内存- 新生代回收时间略微增加，导致略微多占用 CPU<pre class="line-numbers language-none"><code class="language-none">-XX:+UseStringDeduplication<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="JDK-8u40-并发标记类卸载"><a href="#JDK-8u40-并发标记类卸载" class="headerlink" title="JDK 8u40 并发标记类卸载"></a>JDK 8u40 并发标记类卸载</h4><p>在并发标记阶段结束以后，就能知道哪些类不再被使用。如果一个类加载器的所有类都不在使用，则卸载它所加载的所有类</p><h4 id="JDK-8u60-回收巨型对象"><a href="#JDK-8u60-回收巨型对象" class="headerlink" title="JDK 8u60 回收巨型对象"></a>JDK 8u60 回收巨型对象</h4><ul><li>一个对象大于region的一半时，就称为巨型对象- G1不会对巨型对象进行拷贝- 回收时被优先考虑- G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉<img src="https://img-blog.csdnimg.cn/20210210165555732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="JDK-9-并发标记起始时间的调整"><a href="#JDK-9-并发标记起始时间的调整" class="headerlink" title="JDK 9 并发标记起始时间的调整"></a>JDK 9 并发标记起始时间的调整</h4><ul><li>并发标记必须在堆空间占满前完成，否则退化为 FulGC- JDK 9 之前需要使用 -XX:InitiatingHeapOccupancyPercentJDK 9 可以动态调整 <ul>- -XX:InitiatingHeapOccupancyPercent 用来设置初始值- 进行数据采样并动态调整- 总会添加一个安全的空挡空间## 5、垃圾回收调优</ul><p>查看虚拟机参数命令</p><pre class="line-numbers language-none"><code class="language-none">D:\JavaJDK1.8\bin\java  -XX:+PrintFlagsFinal -version | findstr "GC"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以根据参数去查询具体的信息</p><h3 id="1）调优领域"><a href="#1）调优领域" class="headerlink" title="1）调优领域"></a>1）调优领域</h3><blockquote><p><span class="github-emoji"><span>🍨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>应该考虑的调优方向</p></blockquote><ul><li><code>内存</code></li><li><code>锁竞争</code></li><li><code>cpu 占用</code></li><li><code> io</code></li><li><code>gc</code><h3 id="2）确定目标"><a href="#2）确定目标" class="headerlink" title="2）确定目标"></a>2）确定目标</h3></li></ul><ul><li>低延迟/高吞吐量？ 选择合适的GC</li></ul><ul><li>CMS(jdk9之后不推荐), ==G1(推荐)== , ZGC</li><li> ParallelGC</li><li>Zing<h3 id="3）最快的-GC"><a href="#3）最快的-GC" class="headerlink" title="3）最快的 GC"></a>3）最快的 GC</h3></li></ul><p>==首先排除减少因为自身编写的代码而引发的内存问题==</p><p>查看 Full GC 前后的内存占用，<font color="blue">考虑以下几个问题 </font></p><ul><li><p>数据是不是太多？ </p><pre><code>`resultSet = statement.executeQuery(“select * from 大表 limit n”)`(推荐使用`limit`) </code></pre></li><li><p>数据表示是否太臃肿</p><ul><li>对象图</li><li>对象大小</li></ul></li><li><p>是否存在内存泄露</p><ul><li><code>static Map map</code> -&gt; 推荐<font color="blue">软引用 弱引用 第三方缓存实现</font></li></ul></li></ul><h3 id="4）新生代调优"><a href="#4）新生代调优" class="headerlink" title="4）新生代调优"></a>4）新生代调优</h3><p> 新生代的特点<br> <font color="red">所有的 new 操作分配内存都是非常廉价的 </font></p><ul><li>TLAB thread-lcoal allocation buffer</li></ul><p>  新生代内存越大越好么？<br>  不是 </p><pre><code> - 新生代内存太小：`频繁触发 Minor GC`，会 STW ，会使得吞吐量下降-  - 新生代内存太大：老年代内存占比有所降低，会更`频繁地触发 Full GC`。而且触发 Minor GC 时，清理新生代所花费的时间会更长 - 幸存区需要能够保存 `当前活跃对象`+`需要晋升的对象`</code></pre><p>==新生代占比建议:==<code>1/4</code>-<code>1/2</code></p><p><span class="github-emoji"><span>🔎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 晋升阈值配置得当，<font color="orange">让长时间存活的对象尽快晋升</font></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-XX:MaxTenuringThreshold<span class="token operator">=</span>threshold-XX:+PrintTenuringDistrubution<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5）老年代调优"><a href="#5）老年代调优" class="headerlink" title="5）老年代调优"></a>5）老年代调优</h3><p>以 CMS 为例：</p><ul><li>CMS 的老年代<font color="cblue">内存越大越好</font></li><li>先尝试不做调优，如果没有 Full GC 那么已经，否者先尝试调优新生代。- </li><li>观察发现 Full GC 时老年代内存占用，将老年代内存预设调大<code> 1/4</code> ~ <code>1/3</code><pre class="line-numbers language-none"><code class="language-none">-XX:CMSInitiatingOccupancyFraction=percent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="6）案例"><a href="#6）案例" class="headerlink" title="6）案例"></a>6）案例</h3><p>案例1：Full GC 和 Minor GC 频繁 案例2：请求高峰期发生 Full GC，单次暂停时间特别长（CMS） 案例3：老年代充裕情况下，发生 Full GC（jdk1.7）</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/01/03/Redis6.2.x%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/03/Redis6.2.x%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>该技术博客是关于尚硅谷最新发布的Redis教程的笔记总结，希望能在这里分享出来，为大家带来帮助</p><blockquote><hr></blockquote><h1 id="二、NoSQL数据库简介"><a href="#二、NoSQL数据库简介" class="headerlink" title="二、NoSQL数据库简介"></a>二、NoSQL数据库简介</h1><h2 id="1-技术发展"><a href="#1-技术发展" class="headerlink" title="1.技术发展"></a>1.技术发展</h2><p>技术的分类：</p><ol><li>解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN1. 解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis1. 解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch<h3 id="1-1-Web1-0时代"><a href="#1-1-Web1-0时代" class="headerlink" title="1.1 Web1.0时代"></a>1.1 Web1.0时代</h3></li></ol><p>Web1.0的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。 <img src="https://img-blog.csdnimg.cn/20210420153042580.png" alt="在这里插入图片描述"></p><h3 id="1-2-Web2-0时代"><a href="#1-2-Web2-0时代" class="headerlink" title="1.2 Web2.0时代"></a>1.2 Web2.0时代</h3><p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。 <img src="https://img-blog.csdnimg.cn/20210420153100849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-3-解决CPU及内存压力"><a href="#1-3-解决CPU及内存压力" class="headerlink" title="1.3 解决CPU及内存压力"></a>1.3 解决CPU及内存压力</h3><img src="https://img-blog.csdnimg.cn/20210420153116276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><p>==什么是Session? 服务器为了保存用户状态而创建的一个特殊的对象==</p><h3 id="1-4-解决IO压力"><a href="#1-4-解决IO压力" class="headerlink" title="1.4 解决IO压力"></a>1.4 解决IO压力</h3><img src="https://img-blog.csdnimg.cn/20210420153131712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="2-NoSQL数据库"><a href="#2-NoSQL数据库" class="headerlink" title="2.NoSQL数据库"></a>2.NoSQL数据库</h2><h3 id="2-1-NoSQL数据库概述"><a href="#2-1-NoSQL数据库概述" class="headerlink" title="2.1 NoSQL数据库概述"></a>2.1 NoSQL数据库概述</h3><p>NoSQL(<mark>Not Only SQL</mark>)，意即“不仅仅是SQL”，泛指非关系型的数据库。</p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li>不遵循SQL标准- 不支持ACID- 远超于SQL的性能<h3 id="2-2-NoSQL适用场景"><a href="#2-2-NoSQL适用场景" class="headerlink" title="2.2 NoSQL适用场景"></a>2.2 NoSQL适用场景</h3></li><li>对数据高并发的读写- 海量数据的读写- 对数据高可扩展性的<h3 id="2-3-NoSQL不适用场景"><a href="#2-3-NoSQL不适用场景" class="headerlink" title="2.3 NoSQL不适用场景"></a>2.3 NoSQL不适用场景</h3></li><li>需要事务支持- 基于sql的结构化查询存储，处理复杂的关系,需要即席查询。- </li><li><mark>用不着sql的和用了sql也不行的情况，请考虑用NoSql</mark></li></ul><h3 id="2-4-常见的NoSQL数据库"><a href="#2-4-常见的NoSQL数据库" class="headerlink" title="2.4 常见的NoSQL数据库"></a>2.4 常见的NoSQL数据库</h3><blockquote><p> Memcache <img src="https://img-blog.csdnimg.cn/20210420152231999.png" alt="在这里插入图片描述"> </p></blockquote><blockquote><p> Redis <img src="https://img-blog.csdnimg.cn/20210420152307510.png" alt="在这里插入图片描述"> </p></blockquote><blockquote><p> MongoDB <img src="https://img-blog.csdnimg.cn/20210420152401914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p></blockquote><h2 id="3-行式存储数据库（大数据时代）"><a href="#3-行式存储数据库（大数据时代）" class="headerlink" title="3.行式存储数据库（大数据时代）"></a>3.行式存储数据库（大数据时代）</h2><h3 id="3-1-行级数据库"><a href="#3-1-行级数据库" class="headerlink" title="3.1 行级数据库"></a>3.1 行级数据库</h3><img src="https://img-blog.csdnimg.cn/20210420153159517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="3-2-列级数据库"><a href="#3-2-列级数据库" class="headerlink" title="3.2 列级数据库"></a>3.2 列级数据库</h3><img src="https://img-blog.csdnimg.cn/20210420153217549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote><p> 常见的列级数据库包括：Hbase、Cassandra等…这里就不做过多介绍 <img src="https://img-blog.csdnimg.cn/2021042015323582.png" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210420153243757.png" alt="在这里插入图片描述"> </p></blockquote><h2 id="4-图关系型数据库"><a href="#4-图关系型数据库" class="headerlink" title="4.图关系型数据库"></a>4.图关系型数据库</h2><blockquote><p> 说到图关系型数据库，首先应该想到的就是：<strong>Neo4j</strong> <img src="https://img-blog.csdnimg.cn/20210420153311816.png" alt="在这里插入图片描述"> 主要应用：<font color="red">社会关系</font>，<font color="blueviolet">公共交通网络</font>，<font color="cornflowerblue">地图及网络拓谱</font>(n*(n-1)/2) <img src="https://img-blog.csdnimg.cn/20210420153338579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p></blockquote><h2 id="5-DB-Engines-数据库排名"><a href="#5-DB-Engines-数据库排名" class="headerlink" title="5.DB-Engines 数据库排名"></a>5.DB-Engines 数据库排名</h2><p>排名链接： <img src="https://img-blog.csdnimg.cn/20210420153457688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="三、Redis概述及安装"><a href="#三、Redis概述及安装" class="headerlink" title="三、Redis概述及安装"></a>三、Redis概述及安装</h1><h2 id="1-Redis概述"><a href="#1-Redis概述" class="headerlink" title="1.Redis概述"></a>1.Redis概述</h2><blockquote></blockquote><ul><li>Redis是一个开源的key-value存储系统。- </li><li>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。-</li><li> 这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。- </li><li>在此基础上，Redis支持各种不同方式的排序。- </li><li>与memcached一样，为了保证效率，数据都是缓存在内存中。- 区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li><li><ul><li>并且在此基础上实现了master-slave(主从)同步。 </li></ul></li></ul><h2 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h2><h3 id="2-1-配合关系型数据库做高速缓存"><a href="#2-1-配合关系型数据库做高速缓存" class="headerlink" title="2.1 配合关系型数据库做高速缓存"></a>2.1 配合关系型数据库做高速缓存</h3><ul><li>高频次，热门访问的数据，降低数据库IO- 分布式架构，做session共享<img src="https://img-blog.csdnimg.cn/20210420154051187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="2-2-多样的数据结构存储持久化数据"><a href="#2-2-多样的数据结构存储持久化数据" class="headerlink" title="2.2 多样的数据结构存储持久化数据"></a>2.2 多样的数据结构存储持久化数据</h3><img src="https://img-blog.csdnimg.cn/20210420154137843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-Redis安装"><a href="#3-Redis安装" class="headerlink" title="3.Redis安装"></a>3.Redis安装</h2><h3 id="3-1-安装步骤"><a href="#3-1-安装步骤" class="headerlink" title="3.1 安装步骤"></a>3.1 安装步骤</h3><p>毕竟这是一篇关于Redis的教程笔记，所以该技术博客中不会详细的讲解Redis数据库的安装步骤，没有安装的小伙伴可以参考下方博客链接：</p><p>如果大家觉得安装流程很麻烦，可以关注我的公众号：<mark>Coder 徐</mark> 回复关键字：<mark>Redis</mark>，我会把Redis安装压缩包分享给大家，如果<strong>安装过程 出现问题</strong>，也可以通过公众号联系我为您解惑，感谢大家的支持！ <img src="https://img-blog.csdnimg.cn/20210420155438438.png" alt="在这里插入图片描述"></p><h3 id="3-2-安装目录"><a href="#3-2-安装目录" class="headerlink" title="3.2 安装目录"></a>3.2 安装目录</h3><p>Redis数据库成功安装后，<strong>默认安装目录为：/usr/local/bin</strong></p><p>查看默认安装目录：</p><blockquote><p> redis-benchmark：性能测试工具，可以在自己本子运行，看看自己本子性能如何 redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲 redis-check-dump：修复有问题的dump.rdb文件 redis-sentinel：Redis集群使用 <strong>redis-server</strong>：Redis服务器启动命令 <strong>redis-cli</strong>：客户端，操作入口 </p></blockquote><h3 id="3-3-前台启动（不推荐）"><a href="#3-3-前台启动（不推荐）" class="headerlink" title="3.3 前台启动（不推荐）"></a>3.3 前台启动（不推荐）</h3><p>前台启动，命令行窗口不能关闭，否则服务器停止！</p><p>启动命令：</p><pre class="line-numbers language-none"><code class="language-none">redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/202104202019089.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="3-4-后台启动（推荐）"><a href="#3-4-后台启动（推荐）" class="headerlink" title="3.4 后台启动（推荐）"></a>3.4 后台启动（推荐）</h3><ol><li>将redis.conf复制到其他目录下： <img src="https://img-blog.csdnimg.cn/20210420202655211.png" alt="在这里插入图片描述">1. 修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动 <img src="https://img-blog.csdnimg.cn/20210420205654374.png" alt="在这里插入图片描述">1. 启动Redis：redis-server /etc/redis.conf <img src="https://img-blog.csdnimg.cn/20210420221959136.png" alt="在这里插入图片描述">1. 用客户端访问：redis-cli <img src="https://img-blog.csdnimg.cn/20210420222550688.png" alt="在这里插入图片描述">1. 测试验证： ping <img src="https://img-blog.csdnimg.cn/20210420223003701.png" alt="在这里插入图片描述">1. Redis关闭 单实例关闭：redis-cli shutdown 也可以进入终端后再关闭：shutdown <img src="https://img-blog.csdnimg.cn/20210420223828624.png" alt="在这里插入图片描述"><h2 id="4-Redis相关知识介绍"><a href="#4-Redis相关知识介绍" class="headerlink" title="4.Redis相关知识介绍"></a>4.Redis相关知识介绍</h2></li></ol><img src="https://img-blog.csdnimg.cn/20210421161901343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <p><mark>Redis是单线程+多路IO复用技术</mark>，</p><p>与Memcache三点不同:</p><ul><li> 支持多数据类型，</li><li>支持持久化，</li><li>单线程+多路IO复用</li></ul><blockquote><p> 多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池） </p></blockquote><h1 id="四、常用五大数据类型"><a href="#四、常用五大数据类型" class="headerlink" title="四、常用五大数据类型"></a>四、常用五大数据类型</h1><h2 id="1-Redis中的键（key）"><a href="#1-Redis中的键（key）" class="headerlink" title="1.Redis中的键（key）"></a>1.Redis中的键（key）</h2><p>查看当前库所有key（匹配：keys *1）：</p><pre class="line-numbers language-none"><code class="language-none">keys *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断某个key是否存在：</p><pre class="line-numbers language-none"><code class="language-none">exists key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看你的key是什么类型：</p><pre class="line-numbers language-none"><code class="language-none">type key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除指定的key数据：</p><pre class="line-numbers language-none"><code class="language-none">del key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据value选择非阻塞删除：</p><pre class="line-numbers language-none"><code class="language-none">// 仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作unlink key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为给定的key设置过期时间，10秒：</p><pre class="line-numbers language-none"><code class="language-none">expire key 10 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看还有多少秒过期，-1表示永不过期，-2表示已过期：</p><pre class="line-numbers language-none"><code class="language-none">ttl key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">select命令：切换数据库dbsize命令：查看当前数据库的key的数量flushdb命令：清空当前库flushall命令：通杀全部库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-数据类型—字符串（String）"><a href="#2-数据类型—字符串（String）" class="headerlink" title="2.数据类型—字符串（String）"></a>2.数据类型—字符串（String）</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p><p>String类型是<strong>二进制安全的</strong>。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis**==最基本的数据类型==<strong>，一个Redis中字符串value最多可以是</strong>512M**</p><h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><p>添加键值对：</p><pre class="line-numbers language-none"><code class="language-none">set key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询对应键值：</p><pre class="line-numbers language-none"><code class="language-none">get key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将给定的value追加到原值的末尾：</p><pre class="line-numbers language-none"><code class="language-none">append key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得值的长度：</p><pre class="line-numbers language-none"><code class="language-none">strlen key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有在key不存在时设置key的值：</p><pre class="line-numbers language-none"><code class="language-none">setnx key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 key 中储存的数字值增1 只能对数字值操作，如果为空，新增值为1</p><pre class="line-numbers language-none"><code class="language-none">incr key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 key 中储存的数字值减1 只能对数字值操作，如果为空，新增值为-1</p><pre class="line-numbers language-none"><code class="language-none">decr key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将key中储存的数字值增减，自定义步长：</p><pre class="line-numbers language-none"><code class="language-none">incrby / decrby key 数字值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说到incr命令，这里有个扩展知识点：</p><blockquote><p>  <strong>Redis具有原子性</strong>（不是事务中的原子性） <img src="https://img-blog.csdnimg.cn/20210421175901805.png" alt="在这里插入图片描述"> 所谓<strong>原子操作</strong>是指不会被线程调度机制打断的操作； 这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch（切换到另一个线程） </p><p> （1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。 （2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。 Redis单命令的原子性主要得益于<strong>Redis的单线程</strong>。 </p></blockquote><p>同时设置一个或多个key-value对：</p><pre class="line-numbers language-none"><code class="language-none">mset key1 value1 key2 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时获取一个或多个value：</p><pre class="line-numbers language-none"><code class="language-none">mget key1 key2 key3...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时设置一个或多个key-value对，当且仅当所有给定key都不存在：</p><pre class="line-numbers language-none"><code class="language-none">// 原子性，有一个失败则都失败msetnx key1 value1 key2 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获得值的范围，类似java中的substring，前包，后包</p><pre class="line-numbers language-none"><code class="language-none">getrange key 起始位置 结束位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用value覆写key所储存的字符串值，从起始位置开始(索引从0开始)：</p><pre class="line-numbers language-none"><code class="language-none">setrange key 起始位置 value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置键值的同时，设置过期时间，单位秒：</p><pre class="line-numbers language-none"><code class="language-none">setex key 过期时间 value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以新换旧，设置了新值同时获得旧值：</p><pre class="line-numbers language-none"><code class="language-none">getset key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-数据结构"><a href="#2-3-数据结构" class="headerlink" title="2.3 数据结构"></a>2.3 数据结构</h3><p>String的数据结构为**==简单动态字符串==**(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配 <img src="https://img-blog.csdnimg.cn/20210421185559186.png" alt="在这里插入图片描述"> 如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h2 id="3-数据类型—列表（List）"><a href="#3-数据类型—列表（List）" class="headerlink" title="3.数据类型—列表（List）"></a>3.数据类型—列表（List）</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p><mark>单键多值</mark></p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。 <img src="https://img-blog.csdnimg.cn/20210421185811418.png" alt="在这里插入图片描述"></p><h3 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h3><p>从左边/右边插入一个或多个值：</p><pre class="line-numbers language-none"><code class="language-none">lpush / rpush key1 value1 key2 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从左边/右边吐出一个值。<strong>值在键在，值光键亡</strong>：</p><pre class="line-numbers language-none"><code class="language-none">lpop / rpop key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从key1列表右边吐出一个值，插到key2列表左边：</p><pre class="line-numbers language-none"><code class="language-none">rpoplpush key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照索引下标获得元素(从左到右)：</p><pre class="line-numbers language-none"><code class="language-none">lrange key 起始索引 结束索引lrange key 0 -1   //0左边第一个，-1右边第一个，（0-1表示获取所有）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按照索引下标获得元素(从左到右)：</p><pre class="line-numbers language-none"><code class="language-none">lindex key 索引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得列表长度：</p><pre class="line-numbers language-none"><code class="language-none">llen key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在value的前面插入newvalue插入值：</p><pre class="line-numbers language-none"><code class="language-none">linsert key before value newvalue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从左边删除n个value(从左到右)：</p><pre class="line-numbers language-none"><code class="language-none">lrem key n value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将列表key下标为index的值替换成value：</p><pre class="line-numbers language-none"><code class="language-none">lset key index value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-数据结构"><a href="#3-3-数据结构" class="headerlink" title="3.3 数据结构"></a>3.3 数据结构</h3><p>List的数据结构为快速链表**==quickList==**</p><p>首先在列表==元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。==</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="https://img-blog.csdnimg.cn/20210421190034419.png" alt="在这里插入图片描述"> Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h2 id="4-数据类型—集合（Set）"><a href="#4-数据类型—集合（Set）" class="headerlink" title="4.数据类型—集合（Set）"></a>4.数据类型—集合（Set）</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<mark>自动排重</mark>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的<mark>无序集合。它底层其实是一个value为null的hash表</mark>，所以添加，删除，查找的**复杂度都是O(1)**。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p><h3 id="4-2-常用命令"><a href="#4-2-常用命令" class="headerlink" title="4.2 常用命令"></a>4.2 常用命令</h3><p>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略：</p><pre class="line-numbers language-none"><code class="language-none">sadd key value1 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取出该集合的所有值：</p><pre class="line-numbers language-none"><code class="language-none">smembers key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断集合key是否为含有该value值，有1，没有0：</p><pre class="line-numbers language-none"><code class="language-none">sismember key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回该集合的元素个数：</p><pre class="line-numbers language-none"><code class="language-none">scard key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除集合中的某个元素：</p><pre class="line-numbers language-none"><code class="language-none">srem key value1 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随机从该集合中吐出一个值：</p><pre class="line-numbers language-none"><code class="language-none">spop key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随机从该集合中取出n个值。不会从集合中删除：</p><pre class="line-numbers language-none"><code class="language-none">srandmember key n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把集合中一个值从一个集合移动到另一个集合：</p><pre class="line-numbers language-none"><code class="language-none">smove 集合1 集合2 value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回两个集合的交集元素：</p><pre class="line-numbers language-none"><code class="language-none">sinter key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回两个集合的并集元素：</p><pre class="line-numbers language-none"><code class="language-none">sunion key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回两个集合的差集元素(key1中的，不包含key2中的)：</p><pre class="line-numbers language-none"><code class="language-none">sdiff key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-数据结构"><a href="#4-3-数据结构" class="headerlink" title="4.3 数据结构"></a>4.3 数据结构</h3><p>Set数据结构是dict字典，字典是用哈希表实现的。</p><p>==<strong>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象</strong>==。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p><h2 id="5-数据类型—哈希（Hash）"><a href="#5-数据类型—哈希（Hash）" class="headerlink" title="5.数据类型—哈希（Hash）"></a>5.数据类型—哈希（Hash）</h2><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><p>Redis hash 是一个键值对集合。</p><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>类似Java里面的Map&lt;String,Object&gt;</p><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储</p><p>主要有以下2种存储方式： <img src="https://img-blog.csdnimg.cn/20210421204522399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-常用命令"><a href="#5-2-常用命令" class="headerlink" title="5.2 常用命令"></a>5.2 常用命令</h3><p>给key集合中的field键赋值value：</p><pre class="line-numbers language-none"><code class="language-none">hset key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从key1集合field取出 value ：</p><pre class="line-numbers language-none"><code class="language-none">hget key1 field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>批量设置hash的值：</p><pre class="line-numbers language-none"><code class="language-none">hmset key1 field1 value1 field2 value2...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看哈希表 key 中，给定域 field 是否存在：</p><pre class="line-numbers language-none"><code class="language-none">hexists key1 field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出该hash集合的所有field：</p><pre class="line-numbers language-none"><code class="language-none">hkeys key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出该hash集合的所有value：</p><pre class="line-numbers language-none"><code class="language-none">hvals key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为哈希表 key 中的域 field 的值加上增量 1 -1</p><pre class="line-numbers language-none"><code class="language-none">hincrby key field 增量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在：</p><pre class="line-numbers language-none"><code class="language-none">hsetnx key field value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-数据结构"><a href="#5-3-数据结构" class="headerlink" title="5.3 数据结构"></a>5.3 数据结构</h3><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h2 id="6-数据类型—有序集合（Zset）"><a href="#6-数据类型—有序集合（Zset）" class="headerlink" title="6.数据类型—有序集合（Zset）"></a>6.数据类型—有序集合（Zset）</h2><h3 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1 简介"></a>6.1 简介</h3><p>Redis有序集合zset与普通集合set非常相似，是一个<mark>没有重复元素</mark>的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。<mark>集合的成员是唯一的，但是评分可以是重复了</mark> 。</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h3 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h3><p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中：</p><pre class="line-numbers language-none"><code class="language-none">zadd key score1 value1 score2 value2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回有序集 key 中，下标在start、stop之间的元素 带WITHSCORES，可以让分数一起和值返回到结果集：</p><pre class="line-numbers language-none"><code class="language-none">zrange key start stop [withscores]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列：</p><pre class="line-numbers language-none"><code class="language-none">zrangebyscore key min max [withscores] [limit offset count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上，改为从大到小排列：</p><pre class="line-numbers language-none"><code class="language-none">zrevrangebyscore key max min [withscores] [limit offset count]  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为元素的score加上增量：</p><pre class="line-numbers language-none"><code class="language-none">zincrby key 增量 value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除该集合下，指定值的元素：</p><pre class="line-numbers language-none"><code class="language-none">zrem key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>统计该集合，分数区间内的元素个数：</p><pre class="line-numbers language-none"><code class="language-none">zcount key min max <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回该值在集合中的排名，从0开始：</p><pre class="line-numbers language-none"><code class="language-none">zrank key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-3-数据结构"><a href="#6-3-数据结构" class="headerlink" title="6.3 数据结构"></a>6.3 数据结构</h3><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构：</p><ol><li>hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。1. 跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。<h3 id="6-4-跳跃表（跳表）"><a href="#6-4-跳跃表（跳表）" class="headerlink" title="6.4 跳跃表（跳表）"></a>6.4 跳跃表（跳表）</h3></li><li>简介： 有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。1. 实例： 对比有序链表和跳跃表，从链表中查询出51<blockquote><p>有序链表 <img src="https://img-blog.csdnimg.cn/20210421205208524.png" alt="在这里插入图片描述"> 要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。 </p></blockquote></li></ol><blockquote><p> 跳跃表 <img src="https://img-blog.csdnimg.cn/20210421205430975.png" alt="在这里插入图片描述"> 从第2层开始，1节点比51节点小，向后比较。 21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层 在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下 在第0层，51节点为要查找的节点，节点被找到，共查找4次。 从此可以看出跳跃表比有序链表效率要高 3</p></blockquote><h1 id="五、Redis配置文件介绍"><a href="#五、Redis配置文件介绍" class="headerlink" title="五、Redis配置文件介绍"></a>五、Redis配置文件介绍</h1><p>自定义目录：/etc/redis.conf</p><h2 id="1-Units单位"><a href="#1-Units单位" class="headerlink" title="1.Units单位"></a>1.Units单位</h2><p>配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit 大小写不敏感 <img src="https://img-blog.csdnimg.cn/20210422210430289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-INCLUDES包含"><a href="#2-INCLUDES包含" class="headerlink" title="2.INCLUDES包含"></a>2.INCLUDES包含</h2><p><img src="https://img-blog.csdnimg.cn/20210422210458252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p><h2 id="3-网络相关配置"><a href="#3-网络相关配置" class="headerlink" title="3.网络相关配置"></a>3.网络相关配置</h2><h3 id="3-1-bind"><a href="#3-1-bind" class="headerlink" title="3.1 bind"></a>3.1 bind</h3><p>默认情况bind=127.0.0.1只能接受本机的访问请求 不写的情况下，无限制接受任何ip地址的访问 生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p><p><mark>如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</mark> <img src="https://img-blog.csdnimg.cn/20210422210720413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 保存配置，停止服务，重启启动查看进程，不再是本机访问了。 <img src="https://img-blog.csdnimg.cn/20210422210750928.png" alt="在这里插入图片描述"></p><h3 id="3-2-protected-mode"><a href="#3-2-protected-mode" class="headerlink" title="3.2 protected-mode"></a>3.2 protected-mode</h3><p>将本机访问保护模式设置no <img src="https://img-blog.csdnimg.cn/20210422210945981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-Port"><a href="#3-3-Port" class="headerlink" title="3.3 Port"></a>3.3 Port</h3><p>端口号，默认 6379 <img src="https://img-blog.csdnimg.cn/202104222110127.png" alt="在这里插入图片描述"></p><h3 id="3-4-tcp-backlog"><a href="#3-4-tcp-backlog" class="headerlink" title="3.4 tcp-backlog"></a>3.4 tcp-backlog</h3><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p><p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p><p>注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果 <img src="https://img-blog.csdnimg.cn/20210422211103933.png" alt="在这里插入图片描述"></p><h3 id="3-5-timeout"><a href="#3-5-timeout" class="headerlink" title="3.5 timeout"></a>3.5 timeout</h3><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即<strong>永不关闭</strong>。 <img src="https://img-blog.csdnimg.cn/20210422211150207.png" alt="在这里插入图片描述"></p><h3 id="3-6-tcp-keepalive"><a href="#3-6-tcp-keepalive" class="headerlink" title="3.6 tcp-keepalive"></a>3.6 tcp-keepalive</h3><p>对访问客户端的一种<strong>心跳检测</strong>，每个n秒检测一次。</p><p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 <img src="https://img-blog.csdnimg.cn/20210422211216291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-GENERAL通用"><a href="#4-GENERAL通用" class="headerlink" title="4.GENERAL通用"></a>4.GENERAL通用</h2><h3 id="4-1-daemonize"><a href="#4-1-daemonize" class="headerlink" title="4.1 daemonize"></a>4.1 daemonize</h3><p>是否为后台进程，设置为yes</p><p>守护进程，后台启动 <img src="https://img-blog.csdnimg.cn/20210422211347307.png" alt="在这里插入图片描述"></p><h3 id="4-2-pidfile"><a href="#4-2-pidfile" class="headerlink" title="4.2 pidfile"></a>4.2 pidfile</h3><p>存放pid文件的位置，每个实例会产生一个不同的pid文件 <img src="https://img-blog.csdnimg.cn/20210422211553920.png" alt="在这里插入图片描述"></p><h3 id="4-3-loglevel"><a href="#4-3-loglevel" class="headerlink" title="4.3 loglevel"></a>4.3 loglevel</h3><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<mark>notice</mark></p><p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning <img src="https://img-blog.csdnimg.cn/20210422211926383.png" alt="在这里插入图片描述"></p><h3 id="4-4-logfile"><a href="#4-4-logfile" class="headerlink" title="4.4 logfile"></a>4.4 logfile</h3><p>日志文件名称 <img src="https://img-blog.csdnimg.cn/20210422212123127.png" alt="在这里插入图片描述"></p><h3 id="4-5-databases-16"><a href="#4-5-databases-16" class="headerlink" title="4.5 databases 16"></a>4.5 databases 16</h3><p><mark>设定库的数量 默认16</mark>，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id <img src="https://img-blog.csdnimg.cn/20210422212307214.png" alt="在这里插入图片描述"></p><h2 id="5-SECURITY安全"><a href="#5-SECURITY安全" class="headerlink" title="5.SECURITY安全"></a>5.SECURITY安全</h2><h3 id="5-1-设置密码"><a href="#5-1-设置密码" class="headerlink" title="5.1 设置密码"></a>5.1 设置密码</h3><p><img src="https://img-blog.csdnimg.cn/20210422212556618.png" alt="在这里插入图片描述"> 访问密码的查看、设置和取消</p><p>在命令中设置密码，只是临时的。重启redis服务器，密码就还原了</p><p>永久设置，需要再配置文件中进行设置 <img src="https://img-blog.csdnimg.cn/20210422212622123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-LIMITS限制"><a href="#6-LIMITS限制" class="headerlink" title="6.LIMITS限制"></a>6.LIMITS限制</h2><h3 id="6-1-maxclients"><a href="#6-1-maxclients" class="headerlink" title="6.1 maxclients"></a>6.1 maxclients</h3><p>设置redis同时可以与多少个客户端进行连接</p><p>默认情况下为10000个客户端。</p><p>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。 <img src="https://img-blog.csdnimg.cn/2021042221285939.png" alt="在这里插入图片描述"></p><h3 id="6-2-maxmemory"><a href="#6-2-maxmemory" class="headerlink" title="6.2 maxmemory"></a>6.2 maxmemory</h3><p>建议必须设置，否则，将内存占满，造成服务器宕机</p><p>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</p><p>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</p><p>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。 <img src="https://img-blog.csdnimg.cn/20210422213036654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-3-maxmemory-policy"><a href="#6-3-maxmemory-policy" class="headerlink" title="6.3 maxmemory-policy"></a>6.3 maxmemory-policy</h3><p>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</p><p>allkeys-lru：在所有集合key中，使用LRU算法移除key</p><p>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</p><p>allkeys-random：在所有集合key中，移除随机的key</p><p>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</p><p>noeviction：不进行移除。针对写操作，只是返回错误信息 <img src="https://img-blog.csdnimg.cn/20210422213200277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-4-maxmemory-samples"><a href="#6-4-maxmemory-samples" class="headerlink" title="6.4 maxmemory-samples"></a>6.4 maxmemory-samples</h3><p>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</p><p>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。 <img src="https://img-blog.csdnimg.cn/202104222154351.png" alt="在这里插入图片描述"></p><h1 id="六、Redis的发布和订阅"><a href="#六、Redis的发布和订阅" class="headerlink" title="六、Redis的发布和订阅"></a>六、Redis的发布和订阅</h1><h2 id="1-什么是发布和订阅"><a href="#1-什么是发布和订阅" class="headerlink" title="1.什么是发布和订阅"></a>1.什么是发布和订阅</h2><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><h2 id="2-Redis的发布和订阅"><a href="#2-Redis的发布和订阅" class="headerlink" title="2.Redis的发布和订阅"></a>2.Redis的发布和订阅</h2><ol><li>客户端可以订阅频道如下图 <img src="https://img-blog.csdnimg.cn/20210422215853726.png" alt="在这里插入图片描述">1. 当给这个频道发布消息后，消息就会发送给订阅的客户端 <img src="https://img-blog.csdnimg.cn/20210422215910700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-发布订阅命令行实现"><a href="#3-发布订阅命令行实现" class="headerlink" title="3.发布订阅命令行实现"></a>3.发布订阅命令行实现</h2></li><li> 打开一个客户端订阅channel1 SUBSCRIBE channel1 <img src="https://img-blog.csdnimg.cn/20210422220044780.png" alt="在这里插入图片描述"> 1.  打开另一个客户端，给channel1发布消息hello publish channel1 hello <img src="https://img-blog.csdnimg.cn/20210422220110970.png" alt="在这里插入图片描述"> 返回的1是订阅者数量 1.  打开第一个客户端可以看到发送的消息 <img src="https://img-blog.csdnimg.cn/20210422220147450.png" alt="在这里插入图片描述"> 注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息 <h1 id="七、Redis新数据类型"><a href="#七、Redis新数据类型" class="headerlink" title="七、Redis新数据类型"></a>七、Redis新数据类型</h1></li></ol><h2 id="1-Bitmaps"><a href="#1-Bitmaps" class="headerlink" title="1.Bitmaps"></a>1.Bitmaps</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图： <img src="https://img-blog.csdnimg.cn/20210424103605617.png" alt="在这里插入图片描述"> 合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><blockquote></blockquote><ul><li>Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。- Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。 <img src="https://img-blog.csdnimg.cn/20210424103835451.png" alt="在这里插入图片描述"> </li></ul><h3 id="1-2-常用命令"><a href="#1-2-常用命令" class="headerlink" title="1.2 常用命令"></a>1.2 常用命令</h3><blockquote><p> 1.setbit </p></blockquote><p>设置Bitmaps中某个偏移量的值（0或1）：</p><pre class="line-numbers language-none"><code class="language-none">setbit key offset value注意：offset:偏移量从0开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实例： 每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。 设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图： <img src="https://img-blog.csdnimg.cn/20210424104851632.png" alt="在这里插入图片描述"> unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps <img src="https://img-blog.csdnimg.cn/20210424104905363.png" alt="在这里插入图片描述"> <mark>注意</mark>： 很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p><blockquote><p> 2.getbit </p></blockquote><p>获取Bitmaps中某个偏移量的值：</p><pre class="line-numbers language-none"><code class="language-none">getbit key offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取键的第offset位的值（从0开始算）</p><p>实例： 获取id=8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过： <img src="https://img-blog.csdnimg.cn/20210424113034370.png" alt="在这里插入图片描述"> 注：因为100根本不存在，所以也是返回0</p><blockquote><p> 3.bitcount </p></blockquote><p>统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p><p>统计字符串从start字节到end字节比特值为1的数量：</p><pre class="line-numbers language-none"><code class="language-none">bitcount key [start end]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： 计算2022-11-06这天的独立访问用户数量 <img src="https://img-blog.csdnimg.cn/20210424113246302.png" alt="在这里插入图片描述"> start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。 <img src="https://img-blog.csdnimg.cn/20210424113302913.png" alt="在这里插入图片描述"> 举例： K1 【01000001 01000000 00000000 00100001】，对应【0，1，2，3】</p><p>bitcount K1 1 2 ： 统计下标1、2字节组中bit=1的个数，即01000000 00000000 –》bitcount K1 1 2 　–》1</p><p>bitcount K1 1 3 ： 统计下标1、2字节组中bit=1的个数，即01000000 00000000 00100001 –》bitcount K1 1 3　 –》3</p><p>bitcount K1 0 -2 ： 统计下标0到下标倒数第2，字节组中bit=1的个数，即01000001 01000000 00000000 –》bitcount K1 0 -2　 –》3</p><p>注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p><blockquote><p> 4.bitop </p></blockquote><pre class="line-numbers language-none"><code class="language-none">bitop and(or/not/xor) &lt;destkey&gt; [key…]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>实例： 2020-11-04 日访问网站的userid=1,2,5,9。 setbit unique:users:20201104 1 1 setbit unique:users:20201104 2 1 setbit unique:users:20201104 5 1 setbit unique:users:20201104 9 1</p><p>2020-11-03 日访问网站的userid=0,1,4,9。 setbit unique:users:20201103 0 1 setbit unique:users:20201103 1 1 setbit unique:users:20201103 4 1 setbit unique:users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量 bitop and unique:users:and:20201104_03 unique:users:20201103unique:users:20201104 <img src="https://img-blog.csdnimg.cn/20210424114043780.png" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210424114057896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集 <img src="https://img-blog.csdnimg.cn/20210424114113709.png" alt="在这里插入图片描述"></p><h3 id="1-3-Bitmaps与set对比"><a href="#1-3-Bitmaps与set对比" class="headerlink" title="1.3 Bitmaps与set对比"></a>1.3 Bitmaps与set对比</h3><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表 <img src="https://img-blog.csdnimg.cn/20210424114332643.png" alt="在这里插入图片描述"> 很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的 <img src="https://img-blog.csdnimg.cn/20210424114529727.png" alt="在这里插入图片描述"> 但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。 <img src="https://img-blog.csdnimg.cn/202104241146254.png" alt="在这里插入图片描述"></p><h2 id="2-HyperLogLog"><a href="#2-HyperLogLog" class="headerlink" title="2.HyperLogLog"></a>2.HyperLogLog</h2><h3 id="2-1-简介-1"><a href="#2-1-简介-1" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案： （1）数据存储在MySQL表中，使用distinct count计算不重复个数 （2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数? 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h3 id="2-2-常用命令-1"><a href="#2-2-常用命令-1" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><blockquote><p> 1.pfadd </p></blockquote><p>添加指定元素到 HyperLogLog 中：</p><pre class="line-numbers language-none"><code class="language-none">pfadd key element element...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： <img src="https://img-blog.csdnimg.cn/20210424115310168.png" alt="在这里插入图片描述"> 将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><blockquote><p> 2.pfcount </p></blockquote><p>计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可：</p><pre class="line-numbers language-none"><code class="language-none">pfcount key [key...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： <img src="https://img-blog.csdnimg.cn/20210424115623735.png" alt="在这里插入图片描述"></p><blockquote><p> 3.pfmerge </p></blockquote><p>将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得：</p><pre class="line-numbers language-none"><code class="language-none">pfmerge destkey sourcekey [sourcekey ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： <img src="https://img-blog.csdnimg.cn/20210424115818258.png" alt="在这里插入图片描述"></p><h2 id="3-Geospatial"><a href="#3-Geospatial" class="headerlink" title="3.Geospatial"></a>3.Geospatial</h2><h3 id="3-1-简介-1"><a href="#3-1-简介-1" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h3 id="3-2-常用命令-1"><a href="#3-2-常用命令-1" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h3><blockquote><p> 1.geoadd </p></blockquote><p>添加地理位置（经度，纬度，名称）：</p><pre class="line-numbers language-none"><code class="language-none">geoadd key longitude latitude member [longitude latitude member...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： geoadd china:city 121.47 31.23 shanghai geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing <img src="https://img-blog.csdnimg.cn/20210424120132226.png" alt="在这里插入图片描述"> 两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。 有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。 当坐标位置超出指定范围时，该命令将会返回一个错误。 已经添加的数据，是无法再次往里面添加的。</p><blockquote><p> 2.geopos </p></blockquote><p>获得指定地区的坐标值：</p><pre class="line-numbers language-none"><code class="language-none">geopos key member [member...]  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例： <img src="https://img-blog.csdnimg.cn/20210424120316724.png" alt="在这里插入图片描述"></p><blockquote><p> 3.geodist </p></blockquote><p>获取两个位置之间的直线距离：</p><pre class="line-numbers language-none"><code class="language-none">geodist key member1 member2 [m|km|ft|mi] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><p>获取两个位置之间的直线距离 <img src="https://img-blog.csdnimg.cn/20210424120655817.png" alt="在这里插入图片描述"> 单位： m 表示单位为米[默认值]。 km 表示单位为千米。 mi 表示单位为英里。 ft 表示单位为英尺。 如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><blockquote><p> 4.georadius </p></blockquote><p>以给定的经纬度为中心，找出某一半径内的元素：</p><pre class="line-numbers language-none"><code class="language-none">经度 纬度 距离 单位georadius key longitude latitude radius  m|km|ft|mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实例： <img src="https://img-blog.csdnimg.cn/20210424121014307.png" alt="在这里插入图片描述"></p><h1 id="八、Jedis测试"><a href="#八、Jedis测试" class="headerlink" title="八、Jedis测试"></a>八、Jedis测试</h1><h2 id="1-Jedis所需的jar包"><a href="#1-Jedis所需的jar包" class="headerlink" title="1.Jedis所需的jar包"></a>1.Jedis所需的jar包</h2><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;redis.clients&lt;/groupId&gt;&lt;artifactId&gt;jedis&lt;/artifactId&gt;&lt;version&gt;3.2.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-连接Redis注意事项"><a href="#2-连接Redis注意事项" class="headerlink" title="2.连接Redis注意事项"></a>2.连接Redis注意事项</h2><p>禁用Linux的防火墙：Linux(CentOS7)里执行命令：</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop/disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>redis.conf中注释掉<mark>bind 127.0.0.1</mark>，然后 <mark>protected-mode no</mark></p><h2 id="3-创建测试程序"><a href="#3-创建测试程序" class="headerlink" title="3.创建测试程序"></a>3.创建测试程序</h2><pre class="line-numbers language-none"><code class="language-none">package com.xu.jedis;import redis.clients.jedis.Jedis;public class JedisDemo1 {&lt;!-- --&gt;    public static void main(String[] args) {&lt;!-- --&gt;        //创建jedis对象        Jedis jedis = new Jedis("192.168.50.128",6379);        //连接redis的密码        jedis.auth("root");        //测试        String value = jedis.ping();        System.out.println(value);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-测试相关数据类型"><a href="#4-测试相关数据类型" class="headerlink" title="4.测试相关数据类型"></a>4.测试相关数据类型</h2><h3 id="4-1-Jedis-API：Key"><a href="#4-1-Jedis-API：Key" class="headerlink" title="4.1 Jedis-API：Key"></a>4.1 Jedis-API：Key</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">String</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-Jedis-API：String"><a href="#4-2-Jedis-API：String" class="headerlink" title="4.2 Jedis-API：String"></a>4.2 Jedis-API：String</h3><pre class="line-numbers language-none"><code class="language-none">jedis.mset("str1","v1","str2","v2","str3","v3");System.out.println(jedis.mget("str1","str2","str3"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-3-Jedis-API：list"><a href="#4-3-Jedis-API：list" class="headerlink" title="4.3 Jedis-API：list"></a>4.3 Jedis-API：list</h3><pre class="line-numbers language-none"><code class="language-none">List&lt;String&gt; list = jedis.lrange("mylist",0,-1);for (String element : list) {&lt;!-- --&gt;System.out.println(element);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-Jedis-API：set"><a href="#4-4-Jedis-API：set" class="headerlink" title="4.4 Jedis-API：set"></a>4.4 Jedis-API：set</h3><pre class="line-numbers language-none"><code class="language-none">jedis.sadd("orders", "order01");jedis.sadd("orders", "order02");jedis.sadd("orders", "order03");jedis.sadd("orders", "order04");Set&lt;String&gt; smembers = jedis.smembers("orders");for (String order : smembers) {&lt;!-- --&gt;System.out.println(order);}jedis.srem("orders", "order02");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-Jedis-API：hash"><a href="#4-5-Jedis-API：hash" class="headerlink" title="4.5 Jedis-API：hash"></a>4.5 Jedis-API：hash</h3><pre class="line-numbers language-none"><code class="language-none">jedis.hset("hash1","userName","lisi");System.out.println(jedis.hget("hash1","userName"));Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();map.put("telphone","13810169999");map.put("address","atguigu");map.put("email","abc@163.com");jedis.hmset("hash2",map);List&lt;String&gt; result = jedis.hmget("hash2", "telphone","email");for (String element : result) {&lt;!-- --&gt;System.out.println(element);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-Jedis-API：zset"><a href="#4-6-Jedis-API：zset" class="headerlink" title="4.6 Jedis-API：zset"></a>4.6 Jedis-API：zset</h3><pre class="line-numbers language-none"><code class="language-none">jedis.zadd("zset01", 100d, "z3");jedis.zadd("zset01", 90d, "l4");jedis.zadd("zset01", 80d, "w5");jedis.zadd("zset01", 70d, "z6"); Set&lt;String&gt; zrange = jedis.zrange("zset01", 0, -1);for (String e : zrange) {&lt;!-- --&gt;System.out.println(e);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="九、Jedis实例：手机验证码功能"><a href="#九、Jedis实例：手机验证码功能" class="headerlink" title="九、Jedis实例：手机验证码功能"></a>九、Jedis实例：手机验证码功能</h1><blockquote><p>  要求：</p><p>  1、输入手机号，点击发送后随机生成6位数字码，2分钟有效 </p><p> 2、输入验证码，点击验证，返回成功或失败</p><p>  3、每个手机号每天只能输入3次 </p></blockquote><p>代码展示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @author ICDM_王顺 * @Classname PhoneCoide * @Description TODO * @Date 2021/11/26 11:16 * @Created by TheKing_Shun */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//模拟验证码发送</span>        <span class="token comment">//verifyCode("137000000");</span>        <span class="token comment">//校验发送的验证码</span>        <span class="token comment">//getRedisCode("137000000","验证码");</span>    <span class="token punctuation">}</span>    <span class="token comment">//1.随即生成一个六位数的验证码</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rand <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            code <span class="token operator">+=</span> rand<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//2.每个手机每天只能发送三次，验证码放到redis中，设置过期时间</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//连接redis</span>            <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.50.128"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输入redis连接密码</span>        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拼接key</span>        <span class="token comment">//手机发送次数key</span>        <span class="token class-name">String</span> countKey <span class="token operator">=</span> <span class="token string">"VerifyCode"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">":count"</span><span class="token punctuation">;</span>        <span class="token comment">//验证码key</span>        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">"VerifyCode"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">":code"</span><span class="token punctuation">;</span>        <span class="token comment">//每个手机每天只能发送3次</span>        <span class="token class-name">String</span> count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//没有发送次数，第一次发送</span>                <span class="token comment">//设置发送次数是1</span>                jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//发送次数+1</span>                jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//发送三次了，不能再发送了</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天的发送次数已经超过3次了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭连接</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//发送的验证码要放到redis中,设置过期时间为120s</span>        <span class="token class-name">String</span> vcode <span class="token operator">=</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>vcode<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//3.验证码校验</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRedisCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//从redis中获取验证码</span>            <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.50.128"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//验证码key</span>        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">"VerifyCode"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">":code"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> redisCode <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisCode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、Redis与SpringBoot整合"><a href="#十、Redis与SpringBoot整合" class="headerlink" title="十、Redis与SpringBoot整合"></a>十、Redis与SpringBoot整合</h1><p>Spring Boot整合Redis非常简单，只需要按如下步骤整合即可：</p><ol><li>在pom.xml文件中引入redis相关依赖<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--redis启动器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--spring2.x 集成redis所需common-pool2--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>application.properties配置redis配置<pre class="line-numbers language-none"><code class="language-none">#Redis服务器地址spring.redis.host=192.168.50.128#Redis服务器连接端口spring.redis.port=6379#Redis数据库索引（默认为0）spring.redis.database= 0#连接超时时间（毫秒）spring.redis.timeout=1800000#连接池最大连接数（使用负值表示没有限制）spring.redis.lettuce.pool.max-active=20#最大阻塞等待时间(负数表示没限制)spring.redis.lettuce.pool.max-wait=-1#连接池中的最大空闲连接spring.redis.lettuce.pool.max-idle=5#连接池中的最小空闲连接spring.redis.lettuce.pool.min-idle=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>添加Redis配置类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>redis_springbooot<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonAutoDetect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token comment">/** * @author ICDM_王顺 * @Classname RedisConfig * @Description TODO * @Date 2021/11/26 13:54 * @Created by TheKing_Shun */</span><span class="token comment">// @EnableCaching</span><span class="token comment">// @Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//key序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value序列化</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value hashmap序列化</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解决查询缓存转换异常的问题</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>测试一下：RedisTestController中添加测试方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redisTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTestController</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 这里推荐使用构造器方式</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token comment">//设置值到redis</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从redis获取值</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="十一、事务和锁机制"><a href="#十一、事务和锁机制" class="headerlink" title="十一、事务和锁机制"></a>十一、事务和锁机制</h1><h2 id="1-Redis的事务定义"><a href="#1-Redis的事务定义" class="headerlink" title="1.Redis的事务定义"></a>1.Redis的事务定义</h2><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是<mark>串联多个命令</mark>防止别的命令插队。</p><h2 id="2-Multi、Exec、discard"><a href="#2-Multi、Exec、discard" class="headerlink" title="2.Multi、Exec、discard"></a>2.Multi、Exec、discard</h2><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。 <img src="https://img-blog.csdnimg.cn/20210425191931365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>例如：</p><p>组队成功，提交成功：</p> <img src="https://img-blog.csdnimg.cn/20210425192039210.png" alt="在这里插入图片描述"> <p>组队阶段报错，提交失败：</p> <img src="https://img-blog.csdnimg.cn/20210425192150255.png" alt="在这里插入图片描述"> <p>组队成功，提交有成功也有失败：</p> <img src="https://img-blog.csdnimg.cn/20210425192339976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-事务的错误处理"><a href="#3-事务的错误处理" class="headerlink" title="3.事务的错误处理"></a>3.事务的错误处理</h2><blockquote><p> 组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消 <img src="https://img-blog.csdnimg.cn/2021042520002448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p></blockquote><blockquote><p> 如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。 <img src="https://img-blog.csdnimg.cn/20210425200720110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p></blockquote><h2 id="4-事务冲突问题"><a href="#4-事务冲突问题" class="headerlink" title="4.事务冲突问题"></a>4.事务冲突问题</h2><h3 id="4-1-例子"><a href="#4-1-例子" class="headerlink" title="4.1 例子"></a>4.1 例子</h3><blockquote><p> 一个请求想给金额减8000 一个请求想给金额减5000 一个请求想给金额减1000 </p></blockquote><img src="https://img-blog.csdnimg.cn/20210425200817386.png" alt="在这里插入图片描述"><h3 id="4-2-悲观锁（解决事务冲突）"><a href="#4-2-悲观锁（解决事务冲突）" class="headerlink" title="4.2 悲观锁（解决事务冲突）"></a>4.2 悲观锁（解决事务冲突）</h3><img src="https://img-blog.csdnimg.cn/20210425201015606.png" alt="在这里插入图片描述"> <p><mark>悲观锁(Pessimistic Lock)</mark>，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上<mark>锁</mark>。</p><h3 id="4-3-乐观锁（解决事务冲突）"><a href="#4-3-乐观锁（解决事务冲突）" class="headerlink" title="4.3 乐观锁（解决事务冲突）"></a>4.3 乐观锁（解决事务冲突）</h3><img src="https://img-blog.csdnimg.cn/20210425201118493.png" alt="在这里插入图片描述"> <p><mark>乐观锁(Optimistic Lock)</mark>，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。<mark>Redis就是利用这种check-and-set机制实现事务的</mark></p><h3 id="4-4-乐观锁在Redis中的具体使用"><a href="#4-4-乐观锁在Redis中的具体使用" class="headerlink" title="4.4 乐观锁在Redis中的具体使用"></a>4.4 乐观锁在Redis中的具体使用</h3><blockquote><p> watch key [key…] </p></blockquote><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务<strong>执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断</strong>。 <img src="https://img-blog.csdnimg.cn/2021042520134180.png" alt="在这里插入图片描述"></p><blockquote><p> unwatch </p></blockquote><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><h2 id="5-Redis事务三大特性"><a href="#5-Redis事务三大特性" class="headerlink" title="5.Redis事务三大特性"></a>5.Redis事务三大特性</h2><ol><li> <mark>单独的隔离操作</mark>： 事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </li><li>   <mark>没有隔离级别的概念</mark>： 队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行 </li><li> <mark>不保证原子性</mark>： 事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚  <h1 id="十二、Redis持久化操作"><a href="#十二、Redis持久化操作" class="headerlink" title="十二、Redis持久化操作"></a>十二、Redis持久化操作</h1></li></ol><p>Redis 提供了2个不同形式的持久化方式。</p><ol><li>RDB（Redis DataBase）</li><li>AOF（Append Of File）<h2 id="1-RDB（Redis-DataBase）"><a href="#1-RDB（Redis-DataBase）" class="headerlink" title="1.RDB（Redis DataBase）"></a>1.RDB（Redis DataBase）</h2></li></ol><h3 id="1-1-RDB是什么"><a href="#1-1-RDB是什么" class="headerlink" title="1.1 RDB是什么"></a>1.1 RDB是什么</h3><p>==在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘==， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p><h3 id="1-2-备份操作是如何进行的"><a href="#1-2-备份操作是如何进行的" class="headerlink" title="1.2 备份操作是如何进行的"></a>1.2 备份操作是如何进行的</h3><p>Redis会单独创建（fork）一个子进程来进行持久化，会<strong>先将数据写入到 一个临时文件中</strong>，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化</strong>好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是<mark>最后一次持久化后的数据可能丢失</mark>。</p><h3 id="1-3-Fork"><a href="#1-3-Fork" class="headerlink" title="1.3 Fork"></a>1.3 Fork</h3><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并<strong>作为原进程的子进程</strong>- 在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了 “<strong>写时复制技术</strong>”- <strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。<h3 id="1-4-RDB持久化流程"><a href="#1-4-RDB持久化流程" class="headerlink" title="1.4 RDB持久化流程"></a>1.4 RDB持久化流程</h3></li></ul><img src="https://img-blog.csdnimg.cn/20210426152939153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="1-5-dump-rdb文件"><a href="#1-5-dump-rdb文件" class="headerlink" title="1.5 dump.rdb文件"></a>1.5 dump.rdb文件</h3><p>在redis.conf中配置文件名称，默认为dump.rdb <img src="https://img-blog.csdnimg.cn/20210426153101274.png" alt="在这里插入图片描述"></p><h3 id="1-6-配置位置"><a href="#1-6-配置位置" class="headerlink" title="1.6 配置位置"></a>1.6 配置位置</h3><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p>dir “/myredis/” <img src="https://img-blog.csdnimg.cn/20210426153208334.png" alt="在这里插入图片描述"></p><h3 id="1-7-如何触发RDB快照：保存策略"><a href="#1-7-如何触发RDB快照：保存策略" class="headerlink" title="1.7 如何触发RDB快照：保存策略"></a>1.7 如何触发RDB快照：保存策略</h3><h4 id="1-7-1-配置文件中默认的快照配置"><a href="#1-7-1-配置文件中默认的快照配置" class="headerlink" title="1.7.1 配置文件中默认的快照配置"></a>1.7.1 配置文件中默认的快照配置</h4><img src="https://img-blog.csdnimg.cn/20210426205545363.png" alt="在这里插入图片描述"><h4 id="1-7-2-命令save-VS-bgsave"><a href="#1-7-2-命令save-VS-bgsave" class="headerlink" title="1.7.2 命令save VS bgsave"></a>1.7.2 命令save VS bgsave</h4><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p>bgsave：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。</p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><h4 id="1-7-3-flushall命令"><a href="#1-7-3-flushall命令" class="headerlink" title="1.7.3 flushall命令"></a>1.7.3 flushall命令</h4><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><h4 id="1-7-4-Save"><a href="#1-7-4-Save" class="headerlink" title="1.7.4 Save"></a>1.7.4 Save</h4><p>格式：save 秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件</p><p>默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次。</p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><h4 id="1-7-5-stop-writes-on-bgsave-error"><a href="#1-7-5-stop-writes-on-bgsave-error" class="headerlink" title="1.7.5 stop-writes-on-bgsave-error"></a>1.7.5 stop-writes-on-bgsave-error</h4><p><img src="https://img-blog.csdnimg.cn/2021042620580791.png" alt="在这里插入图片描述"> 当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p><h4 id="1-7-6-rdbcompression-压缩文件"><a href="#1-7-6-rdbcompression-压缩文件" class="headerlink" title="1.7.6 rdbcompression 压缩文件"></a>1.7.6 rdbcompression 压缩文件</h4><p><img src="https://img-blog.csdnimg.cn/20210426205900150.png" alt="在这里插入图片描述"> 对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用<strong>LZF算法</strong>进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><h4 id="1-7-7-rdbchecksum-检查完整性"><a href="#1-7-7-rdbchecksum-检查完整性" class="headerlink" title="1.7.7 rdbchecksum 检查完整性"></a>1.7.7 rdbchecksum 检查完整性</h4><p><img src="https://img-blog.csdnimg.cn/2021042620595429.png" alt="在这里插入图片描述"> 在存储快照后，还可以让redis使用CRC64算法来进行数据校验</p><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p>推荐yes.</p><h4 id="1-7-8-rdb的备份"><a href="#1-7-8-rdb的备份" class="headerlink" title="1.7.8 rdb的备份"></a>1.7.8 rdb的备份</h4><p>先通过config get dir 查询rdb文件的目录</p><p>将*.rdb的文件拷贝到别的地方</p><p>rdb的恢复：</p><ul><li>关闭Redis- 先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb- 启动Redis, 备份数据会直接加载<h3 id="1-8-优势与劣势"><a href="#1-8-优势与劣势" class="headerlink" title="1.8 优势与劣势"></a>1.8 优势与劣势</h3></li></ul><p>优势：</p><ul><li>适合大规模的数据恢复- 对数据完整性和一致性要求不高更适合使用- 节省磁盘空间- 恢复速度快<img src="https://img-blog.csdnimg.cn/20210426153629616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p>劣势：</p><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑- 虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。- 在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。<h3 id="1-9-如何停止RDB"><a href="#1-9-如何停止RDB" class="headerlink" title="1.9 如何停止RDB"></a>1.9 如何停止RDB</h3></li></ul><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><h3 id="1-10-RDB总结"><a href="#1-10-RDB总结" class="headerlink" title="1.10 RDB总结"></a>1.10 RDB总结</h3><img src="https://img-blog.csdnimg.cn/20210426153509145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="2-AOF（Append-Only-File）"><a href="#2-AOF（Append-Only-File）" class="headerlink" title="2.AOF（Append Only File）"></a>2.AOF（Append Only File）</h2><h3 id="2-1-AOF是什么"><a href="#2-1-AOF是什么" class="headerlink" title="2.1 AOF是什么"></a>2.1 AOF是什么</h3><p><strong>以日志的形式来记录每个写操作（增量保存）</strong>，将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h3 id="2-2-AOF持久化流程"><a href="#2-2-AOF持久化流程" class="headerlink" title="2.2 AOF持久化流程"></a>2.2 AOF持久化流程</h3><ol><li>客户端的请求写命令会被append追加到AOF缓冲区内；1. AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；1. AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；1. Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；<img src="https://img-blog.csdnimg.cn/20210426154302204.png" alt="在这里插入图片描述"></li></ol><h3 id="2-3-AOF默认不开启"><a href="#2-3-AOF默认不开启" class="headerlink" title="2.3 AOF默认不开启"></a>2.3 AOF默认不开启</h3><p>可以在redis.conf中配置文件名称，默认为 <strong>appendonly.aof</strong> AOF文件的保存路径，同RDB的路径一致。</p><h3 id="2-4-AOF和RDB同时开启，redis听谁的？"><a href="#2-4-AOF和RDB同时开启，redis听谁的？" class="headerlink" title="2.4 AOF和RDB同时开启，redis听谁的？"></a>2.4 AOF和RDB同时开启，redis听谁的？</h3><p>AOF和RDB同时开启，系统默认取<mark>AOF</mark>的数据（数据不会存在丢失）</p><h3 id="2-5-AOF启动-修复-恢复"><a href="#2-5-AOF启动-修复-恢复" class="headerlink" title="2.5 AOF启动/修复/恢复"></a>2.5 AOF启动/修复/恢复</h3><ul><li> AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。 -  正常恢复 1.修改默认的appendonly no，改为yes 2.将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir) 3.恢复：重启redis然后重新加载 -  异常恢复 1.修改默认的appendonly no，改为yes 2.如遇到AOF文件损坏，通过/usr/local/bin/redis-check-aof–fix appendonly.aof进行恢复 3.备份被写坏的AOF文件 4.恢复：重启redis，然后重新加载 <h3 id="2-6-AOF同步频率设置"><a href="#2-6-AOF同步频率设置" class="headerlink" title="2.6 AOF同步频率设置"></a>2.6 AOF同步频率设置</h3></li></ul><p>appendfsync always 始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p>appendfsync everysec 每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p>appendfsync no redis不主动进行同步，把同步时机交给操作系统。</p><h3 id="2-7-Rewrite压缩"><a href="#2-7-Rewrite压缩" class="headerlink" title="2.7 Rewrite压缩"></a>2.7 Rewrite压缩</h3><ol><li><p>是什么：</p><blockquote><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof </p></blockquote></li><li><p>重写原理，如何实现重写</p><blockquote><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。 no-appendfsync-on-rewrite： 如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能） 如果 no-appendfsync-on-rewrite=no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低） 触发机制，何时重写 Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发 重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发） auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。 例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB 系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size, 如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </p></blockquote></li><li><p>重写流程</p><blockquote><p>（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。 （2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。 （3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。 （4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。 （5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。 </p></blockquote></li></ol><img src="https://img-blog.csdnimg.cn/20210426161650968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="2-8-优势与劣势"><a href="#2-8-优势与劣势" class="headerlink" title="2.8 优势与劣势"></a>2.8 优势与劣势</h3><p>优势： <img src="https://img-blog.csdnimg.cn/2021042616173976.png" alt="在这里插入图片描述"></p><ul><li>备份机制更稳健，丢失数据概率更低。- 可读的日志文本，通过操作AOF稳健，可以处理误操作。<br>劣势：</li><li>比起RDB占用更多的磁盘空间。- 恢复备份速度要慢。- 每次读写都同步的话，有一定的性能压力。- 存在个别Bug，造成恢复不能。</li></ul><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111262201274.png" alt="image-20211126220134111"></p><h3 id="2-9-AOF总结"><a href="#2-9-AOF总结" class="headerlink" title="2.9 AOF总结"></a>2.9 AOF总结</h3><img src="https://img-blog.csdnimg.cn/20210426162218803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><h3 id="3-1-选择哪个持久化方式"><a href="#3-1-选择哪个持久化方式" class="headerlink" title="3.1 选择哪个持久化方式"></a>3.1 选择哪个持久化方式</h3><p>官方推荐两个都启用。 如果对数据不敏感，可以选单独用RDB。 不建议单独用 AOF，因为可能会出现Bug。 如果只是做纯内存缓存，可以都不用。</p><h3 id="3-2-官方建议"><a href="#3-2-官方建议" class="headerlink" title="3.2 官方建议"></a>3.2 官方建议</h3><ul><li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储- AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.- Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大- 只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.- 同时开启两种持久化方式- 在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.- RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？- 建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。- 性能建议：<blockquote><p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。 如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。 代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。 只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。 默认超过原大小100%大小时重写可以改到适当的数值。 </p></blockquote></li></ul><h1 id="十三、Redis主从复制"><a href="#十三、Redis主从复制" class="headerlink" title="十三、Redis主从复制"></a>十三、Redis主从复制</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h2><p>主机数据更新后根据配置和策略， 自动同步到备机的<mark>master/slaver机制，Master以写为主，Slave以读为主</mark></p><h2 id="2-能干嘛"><a href="#2-能干嘛" class="headerlink" title="2.能干嘛"></a>2.能干嘛</h2><ul><li>读写分离，性能扩展- </li><li>容灾快速恢复<img src="https://img-blog.csdnimg.cn/20210426165108108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="3-具体操作：主从复制"><a href="#3-具体操作：主从复制" class="headerlink" title="3.具体操作：主从复制"></a>3.具体操作：主从复制</h2><blockquote><p>  拷贝多个redis.conf文件</p><p> include(写绝对路径)  引入公共配置</p><p> 开启daemonize yes </p><p> Pid文件名字pidfile</p><p>  指定端口port</p><p>  Log文件名字</p><p>  dump.rdb名字</p><p> dbfilename Appendonly 关掉或者换名字 </p><p> <img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111262215782.png" alt="image-20211126221539621"></p></blockquote><h3 id="3-1-新建redis6379-conf，填写以下内容"><a href="#3-1-新建redis6379-conf，填写以下内容" class="headerlink" title="3.1 新建redis6379.conf，填写以下内容"></a>3.1 新建redis6379.conf，填写以下内容</h3><img src="https://img-blog.csdnimg.cn/20210426171031960.png" alt="在这里插入图片描述"><h3 id="3-2-新建redis6380-conf，填写以下内容"><a href="#3-2-新建redis6380-conf，填写以下内容" class="headerlink" title="3.2 新建redis6380.conf，填写以下内容"></a>3.2 新建redis6380.conf，填写以下内容</h3><img src="https://img-blog.csdnimg.cn/20210426171046531.png" alt="在这里插入图片描述"><h3 id="3-3-新建redis6381-conf，填写以下内容"><a href="#3-3-新建redis6381-conf，填写以下内容" class="headerlink" title="3.3 新建redis6381.conf，填写以下内容"></a>3.3 新建redis6381.conf，填写以下内容</h3><img src="https://img-blog.csdnimg.cn/20210426171052487.png" alt="在这里插入图片描述"> <p><mark>slave-priority 10</mark></p><p>设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认100</p><h3 id="3-4-启动三台Redis服务器"><a href="#3-4-启动三台Redis服务器" class="headerlink" title="3.4 启动三台Redis服务器"></a>3.4 启动三台Redis服务器</h3><img src="https://img-blog.csdnimg.cn/20210426174552329.png" alt="在这里插入图片描述"><h3 id="3-5-查看系统进程，看看三台服务器是否启动"><a href="#3-5-查看系统进程，看看三台服务器是否启动" class="headerlink" title="3.5 查看系统进程，看看三台服务器是否启动"></a>3.5 查看系统进程，看看三台服务器是否启动</h3><img src="https://img-blog.csdnimg.cn/20210426174615910.png" alt="在这里插入图片描述"><h3 id="3-6-查看三台主机运行情况"><a href="#3-6-查看三台主机运行情况" class="headerlink" title="3.6 查看三台主机运行情况"></a>3.6 查看三台主机运行情况</h3><p>==info replication== 打印主从复制的相关信息 <img src="https://img-blog.csdnimg.cn/20210426174720657.png" alt="在这里插入图片描述"></p><h3 id="3-7-配从-库-不配主-库"><a href="#3-7-配从-库-不配主-库" class="headerlink" title="3.7 配从(库)不配主(库)"></a>3.7 配从(库)不配主(库)</h3><p>slaveof ip port 成为某个实例的从服务器</p><ol><li><p>在6380和6381上执行: slaveof 127.0.0.1 6379 <img src="https://img-blog.csdnimg.cn/2021042617491128.png" alt="在这里插入图片描述"></p></li><li><ol><li><p>在主机上写，在从机上可以读取数据 在从机上写数据报错 <img src="https://img-blog.csdnimg.cn/20210426174926870.png" alt="在这里插入图片描述"></p></li><li><ol><li><p>主机挂掉，重启就行，一切如初1. 从机重启需重设：slaveof 127.0.0.1 6379 可以将配置增加到文件中。永久生效。</p> <img src="https://img-blog.csdnimg.cn/20210426174952984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">## 4.常用三招</li></ol></li></ol></li></ol><h3 id="4-1-一主二仆"><a href="#4-1-一主二仆" class="headerlink" title="4.1 一主二仆"></a>4.1 一主二仆</h3><p>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</p><p>从机是否可以写？set可否？</p><p>主机shutdown后情况如何？从机是上位还是原地待命？</p><p>主机又回来了后，主机新增记录，从机还能否顺利复制？</p><p>其中一台从机down后情况如何？依照原有它能跟上大部队吗？</p><img src="https://img-blog.csdnimg.cn/20210426181309495.png" alt="在这里插入图片描述"><h3 id="4-2-薪火相传"><a href="#4-2-薪火相传" class="headerlink" title="4.2 薪火相传"></a>4.2 薪火相传</h3><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p><p>用 slaveof ip port 中途变更转向:会清除之前的数据，重新建立拷贝最新的 风险是一旦某个slave宕机，后面的slave都没法备份 主机挂了，从机还是从机，无法写数据了</p><p><img src="https://img-blog.csdnimg.cn/20210426181423809.png" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210426181433721.png" alt="在这里插入图片描述"></p><h3 id="4-3-反客为主"><a href="#4-3-反客为主" class="headerlink" title="4.3 反客为主"></a>4.3 反客为主</h3><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用 slaveof no one 将从机变为主机。 <img src="https://img-blog.csdnimg.cn/20210426181506400.png" alt="在这里插入图片描述"></p><h2 id="5-复制原理"><a href="#5-复制原理" class="headerlink" title="5.复制原理"></a>5.复制原理</h2><ul><li>Slave启动成功连接到master后会发送一个sync命令- Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步-</li><li> 全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。- </li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步- 但是只要是重新连接master,一次完全同步（全量复制)将被自动执行<br><img src="https://img-blog.csdnimg.cn/20210426181626693.png" alt="在这里插入图片描述"><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111262224024.png" alt="image-20211126222426844"></li></ul><h2 id="6-哨兵模式-sentinel"><a href="#6-哨兵模式-sentinel" class="headerlink" title="6.哨兵模式(sentinel)"></a>6.哨兵模式(sentinel)</h2><h3 id="6-1-是什么"><a href="#6-1-是什么" class="headerlink" title="6.1 是什么"></a>6.1 是什么</h3><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><img src="https://img-blog.csdnimg.cn/20210426181732246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="6-2-操作步骤"><a href="#6-2-操作步骤" class="headerlink" title="6.2 操作步骤"></a>6.2 操作步骤</h3><h4 id="6-2-1-调整为一主二仆模式，6379带着6380、6381"><a href="#6-2-1-调整为一主二仆模式，6379带着6380、6381" class="headerlink" title="6.2.1 调整为一主二仆模式，6379带着6380、6381"></a>6.2.1 调整为一主二仆模式，6379带着6380、6381</h4><img src="https://img-blog.csdnimg.cn/20210427153756815.png" alt="在这里插入图片描述" style="zoom:150%;"><h4 id="6-2-2-创建sentinel-conf文件"><a href="#6-2-2-创建sentinel-conf文件" class="headerlink" title="6.2.2 创建sentinel.conf文件"></a>6.2.2 创建sentinel.conf文件</h4><p>自定义的/myredis目录下新建sentinel.conf文件，名字绝不能错</p><h4 id="6-2-3-配置哨兵-填写内容"><a href="#6-2-3-配置哨兵-填写内容" class="headerlink" title="6.2.3 配置哨兵,填写内容"></a>6.2.3 配置哨兵,填写内容</h4><p>sentinel monitor mymaster 127.0.0.1 6379 1</p><p>其中mymaster为监控对象起的服务器名称， ==1 为至少有多少个哨兵同意迁移的数量。==</p><h4 id="6-2-4-启动哨兵"><a href="#6-2-4-启动哨兵" class="headerlink" title="6.2.4 启动哨兵"></a>6.2.4 启动哨兵</h4><p>/usr/local/bin</p><p>redis做压测可以用自带的redis-benchmark工具</p><p>执行redis-sentinel /myredis/sentinel.conf <img src="https://img-blog.csdnimg.cn/20210427153958757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="6-2-5-当主机挂掉，从机选举中产生新的主机"><a href="#6-2-5-当主机挂掉，从机选举中产生新的主机" class="headerlink" title="6.2.5 当主机挂掉，从机选举中产生新的主机"></a>6.2.5 当主机挂掉，从机选举中产生新的主机</h4><p>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</p><p>哪个从机会被选举为主机呢？根据优先级别：<strong>slave-priority</strong></p><p>原主机重启后会变为从机</p> <img src="https://img-blog.csdnimg.cn/20210427154038884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="6-2-6-复制延时"><a href="#6-2-6-复制延时" class="headerlink" title="6.2.6 复制延时"></a>6.2.6 复制延时</h4><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h3 id="6-3-故障恢复"><a href="#6-3-故障恢复" class="headerlink" title="6.3 故障恢复"></a>6.3 故障恢复</h3><p><img src="https://img-blog.csdnimg.cn/20210426181808424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 优先级在redis.conf中默认：replica-priority100，==值越小优先级越高==</p><p>偏移量是指获得原主机数据最全的</p><p>每个redis实例启动后都会随机生成一个40位的runid</p><h1 id="十四、Redis集群"><a href="#十四、Redis集群" class="headerlink" title="十四、Redis集群"></a>十四、Redis集群</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><p>容量不够，redis如何进行扩容？</p><p>并发写操作， redis如何分摊？</p><p><strong>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息</strong>。</p><p>之前通过代理主机来解决，但是<strong>redis3.0</strong>中提供了解决方案。就是<strong>无中心化集群</strong>配置。</p><h2 id="2-什么是集群"><a href="#2-什么是集群" class="headerlink" title="2.什么是集群"></a>2.什么是集群</h2><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><h2 id="3-删除持久化数据"><a href="#3-删除持久化数据" class="headerlink" title="3.删除持久化数据"></a>3.删除持久化数据</h2><p>将rdb,aof文件都删除掉！</p><h2 id="4-制作6个实例"><a href="#4-制作6个实例" class="headerlink" title="4.制作6个实例"></a>4.制作6个实例</h2><h3 id="4-1-配置基本信息"><a href="#4-1-配置基本信息" class="headerlink" title="4.1 配置基本信息"></a>4.1 配置基本信息</h3><p>开启daemonize yes Pid文件名字 指定端口 Log文件名字 Dump.rdb名字 Appendonly 关掉或者换名字</p><h3 id="4-2-redis-cluster配置修改"><a href="#4-2-redis-cluster配置修改" class="headerlink" title="4.2 redis cluster配置修改"></a>4.2 redis cluster配置修改</h3><p>cluster-enabled yes 打开集群模式</p><p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p><p>cluster-node-timeout 15000 设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p><blockquote><p> include /home/bigdata/redis.conf port 6379 pidfile “/var/run/redis_6379.pid” dbfilename “dump6379.rdb” dir “/home/bigdata/redis_cluster” logfile “/home/bigdata/redis_cluster/redis_err_6379.log” cluster-enabled yes cluster-config-file nodes-6379.conf cluster-node-timeout 15000 </p></blockquote><h3 id="4-3-修改好redis6379-conf文件，拷贝多个redis-conf文件"><a href="#4-3-修改好redis6379-conf文件，拷贝多个redis-conf文件" class="headerlink" title="4.3 修改好redis6379.conf文件，拷贝多个redis.conf文件"></a>4.3 修改好redis6379.conf文件，拷贝多个redis.conf文件</h3><img src="https://img-blog.csdnimg.cn/20210427162617895.png" alt="在这里插入图片描述"><h3 id="4-4-使用查找替换修改另外5个文件"><a href="#4-4-使用查找替换修改另外5个文件" class="headerlink" title="4.4 使用查找替换修改另外5个文件"></a>4.4 使用查找替换修改另外5个文件</h3><p>例如：:%s/6379/6380</p><h3 id="4-5-启动6个redis服务"><a href="#4-5-启动6个redis服务" class="headerlink" title="4.5 启动6个redis服务"></a>4.5 启动6个redis服务</h3><img src="https://img-blog.csdnimg.cn/20210427162713623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="5-将6个节点合成一个集群"><a href="#5-将6个节点合成一个集群" class="headerlink" title="5.将6个节点合成一个集群"></a>5.将6个节点合成一个集群</h2><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><img src="https://img-blog.csdnimg.cn/20210427162748500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><p>合体： cd /opt/redis-6.2.1/src</p><blockquote><p> redis-cli –cluster create –cluster-replicas 1 192.168.11.101:6379 192.168.11.101:6380 192.168.11.101:6381 192.168.11.101:6389 192.168.11.101:6390 192.168.11.101:6391 </p></blockquote><p>此处不要用127.0.0.1， 请用真实IP地址 –replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。 <img src="https://img-blog.csdnimg.cn/20210427162839874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210427162857653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>普通方式登录： 可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。 <img src="https://img-blog.csdnimg.cn/20210427162958321.png" alt="在这里插入图片描述"></p><h2 id="6-c-采用集群策略连接，设置数据会自动切换到相应的写主机"><a href="#6-c-采用集群策略连接，设置数据会自动切换到相应的写主机" class="headerlink" title="6.-c 采用集群策略连接，设置数据会自动切换到相应的写主机"></a>6.-c 采用集群策略连接，设置数据会自动切换到相应的写主机</h2><img src="https://img-blog.csdnimg.cn/20210427163051611.png" alt="在这里插入图片描述"><h2 id="7-通过-cluster-nodes-命令查看集群信息"><a href="#7-通过-cluster-nodes-命令查看集群信息" class="headerlink" title="7.通过 cluster nodes 命令查看集群信息"></a>7.通过 cluster nodes 命令查看集群信息</h2><img src="https://img-blog.csdnimg.cn/20210427163106937.png" alt="在这里插入图片描述"><h2 id="8-redis-cluster-如何分配这六个节点"><a href="#8-redis-cluster-如何分配这六个节点" class="headerlink" title="8.redis cluster 如何分配这六个节点"></a>8.redis cluster 如何分配这六个节点</h2><p>一个集群至少要有<strong>三个主节点</strong>。</p><p>选项 –cluster-replicas 1 表示我们希望为集群中的每个+主节点创建一个从节点。</p><p>==分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。==</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111271047381.png" alt="image-20211127104720231"></p><h2 id="9-什么是slots"><a href="#9-什么是slots" class="headerlink" title="9.什么是slots"></a>9.什么是slots</h2><blockquote><p> [OK] All nodes agree about slots configuration. Check for open slots… Check slots coverage… [OK] All 16384 slots covered. </p></blockquote><p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个</p><p>集群使用公式 CRC16(key) % 16384(2^14) 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中： 节点 A 负责处理 0 号至 5460 号插槽。 节点 B 负责处理 5461 号至 10922 号插槽。 节点 C 负责处理 10923 号至 16383 号插槽。</p><h2 id="10-在集群中录入值"><a href="#10-在集群中录入值" class="headerlink" title="10.在集群中录入值"></a>10.在集群中录入值</h2><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p><p>redis-cli客户端提供了 –c 参数实现自动重定向。</p><p>如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</p><p>不在一个slot下的键值，是不能使用mget,mset等多键操作。 <img src="https://img-blog.csdnimg.cn/2021042716511679.png" alt="在这里插入图片描述"></p><p>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。 <img src="https://img-blog.csdnimg.cn/20210427165130868.png" alt="在这里插入图片描述"></p><h2 id="11-查询集群中的值"><a href="#11-查询集群中的值" class="headerlink" title="11.查询集群中的值"></a>11.查询集群中的值</h2><p>CLUSTER GETKEYSINSLOT slot count 返回 count 个 slot 槽中的键。 <img src="https://img-blog.csdnimg.cn/20210427165218846.png" alt="在这里插入图片描述"></p><h2 id="12-故障恢复"><a href="#12-故障恢复" class="headerlink" title="12.故障恢复"></a>12.故障恢复</h2><p>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15秒超时</strong> </p><img src="https://img-blog.csdnimg.cn/20210427165237232.png" alt="在这里插入图片描述"> <p>主节点恢复后，主从关系会如何？主节点回来变成从机。 <img src="https://img-blog.csdnimg.cn/20210427165248918.png" alt="在这里插入图片描述"> </p><p>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</p><p>如果某一段插槽的主从都挂掉，而==cluster-require-full-coverage== 为==yes== ，那么 ，整个集群都挂掉</p><p>如果某一段插槽的主从都挂掉，而==cluster-require-full-coverage== 为==no== ，那么，该插槽数据全都不能使用，也无法存储。</p><p>redis.conf中的参数 cluster-require-full-coverage</p><h2 id="13-集群的Jedis开发"><a href="#13-集群的Jedis开发" class="headerlink" title="13.集群的Jedis开发"></a>13.集群的Jedis开发</h2><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。 无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以用set 或者直接使用JedisCluster jedisCluster=new JedisCluster(new HostAndPort("192.168.31.211",6379));</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisClusterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HostAndPort</span><span class="token punctuation">&gt;</span></span>set <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HostAndPort</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.31.211"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JedisCluster</span> jedisCluster<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-Redis-集群的好处与不足"><a href="#14-Redis-集群的好处与不足" class="headerlink" title="14.Redis 集群的好处与不足"></a>14.Redis 集群的好处与不足</h2><blockquote><p> 好处 </p></blockquote><ul><li>==实现扩====容==- ==分摊压力==- ==无中心配置相对简单==<blockquote><p>不足 </p></blockquote></li></ul><p>==多键操作是不被支持的==</p><p>多键的Redis事务是不被支持的。lua脚本不被支持</p><p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要==迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。==</p><h1 id="十五、Redis应用问题解决"><a href="#十五、Redis应用问题解决" class="headerlink" title="十五、Redis应用问题解决"></a>十五、Redis应用问题解决</h1><h2 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1.缓存穿透"></a>1.缓存穿透</h2><h3 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h3><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。 <img src="https://img-blog.csdnimg.cn/20210426183724212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111271106211.png" alt="image-20211127110625070"></p><h3 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h3><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决方案： </p><p>（1） ==对空值缓存==：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟 </p><p>（2） ==设置可访问的名单==（白名单）： 使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。 </p><p>（3） ==采用布隆过滤器==：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。 布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。) 将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。 </p><p>（4） ==进行实时监控==：当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h2 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2.缓存击穿"></a>2.缓存击穿</h2><h3 id="2-1-问题描述"><a href="#2-1-问题描述" class="headerlink" title="2.1 问题描述"></a>2.1 问题描述</h3><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><img src="https://img-blog.csdnimg.cn/20210427165625892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111271110835.png" alt="image-20211127111034716"></p><h3 id="2-2-解决方案"><a href="#2-2-解决方案" class="headerlink" title="2.2 解决方案"></a>2.2 解决方案</h3><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。 ==解决问题：== </p><p>（1）==预先设置热门数据：==在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长 </p><p>（2）==实时调整==：现场监控哪些数据热门，实时调整key的过期时长 </p><p>（3）==使用锁==：</p><ol><li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。1. 先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key1. 当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；1. 当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。<img src="https://img-blog.csdnimg.cn/20210427165735913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3.缓存雪崩"></a>3.缓存雪崩</h2><h3 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h3><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。 缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111271113805.png" alt="image-20211127111312693"></p><p>正常访问： <img src="https://img-blog.csdnimg.cn/20210427165942327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>缓存失效瞬间： <img src="https://img-blog.csdnimg.cn/20210427170340325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><p>解决方案： </p><p>（1） ==构建多级缓存架构==：nginx缓存 + redis缓存 +其他缓存（ehcache等） </p><p>（2） ==使用锁或队列==： 用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况 </p><p>（3） ==设置过期标志更新缓存==： 记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。 </p><p>（4） ==将缓存失效时间分散开==： 比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h2 id="4-分布式锁"><a href="#4-分布式锁" class="headerlink" title="4.分布式锁"></a>4.分布式锁</h2><h3 id="4-1-问题描述"><a href="#4-1-问题描述" class="headerlink" title="4.1 问题描述"></a>4.1 问题描述</h3><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li>基于数据库实现分布式锁1. 基于缓存（Redis等）1. 基于Zookeeper 每一种分布式锁解决方案都有各自的优缺点：1. 性能：redis最高1. 可靠性：zookeeper最高<br>这里，我们就基于redis实现分布式锁。</li></ol><h3 id="4-2-解决方案：使用redis实现分布式锁"><a href="#4-2-解决方案：使用redis实现分布式锁" class="headerlink" title="4.2 解决方案：使用redis实现分布式锁"></a>4.2 解决方案：使用redis实现分布式锁</h3><p><img src="https://gitee.com/ICDM_ws/pic-bed/raw/master/all/202111271122292.png" alt="image-20211127112209152"></p><p>redis : 命令</p><p>set sku:1:info “OK” NX PX 10000</p><p>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</p><p>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</p><p>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</p><p>XX ：只在键已经存在时，才对键进行设置操作。</p><img src="https://img-blog.csdnimg.cn/20210427170843840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">1. 多个客户端同时获取锁（setnx）1. 获取成功，执行业务逻辑{从db获取数据，放入缓存}，执行完成释放锁（del）1. 其他客户端等待重试### 4.3 编写代码<p>Redis: set num 0</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testLock"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//1获取锁，setne</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2获取锁成功、查询num的值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.1判断num为空return</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//2.2有值就转成成int</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.3把redis的num加1</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.4释放锁，del</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment">//3获取锁失败、每隔0.1秒再获取</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">&gt;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启，服务集群，通过网关压力测试： ab -n 1000 -c 100 <a href="http://192.168.140.1:8080/test/testLock">http://192.168.140.1:8080/test/testLock</a></p><img src="https://img-blog.csdnimg.cn/2021042717112672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><p>查看redis中num的值： <img src="https://img-blog.csdnimg.cn/20210427171142388.png" alt="在这里插入图片描述"> </p><p>基本实现。 问题：setnx刚好获取到锁，业务逻辑出现异常，导致锁无法释放 解决：设置过期时间，自动释放锁。</p><h3 id="4-4-优化之设置锁的过期时间"><a href="#4-4-优化之设置锁的过期时间" class="headerlink" title="4.4 优化之设置锁的过期时间"></a>4.4 优化之设置锁的过期时间</h3><p>设置过期时间有两种方式：</p><ol><li>首先想到通过expire设置过期时间（缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放）1. 在set时指定过期时间（推荐）<br><img src="https://img-blog.csdnimg.cn/20210427171218156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 设置过期时间： <img src="https://img-blog.csdnimg.cn/20210427171301126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>压力测试肯定也没有问题。自行测试 问题：可能会释放其他服务器的锁。</p><p>场景：如果业务逻辑的执行时间是7s。执行流程如下</p><ol><li>index1业务逻辑没执行完，3秒后锁被自动释放。1. index2获取到锁，执行业务逻辑，3秒后锁被自动释放。1. index3获取到锁，执行业务逻辑1. index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。 最终等于没锁的情况。<br>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</li></ol><h3 id="4-5-优化之UUID防误删"><a href="#4-5-优化之UUID防误删" class="headerlink" title="4.5 优化之UUID防误删"></a>4.5 优化之UUID防误删</h3><img src="https://img-blog.csdnimg.cn/20210427171340643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210427171350165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><p>问题：删除操作缺乏原子性。 场景： <img src="https://img-blog.csdnimg.cn/20210427171437640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-6-优化之LUA脚本保证删除的原子性"><a href="#4-6-优化之LUA脚本保证删除的原子性" class="headerlink" title="4.6 优化之LUA脚本保证删除的原子性"></a>4.6 优化之LUA脚本保证删除的原子性</h3><pre class="line-numbers language-none"><code class="language-none">@GetMapping("testLockLua")public void testLockLua() {&lt;!-- --&gt;    //1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中    String uuid = UUID.randomUUID().toString();    //2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！    String skuId = "25"; // 访问skuId 为25号的商品 100008348542    String locKey = "lock:" + skuId; // 锁住的是每个商品的数据    // 3 获取锁    Boolean lock = redisTemplate.opsForValue().setIfAbsent(locKey, uuid, 3, TimeUnit.SECONDS);    // 第一种： lock 与过期时间中间不写任何的代码。    // redisTemplate.expire("lock",10, TimeUnit.SECONDS);//设置过期时间    // 如果true    if (lock) {&lt;!-- --&gt;        // 执行的业务逻辑开始        // 获取缓存中的num 数据        Object value = redisTemplate.opsForValue().get("num");        // 如果是空直接返回        if (StringUtils.isEmpty(value)) {&lt;!-- --&gt;            return;        }        // 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！        int num = Integer.parseInt(value + "");        // 使num 每次+1 放入缓存        redisTemplate.opsForValue().set("num", String.valueOf(++num));        /*使用lua脚本来锁*/        // 定义lua 脚本        String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";        // 使用redis执行lua执行        DefaultRedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;();        redisScript.setScriptText(script);        // 设置一下返回值类型 为Long        // 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，        // 那么返回字符串与0 会有发生错误。        redisScript.setResultType(Long.class);        // 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。        redisTemplate.execute(redisScript, Arrays.asList(locKey), uuid);    } else {&lt;!-- --&gt;        // 其他线程等待        try {&lt;!-- --&gt;            // 睡眠            Thread.sleep(1000);            // 睡醒了之后，调用方法。            testLockLua();        } catch (InterruptedException e) {&lt;!-- --&gt;            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lua 脚本详解： <img src="https://img-blog.csdnimg.cn/2021042717154497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 项目中正确使用： <img src="https://img-blog.csdnimg.cn/20210427171619682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-7-总结"><a href="#4-7-总结" class="headerlink" title="4.7 总结"></a>4.7 总结</h3><p>1、加锁</p><pre class="line-numbers language-none"><code class="language-none">// 1. 从redis中获取锁,set k1 v1 px 20000 nxString uuid = UUID.randomUUID().toString();Boolean lock = this.redisTemplate.opsForValue()      .setIfAbsent("lock", uuid, 2, TimeUnit.SECONDS);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用lua释放锁</p><pre class="line-numbers language-none"><code class="language-none">// 2. 释放锁 delString script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";// 设置lua脚本返回的数据类型DefaultRedisScript&lt;Long&gt; redisScript = new DefaultRedisScript&lt;&gt;();// 设置lua脚本返回类型为LongredisScript.setResultType(Long.class);redisScript.setScriptText(script);redisTemplate.execute(redisScript, Arrays.asList("lock"),uuid);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、重试</p><pre class="line-numbers language-none"><code class="language-none">Thread.sleep(500);testLock();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：</p><ul><li>互斥性。在任意时刻，只有一个客户端能持有锁。- 不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。- 解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。- 加锁和解锁必须具有原子性。<h1 id="十六、Redis6-0新功能"><a href="#十六、Redis6-0新功能" class="headerlink" title="十六、Redis6.0新功能"></a>十六、Redis6.0新功能</h1></li></ul><h2 id="1-ACL"><a href="#1-ACL" class="headerlink" title="1.ACL"></a>1.ACL</h2><h3 id="1-1-简介-1"><a href="#1-1-简介-1" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>Redis ACL是Access Control List（==访问控制列表==）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p><ol><li>接入权限:用户名和密码1. 可以执行的命令1. 可以操作的 KEY<h3 id="1-2-命令"><a href="#1-2-命令" class="headerlink" title="1.2 命令"></a>1.2 命令</h3></li></ol><p>1、使用acl list命令展现用户权限列表 （1）数据说明 <img src="https://img-blog.csdnimg.cn/20210427172027133.png" alt="在这里插入图片描述"></p><p>2、使用acl cat命令 （1）查看添加权限指令类别 <img src="https://img-blog.csdnimg.cn/20210427172045247.png" alt="在这里插入图片描述"> （2）加参数类型名可以查看类型下具体命令 <img src="https://img-blog.csdnimg.cn/20210427172127847.png" alt="在这里插入图片描述"></p><p>3、使用acl whoami命令查看当前用户 <img src="https://img-blog.csdnimg.cn/20210427172156427.png" alt="在这里插入图片描述"></p><p>4、使用aclsetuser命令创建和编辑用户ACL （1）ACL规则 下面是有效ACL规则的列表。某些规则只是用于激活或删除标志，或对用户ACL执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</p><p><img src="https://img-blog.csdnimg.cn/20210427172311449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210427172325670.png" alt="在这里插入图片描述"></p><p>（2）通过命令创建新用户默认权限 acl setuser user1 <img src="https://img-blog.csdnimg.cn/20210427172359369.png" alt="在这里插入图片描述"> 在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p><p>（3）设置有用户名、密码、ACL权限、并启用的用户 acl setuser user2 on &gt;password ~cached:* +get <img src="https://img-blog.csdnimg.cn/20210427172413518.png" alt="在这里插入图片描述"> （4）切换用户，验证权限 <img src="https://img-blog.csdnimg.cn/20210427172442266.png" alt="在这里插入图片描述"></p><h2 id="2-IO多线程"><a href="#2-IO多线程" class="headerlink" title="2.IO多线程"></a>2.IO多线程</h2><h3 id="2-1-简介-2"><a href="#2-1-简介-2" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>Redis6终于支持多线程了，告别单线程了吗？</p><p>==IO多线程其实指客户端交互部分的网络IO交互处理模块多线程==，而非执行命令多线程。R==edis6执行命令依然是单线程。==</p><h3 id="2-2-原理架构"><a href="#2-2-原理架构" class="headerlink" title="2.2 原理架构"></a>2.2 原理架构</h3><p>Redis 6 加入多线程,但跟 Memcached 这种从 IO处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下： <img src="https://img-blog.csdnimg.cn/2021042618034716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 另外，多线程IO默认也是不开启的，需要再配置文件中配置</p><pre class="line-numbers language-none"><code class="language-none">io-threads-do-reads  yes io-threads 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-工具支持（Cluster）"><a href="#3-工具支持（Cluster）" class="headerlink" title="3.工具支持（Cluster）"></a>3.工具支持（Cluster）</h2><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测。 <img src="https://img-blog.csdnimg.cn/20210426180828406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-Redis新功能持续关注"><a href="#4-Redis新功能持续关注" class="headerlink" title="4.Redis新功能持续关注"></a>4.Redis新功能持续关注</h2><p>Redis6新功能还有：</p><ol><li><strong>RESP3新的 Redis 通信协议</strong>：优化服务端与客户端之间通信1. <strong>Client side caching客户端缓存</strong>：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。1. <strong>Proxy集群代理模式</strong>：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用cluster的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多Key操作。1. <strong>Modules API</strong>：Redis 6中模块API开发进展非常大，因为Redis Labs为了开发复杂的功能，从一开始就用上Redis模块。Redis可以变成一个框架，利用Modules来构建不同系统，而不需要从头开始写然后还要BSD许可。Redis一开始就是一个向编写各种系统开放的平台。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/01/03/test/"/>
      <url>/2022/01/03/test/</url>
      
        <content type="html"><![CDATA[<p>==测试==</p><p><em>ceshi</em></p><p><strong>test</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
